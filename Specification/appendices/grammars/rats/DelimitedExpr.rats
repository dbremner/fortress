%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Copyright 2009 Sun Microsystems, Inc.,
%   4150 Network Circle, Santa Clara, California 95054, U.S.A.
%   All rights reserved.
%
%   U.S. Government Rights - Commercial software.
%   Government users are subject to the Sun Microsystems, Inc. standard
%   license agreement and applicable provisions of the FAR and its supplements.
%
%   Use is subject to license terms.
%
%   This distribution may include materials developed by third parties.
%
%   Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
%   trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{verbatim}
DelimitedExpr =
     ArgExpr
   / Parenthesized
   / "object" (w ExtendsWhere)? (w GoInAnObject)? w "end"
   / Do
   / "label" w Id w BlockElems w "end" w Id
   / "label" w OpName w BlockElems w "end" w Id // Error production
   / "while" w GeneratorClause w Do
   / "for" w GeneratorClauseList w DoFront w "end"
   / "if" w GeneratorClause w "then" w BlockElems (w Elifs)? (w Else)? w "end"
   / "if" w GeneratorClause w "then" w BlockElems (w Elifs)? w Else (w "end")? &(w ")")
   / "(" w "if" w GeneratorClause w "then" w BlockElems (w Elifs)? w Else (w "end")? w ")"
   / "case" w Expr (w (Encloser / Op))? w "of" w CaseClauses (w CaseElse)? w "end"
   / "case" w Expr (w (Encloser / Op))? w "do" w CaseClauses (w CaseElse)? w "end" // Error production
   / "case" w "most" w (Encloser / Op) w "of" w CaseClauses w "end"
   / "case" w "most" w (Encloser / Op) w "do" w CaseClauses w "end" // Error production
   / "typecase" w TypecaseBindings w "of" w TypecaseClauses (br CaseElse)? w "end"
   / "typecase" w TypecaseBindings w "do" w TypecaseClauses (br CaseElse)? w "end" // Error production
   / "typecase" w "self" w "of" w TypecaseClauses (br CaseElse)? w "end" // Error production
   / "try" w BlockElems (w Catch)? (w "forbid" w TraitTypes)? (w "finally" w BlockElems)? w "end"

Do = (DoFront w "also" w)* DoFront w "end"

DoFront = ("at" w Expr w)? ("atomic" w)? "do" (w BlockElems)?

ArgExpr =
     "(" w (Expr w "," w)* (Expr w "..." w "," w)? KeywordExpr (w "," w KeywordExpr)* w ")"
   / "(" w (Expr w "," w)* Expr w "..." w ")"
   / TupleExpr

TupleExpr = "(" w (Expr w "," w)* Expr w ")"

KeywordExpr = BindId w "=" w Expr

Parenthesized = "(" w Expr w ")"

Elifs = Elif (w Elif)*

Elif = "elif" w GeneratorClause w "then" w BlockElems

Else = "else" w BlockElems

CaseClauses = CaseClause (br CaseClause)*

/* CaseClause is defined in LocalDecl.rats */

CaseElse = "else" w match w BlockElems

TypecaseBindings = TypecaseVars (w "=" w Expr)?

TypecaseVars =
     BindId
   / "(" w BindId (w "," w BindId)+ w ")"

TypecaseClauses = TypecaseClause (br TypecaseClause)*

TypecaseClause = TypecaseTypes w match w BlockElems

TypecaseTypes =
     "(" w TypeList w ")"
   / Type

Catch = "catch" w BindId w CatchClauses

CatchClauses = CatchClause (br CatchClause)*

CatchClause = TraitType w match w BlockElems

MapExpr = "{" StaticArgs? (w EntrList)? w "}"

Comprehension =
     ("BIG" w)? "[" wr StaticArgs w ArrayComprehensionClause (br ArrayComprehensionClause)* w "]"
     // Error production
   / ("BIG" w)? "{" wr StaticArgs w Entry wr bar wr GeneratorClauseList w "}" // Error production
   / ("BIG" w)? LeftEncloser wr StaticArgs w Expr wr bar wr GeneratorClauseList w RightEncloser
     // Error production
   / ("BIG" w)? "[" StaticArgs? w ArrayComprehensionClause (br ArrayComprehensionClause)* w "]"
   / ("BIG" w)? "{" StaticArgs? w Entry wr bar wr GeneratorClauseList w "}"
   / ("BIG" w)? LeftEncloser StaticArgs? w Expr wr bar wr GeneratorClauseList w RightEncloser

/* The operator "|->" should not be in the left-hand sides of map expressions
   and map/array comprehensions.
 */
mapstoOp = !("|->" w Expr (w mapsto / wr bar / w "}" / w ",")) "|->"

Entry = Expr w mapsto w Expr

ArrayComprehensionLeft =
     IdOrInt w mapsto w Expr
   / "(" w IdOrInt w "," w IdOrIntList w ")" w mapsto w Expr

/* ArrayComprehensionClause is defined in Symbol.rats */

IdOrInt =
     Id
   / IntLiteralExpr

IdOrIntList = IdOrInt (w "," w IdOrInt)*

ExprList = Expr (w "," w Expr)*

EntryList = Entry (w "," w Entry)*
\end{verbatim}
