%%%%%%%%%%%%%%% BEGIN REDUCTION FIGURE %%%%%%%%%%%%%%%%
\begin{figure}[t]
\begin{tabular}{c}
\begin{minipage}{\textwidth}
\newjudge{Existential reduction}{\jtreds{\delta}{\delta}{\phi}}
\vspace*{-1em}
\infrule
  {\jcequiv{T}{\BottomType}{\TRUE}}
  {\jtreds{\exttype{T}}{\BottomType}{[]}}

% \infrule
%   {\jcnonequiv{T}{\BottomType}{\C} \\
%    \jcsolve{\C}{\NONE}}
%   {\jtred{\exttype{T}}{\exttype{T}}}
% 
% \infrule
%   {\jcnonequiv{T}{\BottomType}{\C} \\
%    \jcsolve{\C}{\phi} \andalso \phi[\Delta] = \NONE}
%   {\jtred{\exttype{T}}{\exttype{T}}}

\infrule
  {\jcnonequiv{T}{\BottomType}{\C} \andalso
   \jcsolve{\C}{\phi} \andalso \phi[\Delta] = \Delta'}
  {\jtreds{\exttype{T}}{\exttype[\Delta']{\phi(T)}}{\phi}}


\newjudge{Bounds substitution}{\phi[\Delta] = \Delta}
\vspace*{-.8em}
\infrule
  {\Delta = \bds{X}{M}
      \andalso \phi(\bar{X}) = \bar{Y}, \bar{T}
      \andalso \bar{\bar{N}} = \bar{\phi^{-1}[Y,\Delta]} \\
    \forall i. \quad \jcsub[\bds{Y}{N}]{\phi(X_i)}{\bar{\phi(M_i)}}{\TRUE}}
  {\phi[\Delta] = \bds{Y}{N}}

% \infrule
%   {\Delta = \bds{X}{M}
%       \andalso \phi(\bar{X}) = \bar{Y} \sqcup \bar{T}
%       \andalso \bar{N} = \phi^{-1}[\bar{Y},\Delta] \\
%     \exists i. \quad \jcsub[\bds{Y}{N}]{\phi(X_i)}{\bd{\phi(M_i)}}{\C_i}
%       \andalso \C_i \neq \FALSE}
%   {\phi[\Delta] = \NONE}

\newjudge{Bounds transfer}{\phi^{-1}[X,\Delta] = \bar{T}}
\vspace*{-.8em}
\infrule
  {\{\bar{T}\} = \{\phi(\Delta(X)) \mid X \in dom(\Delta),\; \phi(X) = Y\}}
  {\phi^{-1}[Y,\Delta] = conjuncts(\bigcap \bar{T})}

%% CONJUNCTS DEF
\[
conjuncts(T) \quad \syndef \quad
  \begin{cases}
    conjuncts(T_1), conjuncts(T_2)\quad & \text{if } T = T_1 \cap T_2 \\
    T & \text{otherwise}
  \end{cases}
\]

\end{minipage}
\\\\\hline
\end{tabular}

  \caption{Reduction of existential types}
  \label{fig:exred}
\end{figure}
%%%%%%%%%%%%%%% END REDUCTION FIGURE %%%%%%%%%%%%%%%%


We now use the non-equivalence judgment to make rigorous our intuition about
how polymorphic exclusion affects the mechanical verification of the overloading
rules. We define a reduction judgment on existential types in Figure~\ref{fig:exred}
which reduces $\delta$ to $\delta'$ such that $T \ni \delta$ if and only if
$T \ni \delta'$. Furthermore, we have that $\delta' \le \delta$.
The $solve$ operation is like that defined in Smith and Cartwright~\cite{smith08}.
Then we will show how augmenting the $\le$ relation with the rule:\\[-1.5em]
\infrule
  {\jtred{\delta}{\delta'} \andalso \jqsub{\delta'}{T}}
  {\jqsub{\delta}{T}}
lets us prove that more sets of overloaded functions satisfy the overloading rules.
Reducing an existential type in this fashion involves the same kind of
type analysis required for type checking generalized algebraic data types
% in other languages
\cite{simonet07,jones09}.

The reduction judgment $\vdash\delta\eqred\delta',\phi$ says that the existential type $\delta = \exttype{T}$ reduces to $\delta' = \exttype[\Delta']{T'}$ with the substitution $\phi$ (when the substitution is unnecessary we omit it) under the assumption that $T$ is not equivalent to \BottomType; or, if $T$ is equivalent to \BottomType, the reduced existential $\delta'$ is \BottomType. As an example, consider the following instance of reduction:\\[.8em]
`EXISTS[\X <: Any, Y <: ZZ\](ArrayList[\X\] CAP List[\Y\])` $\eqred$
`EXISTS[\W <: ZZ\]ArrayList[\W\]`
\\[.8em]
with substitution $[X/Y]$. We first check under what constraints $\C$
the intersection `ArrayList[\X\] CAP List[\Y\]` is not equivalent to
\BottomType: with polymorphic exclusion (specifically, the absence of
multiple instantiation inheritance) we know that `ArrayList[\X\]`
excludes `List[\Y\]`, which would make their intersection equivalent
to \BottomType, unless $X \equiv Y$ is true. Solving the constraint $X
\equiv Y$ yields a type substitution like $\phi = [W/X,\, W/Y]$. The
judgment $\phi[\Delta] = \Delta'$ lets us construct reduced bounds
from $\phi$ and the original bounds $\Delta$. To do this, we first
partition $\phi(\bar{X})$ into a list of type variables $\bar{Y}$ and a
list of other types $\bar{T}$. In our example, $\phi(X, Y) = W$ gets
partitioned into $W$ and $\emptyset$. Then we need to construct a new
bound $\phi^{-1}[Y_i, \Delta]$ for each $Y_i$ in $\bar{Y}$ by
conjoining the bounds for every type variable in $\phi^{-1}(Y)$. In
our example, $X$ and $Y$ map to $W$, so the bounds for $W$ are `{Any, ZZ}`,
which we take as the new bounds environment $\Delta'$. We must
ensure that the substitution does not produce invalid bounds, so we
check $\bar{\Delta' \vdash \phi(X) <: \bar{\phi(M)}}$. In our example,
`W <: {ZZ, Any}` easily proves that `W <: ZZ` and `W <: Any`. With
$\Delta'$ the reduced existential type is simply
$\exists\ob{\Delta'}\phi(T)$, where $T$ is the constituent type of the
original existential. In our example, the final, reduced existential
type is `EXISTS[\W <: ZZ\]ArrayList[\W\]`.
%
Once we have augmented the subtyping relation with existential
reduction, we can finally check that the declarations $\D(\mbox{\emph{foo}})$ from
Section~4 satisfy the Meet Rule.


A similar analysis shows that if an instance of a universal arrow has the domain `BottomType`, then it is irrelevant for the purposes of guaranteeing Progress. Therefore we can use our reduction rule for existential types to aid in the verification of the Return Type Rule by augmenting the subtype rules for universal arrows:
\\[-1.5em]
\infrule
  {\jtreds{\exttype[\Delta_1]{T}}{\delta'}{\phi} \andalso
   \jqsub{S}{\unitype[{\phi[\Delta_1]}]{\left(\arrowtype{\phi(T)}{\phi(U)}\right)}}}
  {\jqsub{S}{\unitype[\Delta_1]{\arrowtype{T}{U}}}}
 % {\Delta \vdash S <: reduce(`FORALL[\X_bar <: M_bar\]S \to T`)}
 % {\Delta \vdash S <: `FORALL[\X_bar <: M_bar\]S \to T`}
It is easy to see from the previous existential reduction instance that this subtype judgment can be proven, thus allowing us to verify the Return Type Rule for the function $\D(tail)$ from Section~4.
