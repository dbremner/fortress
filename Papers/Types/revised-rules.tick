\TODO{Meet rule fixed by changes to existential subtyping} \\
\TODO{Use machinery to fix computation of return type rule} \\
\TODO{Show list, arraylist works}

For the purposes of the progress rule: if the domain of an arrow is bottomtype we don't care what the range is. Therefore we can compute a reduced universal arrow for checking the return type rule using an algorithm just like reduce for existentials.

\infrule
  {\jtred{\exttype{T}}{\BottomType}}
  {\jtred{\unitype{\arrowtype{T}{U}}}{\unitype{\arrowtype{T}{\BottomType}}}}
  % {reduce(`EXISTS[\X_bar <: M_bar\]S`) = `BottomType`}
  % {reduce(`FORALL[\X_bar <: M_bar\]S \to T`) = `FORALL[\X_bar <: M_bar\]BottomType \to T`}

% \TODO{next one necessary?}
% \infrule
%   {\jtred{\exttype{T}}{\exttype{T}}}
%   {\jtred{\unitype{\arrowtype{T}{U}}}{\unitype{\arrowtype{T}{U}}}}
%   % {reduce(`EXISTS[\X_bar <: M_bar\]S`) = `EXISTS[\X_bar <: M_bar\]S`}
%   % {reduce(`FORALL[\X_bar <: M_bar\]S \to T`) = `FORALL[\X_bar <: M_bar\]S \to T`}

\infrule
  {\jcnonequiv{T}{\BottomType}{\C} \\
    \jcsolve{\C}{\phi} \andalso \phi[\Delta] = \Delta'}
  {\jtred{\unitype{\arrowtype{T}{U}}}{\unitype[\Delta']{\arrowtype{\phi(T)}{\phi(U)}}}}
  % {`X_bar <: M_bar` \vdash S \not \equiv `BottomType` | \C \andalso \C \neq False \\
  %  `X_bar <: M_bar` \vdash solve(\C) = \phi \andalso newbounds(`[\X_bar <: M_bar\]`, \phi) = Some(`[\Y_bar <: N_bar\]`) \\
  %  U = \phi(T) \andalso V = \phi(T)}
  % {reduce(`FORALL[\X_bar <: M_bar\]S \to T`) = `FORALL[\Y_bar <: N_bar\]U \to V`}

Could augment subtype rule for universal arrows.  Not sure whether this is a good idea it basically is the same as filtering all the bottom domained arrows out of the set of instances. Makes sense for progress and doesn't affect preservation. But is kind of weird. PLUS SIDE: don't have to change statement of return type rule algorithm at all. If you choose this path move this section in with the existential reduce.

\infrule
  {\omega = \unitype{\arrowtype{T}{U}} \andalso
  \jtred{\omega}{\omega'} \andalso \jqsub{S}{\omega'}}
  {\jqsub{S}{\omega}}
 % {\Delta \vdash S <: reduce(`FORALL[\X_bar <: M_bar\]S \to T`)}
 % {\Delta \vdash S <: `FORALL[\X_bar <: M_bar\]S \to T`}

Otherwise change the algorithm for checking the subtype rule to use the reduced arrow instead of the one we were using before.
