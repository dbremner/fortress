(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component String
import List.{...}
import JavaString.{...}
export String
     
  test rangeIntersect() = do
        assert((0:5) ∩ (0:3), 0:3)
        assert((0:5) ∩ (3:7), 3:5)
        assert((0:5) ∩ (7:10), 7:5)
        assert((5:3).size, 0, "The size of 5:3 is not zero!")
        assert((9:8).size, 0, "The size of 9:8 is not zero!")
        assert( (5:3).isEmpty, "5:3 is not empty!")
        assert( (9:8).isEmpty, "9:8 is not empty!")
        assert( ((0:5) ∩ (7:10)).isEmpty, "0:5 has a non-empty intersection with 7:10 !")
        assert( (7:9)≪7, (0#3), "7:9≪7 isn't 0#3" ) 
  end
  
    (* Shift a range left by the specified amount.  *)
    opr ≪(r: CompactFullRange⟦ZZ32⟧, leftShift: ZZ32) = (r.lower - leftShift)#r.size
    (* Shift a range right by the specified amount. *)
    opr ≫(r: CompactFullRange⟦ZZ32⟧, rightShift: ZZ32) = (r.lower + rightShift)#r.size
    
  test testShiftLeft(): () = do
    assert( (10:12) ≪ 9, 1:3)
  end
  
  test testShiftRight(): () = do
    assert( (2:3) ≫ 5, 7:8)
  end
  
  test testRangeContainment = do
    assert( (2:3) ≤ (2:3), "(2:3) not less than or equal to (2:3)")
    assert (2#2, 2:3) 
    assert( (2#2) ≤ (2:3), "(2#2) not less than or equal to (2:3)")
  end
  

  fib = do
    maxFib = 46         (* fib(47) > maximum ZZ32 *)
    a: Array1⟦ZZ32, 0, 47⟧ = array1⟦ZZ32, 47⟧()
    a[0] := 0
    a[1] := 1
    a[n] := a[n-2] + a[n-1], n ← seq(2:maxFib)
    a
  end
  

(*
  test testFib() = do
    fibonacci(n): ZZ32 =  (* We start with zero so that the empty string does not have to be a special case. *)
                        case n of
                                    0 => 0
                                    1 => 1
                                    else => fibonacci(n-1) + fibonacci(n-2) 
                        end
    print "starting testFib: "
    for i ← 0:20 do assert(fib[i], fibonacci i); print "." end  
    (* We really can't use the naive fibonacci function for large n *)
    println "testFib done"
  end
*)
       
(* 
==== Shared Traits ====
*)

  trait Concatenable
    opr || (self, other:String): String = 
        if |other| = 0 then self else CatString(self, other) end
    opr || (self, _:EmptyString): String = self
    opr || (self, other:Char) = CatString(self, other.toString)
  end Concatenable
  
  
  trait Balanceable 
    getter isBalanced() = self.depth ≤ 46 AND: |self| ≥ fib[self.depth]
    getter isAlmostBalanced() = self.depth ≤ 48 AND: |self| ≥ fib[self.depth-2]
  end Balanceable
  
(*
==== CatString ====
*)

  object CatString(left: String, right:String)  extends {String, Concatenable, Balanceable}
    size = left.size + right.size
    depthField = 1 + (left.depth MAX right.depth)
    getter depth() = depthField
    getter bounds() = 0#size
    getter generator() = ConcatGenerator(left.generator, right.generator)     
    getter asJavaString() = javaAppend(left.asJavaString, right.asJavaString)
    
    opr ∈ (c:Char, self): Boolean = (c IN left) OR (c IN right)
    
    (* copied from concatenable *)
       opr || (self, other:String): String = 
        if |other| = 0 then self else CatString(self, other) end
    opr || (self, _:EmptyString): String = self
    opr || (self, other:Char) = CatString(self, other.toString)
    (* end copied *)
    
    opr CMP(self, other: String) ensures {outcome = (self.asJavaString CMP other.asJavaString)} =
        if |left| ≥ |other|
        then
            left CMP other
        else
            (left CMP other[0#|left|]) LEXICO: (right CMP other[(|left|):])
        end 
        
    opr CASE_INSENSITIVE_CMP(self, other:String): TotalComparison ensures {outcome = (self.asJavaString CASE_INSENSITIVE_CMP other.asJavaString)} = 
        if |left| ≥ |other|
        then
            left CASE_INSENSITIVE_CMP other
        else
            (left CASE_INSENSITIVE_CMP other[0#|left|]) LEXICO: (right CASE_INSENSITIVE_CMP other[(|left|):])
        end

    (* get is, and should be, without bounds checks.  [ ] does the bounds checks, 
        and then delegates to get *)   
    get(i): Char = 
        if i ∈ left.indices then left[i] else right[i - |left|] end
      
    verify() = do
        assert(self.depth, (left.depth MAX right.depth) + 1, self)
        assert(self.size(), |left| + |right|, self)
    end 
        

    showStructure(indent: ZZ32) = do
        margin(indent)
        println  (self.balanceIndicator() || "C" || |self| "/" self.depth || ":" )
        left.showStructure(indent+8)
        right.showStructure(indent+8)
    end
    
    balanceIndicator() = if self.isBalanced then "B" elif self.isAlmostBalanced then "b" else "u" end

    uncheckedSubstring(r0: Range⟦ZZ32⟧) = label method 
        (* printlnWithThread ("CatString.uncheckedSubstring " self "[" r0 "]").asJavaString *)
        if r0.isEmpty then exit method with EmptyString end
        if r0 = self.bounds then exit method with self end
        leftBounds' = r0 ∩ left.bounds
        rightBounds' = (r0 ≪ left.size) ∩ right.bounds
            if left = "wombat" then
              atomic do 
                println "uncheckedSubstring " r0 " of "
                self.showStructure()
                println "==============="
                println "leftBounds' = " leftBounds' ( if leftBounds'.isEmpty then "(empty)" else "(non-empty)" end )
                println "rightBounds' = " rightBounds'  ( if rightBounds'.isEmpty then "(empty)" else "(non-empty)" end )
                println "==============="
              end (*do*)
            end
        if leftBounds'.isEmpty then 
            exit method with right.uncheckedSubstring(rightBounds')
        end
        if rightBounds'.isEmpty then
            exit method with left.uncheckedSubstring(leftBounds')
        end
        SubString'(self, r0)
    end method

    writeOn(stream): () = do
        stream.write(left)
        stream.write(right)
    end  
    
    split(): Generator⟦(ZZ32, String)⟧ = ⟨ (0, left), (|left|, right) ⟩
    
    balanced() ensures {outcome = self ∧ outcome.isAlmostBalanced} = 
      label method
        if self.isBalanced then exit method with self end
        forest = BalancingForest()
        forest.add(self.left)
        forest.add(self.right)
        forest.contents
      end method
  end CatString
  
  
  
  object BalancingForest() 
    balanceDebug = false
    var cumulativeSize: ZZ32 := 0
    var sequence: Array1⟦String, 0, 47⟧ := array1⟦String, 47⟧(EmptyString)
    (* invariant { BIG ∧ [ i ← sequence.indices ]
        |sequence[i]| = 0 ∨  fib[i] ≤ |sequence[i]| < fib[i+1]  } *)
    
    getter contents() ensures { |outcome| = cumulativeSize } = do
        (* We could do this all with a BIG || of a sequential generator.
            That would loose the possibility of a short-circuit evaluation.
            We could also use a concurrent generator, which would usually balance,
            depending on the whim of the scheduler ... 
            Which is best? *)
        var  i: ZZ32 = 1
        var result: String = EmptyString
        while result.size < cumulativeSize do
            result := sequence[i] || result
            i := i + 1
        end
        result
    end
    
    showSequence() = if balanceDebug then
        for i ← seq(sequence.indices.flip) do
            if sequence[i].nonEmpty then
                print "sequence[" i "] = " 
                sequence[i].showStructure()
            end
        end  
      end
    
    addWholeSubtree(s: String) =  
      do
        (* adds s to this BalancingForest, maintaining the invariant that the concatenation
        of the elements of sequence is equal to the concatenation of all of the Strings s 
        added to self *)
        cumulativeSize := cumulativeSize + |s|
        var i: ZZ32 = 0
        var sum: String = EmptyString
        while  |s| > fib[i] do
            if sequence[i] ≠ EmptyString then
                sum := sequence[i] || sum
                sequence[i] := EmptyString
            end
            i := i + 1
        end
        sum := sum || s
        while |sum| ≥ fib[i] do
            if sequence[i] ≠ EmptyString then
                sum := sequence[i] || sum
                sequence[i] := EmptyString
            end
            i := i + 1
        end
        sequence[i-1] := sum
      end                
    
    add(s: JavaString) =  
      do
        self.addWholeSubtree(s)
        if balanceDebug then 
            print "added J\"" s "\", "
            self.showSequence()
        end
      end
    
    add(s: CatString)  =  
      do
        if s.isBalanced then 
            self.addWholeSubtree(s)
        else
            self.add(s.left)
            self.add(s.right)
        end   
        if balanceDebug then 
            print "added C\"" s "\", "
            self.showSequence()
        end
      end
    
    add(s: EmptyString) = 
      do end
    
    add(s: SubString') = 
        self.addWholeSubtree(s.balanced)
    
  end BalancingForest
    
  test testEquality() = do
    subJ = SubString'("bcdefg", 1#4)
    subC = SubString'(CatString("@ab", "cdefg"), 2#4)
    assert(subJ > subC, "cdef not > bcde")
    assert(SubString'("abcdefg", 1#4), subC)
  end
  

  object ConcatGenerator⟦T⟧(first:Generator⟦T⟧, second:Generator⟦T⟧)
        extends Generator⟦T⟧
    generate⟦R⟧(r: Reduction⟦R⟧, body:T→R):R =
        r.join(first.generate⟦R⟧(r, body), second.generate⟦R⟧(r, body))
  end ConcatGenerator

(*
==== EmptyString ====
*)

  value object EmptyString extends {String, Concatenable}
    getter size() = 0
    getter bounds() = 0#0
    getter isEmpty() = true
    getter generator() = Nothing⟦Char⟧
    getter asJavaString() = ""
    
    opr ∈ (c:Char, self): Boolean = false
    rangeContains(r: Range⟦ZZ32⟧, c: Char) = false
    
    (* copied from concatenable *)
    opr || (self, _:EmptyString): String = self
    (* end copied *)
    
    opr CMP(self, other: String): TotalComparison =
        |self| CMP |other|
    opr CASE_INSENSITIVE_CMP(self, other:String): TotalComparison =  
        |self| CMP |other|

    get(i): Char = 
        throw IndexOutOfBounds("Can't get characters from an empty string")

    opr[r: Range⟦ZZ32⟧]: String = do
        rr = self.bounds[r]     (* to raise a bounds error *)
        EmptyString
    end
    
    verify() = do
        assert(self.depth, 0, self)
        assert(self.size, 0, self)
    end
          
    showStructure(indent) = do
        margin(indent)
        println "E" |self| "/" self.depth 
    end
    
    uncheckedSubstring(r0: Range⟦ZZ32⟧) = do
        (* This method should execute only after a bounds check has
        passed, so we know that r0 must be empty! *)
        assert r0.isEmpty 
        self
    end

    opr || (self, other:String): String = other
    opr || (self, other:Char) = other.toString
      
    print(self): () = do end
    println(self): () = println("")
    writeOn(stream): () = do end
    
    split() = Nothing⟦Generator⟦(ZZ32, String)⟧⟧
  
  end EmptyString
  

(*
==== SubString ====
*)
  trait SubString extends {String, Concatenable}
    comprises {SubString'}
  end SubString
    
  
  object SubString'(baseString: String, range: Range⟦ZZ32⟧) extends SubString
    getter size() = range.size
    getter depth() = baseString.depth    (* We pretend that substring nodes don't add depth *)
    getter isEmpty() = false    (* Because we take care never to construct an empty SubString' *)
    getter asJavaString(): String = baseString.asJavaString.uncheckedSubstring(range)
    getter isBalanced() = baseString.isBalanced
    
    balanced() = 
        if self.isBalanced then 
            self 
        else 
            baseString.balanced.uncheckedSubstring(range) 
        end
    
    (* copied from concatenable *)
    opr || (self, other:String): String = 
        if |other| = 0 then self else CatString(self, other) end
    opr || (self, _:EmptyString): String = self
    opr || (self, other:Char) = CatString(self, other.toString)
    (* end copied *)
    
    opr CMP(self, other: String) ensures { outcome = (self.asJavaString CMP other.asJavaString) } = do
        pieces = baseString.split()
        (if pieces.nonEmpty  then
            BIG LEXICO [(start, str) ← pieces] (do
                    baseSubrange = (start#|str|) ∩ range
                    baseString.uncheckedSubstring(baseSubrange) CMP other.uncheckedSubstring(baseSubrange≪range.lower)
            end) 
        else 
            otherPieces = other.split()
            if otherPieces.nonEmpty then
                (*) println "doing backwards comparison ... "
                BIG LEXICO [(start, str) ← otherPieces] (do
                        baseSubrange = ((start#|str|) ∩ self.indices) ≫ range.lower 
                        baseString.uncheckedSubstring(baseSubrange) CMP str
                end)
            else
                  (*) println "doing character-wise comparison of " self.asJavaString " with " other.asJavaString " ..."
                  (* BIG LEXICO [i ← 0#(|self| MIN |other|)] 
                        self.get(i) CMP other.get(i) *)
                  (self asif String) CMP (other asif String)
            end             
        end) LEXICO (|self| CMP |other|)
    end
    
    opr CASE_INSENSITIVE_CMP(self, other: String) ensures { outcome = (self.asJavaString CASE_INSENSITIVE_CMP other.asJavaString) } = do
        (*) println  self " CI_CMP " other "..."
        pieces = baseString.split()
        (if pieces.nonEmpty  then
            BIG LEXICO [(start, str) ← pieces] (do
                    baseSubrange = (start#|str|) ∩ range
                    baseString.uncheckedSubstring(baseSubrange) CASE_INSENSITIVE_CMP 
                        other.uncheckedSubstring((baseSubrange≪range.lower) ∩ other.indices)
            end) 
        else 
            otherPieces = other.split()
            if otherPieces.nonEmpty then
                (*) println "doing backwards comparison ... "
                BIG LEXICO [(start, str) ← otherPieces] (do
                        baseSubrange = ((start#|str|) ∩ self.indices) ≫ range.lower 
                        baseString.uncheckedSubstring(baseSubrange) CASE_INSENSITIVE_CMP str
                end)
            else
                  (*) println "doing character-wise comparison of " self.asJavaString " with " other.asJavaString " ..."
                  (* BIG LEXICO [i ← 0#(|self| MIN |other|)] 
                        self.get(i) CASE_INSENSITIVE_CMP other.get(i) *)
                  (self asif String) CASE_INSENSITIVE_CMP (other asif String)
            end             
        end) LEXICO (|self| CMP |other|)
    end
    
    opr ∈ (c: Char, self): Boolean =  label inOpr
        (* println "SubString IN: " c " IN " self " = " range " of " baseString *)
        pieces = baseString.split()
        if pieces.nonEmpty  then
            BIG ∨ [(start, str) ← seq(pieces)] (do
                    (* println "piece at " start " = " str "(" |str| ")" *)
                    baseSubrange = (start#|str|) ∩ range
                    baseSubrange.nonEmpty AND: str.rangeContains(baseSubrange ≪ start, c)  
                end)
        else
            baseString.rangeContains(range, c)
        end
    end inOpr
    
    rangeContains(r: Range⟦ZZ32⟧, c: Char) = 
        baseString.rangeContains((r ≫ range.lower) ∩ range, c)
    
    verify() = label methodVerify
        baseString.verify()
        deny(baseString.isEmpty)
        deny(range.isEmpty, "SubString (" range ") has empty range")
        deny(range = baseString.bounds, true, "SubString ", baseString, range, " has range equal to that of baseString ", baseString.bounds)
        assert(range < baseString.bounds, true,
                "SubString ", baseString,  range, " has range greater than that of baseString ", baseString.bounds )
        typecase s = baseString of
            CatString => do deny((s.left.indices ∩ range).isEmpty)  
                            (* deny(((s.right.indices ≫ s.left.size) ∩ range).isEmpty) *)
                            if ((s.right.indices ≫ s.left.size) ∩ range).isEmpty 
                            then self.showStructure()
                                 fail("SubString of CatString not pushed left") 
                            end
                         end
            EmptyString => assert(false, "SubString of EmptyString")
            SubString' => assert(false, "SubString of SubString")  
        end     
    end methodVerify
    
    showStructure(indent) = do
        margin(indent)
        println "S" |self| "=[" range.toString "]" 
        baseString.showStructure(indent + 8)
        self
    end

    split(): Generator⟦(ZZ32, String)⟧ = do
    (* The pairs (start, str) that are generated are such that start[0] = 0 and start[i] = (str[0] || ... || str[i-1]).size
      and str[0] || str [1] || ... || str[n] = self
    *)
        pieces = baseString.split()
        offset = range.lower
        if  pieces.nonEmpty then
            <| if (start#piece.size) ≤ range then
                    (start-offset, piece)
                else 
                    range' = range ∩ (start#piece.size)
                    (range'.lower-offset, SubString'(piece, range'≪start))
                end | (start, piece) ← pieces,   (range ∩ (start#piece.size)).nonEmpty |>
        else
            Nothing⟦Generator⟦(ZZ32,String)⟧⟧
        end                    
    end
    
    get(i:ZZ32) = do
        assert(i < range.size, "getting char " i " from a substring of size " |range|)
        baseString.get(range.lower+i)
    end
    
    uncheckedSubstring(r0: Range⟦ZZ32⟧) = do
        (* printlnWithThread ("SubString.uncheckedSubstring  " self  "[" r0 "] " (r0.isEmpty  " "  (r0=self.bounds) " " (r0≫range.lower))).asJavaString *)
        assert((r0≫range.lower) ≤ range, true, "asking for substring [",  r0, "] of S", self.size, " = ", self.asJavaString)
        if r0.isEmpty then EmptyString
        elif r0 = self.bounds then self
        else (* printlnWithThread "returning SS("  baseString.asJavaString  ", "  (r0≫range.lower) ")" *) 
            result = baseString.uncheckedSubstring(r0≫range.lower)
            result.verify()
            result
        end
    end
    
    writeOn(stream) = do
        pieces = baseString.split()
        if pieces.nonEmpty  then
            for (start, str) ← pieces do
                    baseSubrange = (start#|str|) ∩ range
                    baseString.uncheckedSubstring(baseSubrange).writeOn(stream)
            end
        else 
            for i ← range do
                        stream.write baseString.get(i)
            end
        end
    end
    
  end SubString'
  
  object StringStats()
            var minFlat: ZZ32 := 1000000
            var maxFlat: ZZ32 := 0
            var numFlat: ZZ32 := 0
           
        collectStatsFor(s: CatString) = do
            self.collectStatsFor(s.left)
            self.collectStatsFor(s.right)
        end
        
        collectStatsFor(s: JavaString) = do
            minFlat := |s| MIN minFlat
            maxFlat := |s| MAX maxFlat
            numFlat := numFlat + 1
        end
        
        collectStatsFor(s: SubString') = do
            self.collectStatsFor(s.baseString)
        end
        
  end StringStats
    
  printStats(s: String) = label methodPrintStats
        stats = StringStats()
        stats.collectStatsFor(s)
        print  "size = " |s| "; maxFlat = " stats.maxFlat 
        print  "; minFlat = " stats.minFlat "; avFlat = " (|s| / (stats.numFlat asif Number))
        println  "; numFlat = " stats.numFlat      
  end methodPrintStats
  
  test testCatStringGet() = do
    cat = CatString("@ab", "cdef")
    assert(cat.get(1), 'a')
    assert(cat.get(4), 'd')
  end
  
  test testSubstringGet() = do
    cat = CatString("@ab", "cdefg")
    subC = cat[2#4]
    assert(subC.ilkName, "SubString'", subC, " is not a SubString'")
    subC.verify()
    assert(cat[2], 'b')
    assert(subC[0], 'b')
    assert(subC[1], 'c')
    assert(subC[2], 'd')
    assert(subC[3], 'e')
    shouldRaise⟦IndexOutOfBounds⟦ZZ32⟧⟧ (fn() ⇒ subC[4])
  end
  
  margin(indent) = do
      for i ← 0#indent do print " " end
  end

end
