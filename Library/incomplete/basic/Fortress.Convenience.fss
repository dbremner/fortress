(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

export Fortress.Convenience

(* Casting *)
cast[\T extends Any\](x: Any): T =
  typecase x of
    T => x
    else => printTaskTrace(); throw CastException
  end

(* Instanceof Testing *)
instanceOf[\T extends Any\](x: Any): Boolean =
  typecase x of
    T => true
    else => false
  end

(* Ignoring Values *)
ignore(_: Any) = ()

(* Enforcing Tuples *)
tuple[\T extends Tuple\](x: T) = x

(* Identity *)
identity[\T extends Any\](x: T) = x

(* Coercion *)
coerce_[\T\](x: T): = x

(* Optional Values *)
trait Maybe[\T\] comprises { Nothing, Just[\T\] }
  isNothing: Boolean
end
object Nothing extends Maybe[\T\] excludes Just[\T\] where {T extends Object}
  isNothing = true
end
object Just[\T\](just: T) extends Maybe[\T\]
  isNothing = false
end
