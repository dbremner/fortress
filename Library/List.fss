(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component List
import OneShotFlag.{...}
import TypeReflect.{...}
import NativeArray.{...}

export List

(** Array Lists, immutable style (not the mutable Java ArrayList style).

    An ArrayList is an immutable segment of a mutable array.  The rest
    of the mutable array may contain elements of purelists in which
    this list is contained, or may be free for future use.  Every
    PureList includes a pointer to a flag canExtend; if this flag is
    true we are permitted to add additional elements to the PureList
    in place by writing into the mutable array.  At most one instance
    sharing the same backing array will obtain permission to extend
    the array in this way; we atomically check and update the flag to
    guarantee this.  Having obtained permission to extend the list,
    that permission may be extended to future attempts to extend.

    Eventually the backing array fills and we must allocate a new
    backing array to accept new elements.  At the moment we're not
    particularly careful to avoid stealing permission to extend for
    overflowing append operations.

    Note that because of this implementation, an ArrayList can be
    efficiently extended on the right (addRight) and appended to
    (append), but cannot be efficiently extended on the left
    (addLeft).

    Note also that the implementation hasn't yet been carefully
    checked for amortization, so it is quite likely there are a number
    of asymptotic infelicities in the implementation.

    Finally, note that this is an efficient *amortized* structure.  An
    individual operation may be quite slow due to copying work.

    Baking these off vs PureLists, they look very good in practice.
 **)

(* Tests can be found in
   tests/ArrayListQuick.fss
   demos/ArrayListLong.fss
*)

scale(x : ZZ32): ZZ32 = 2 x

expansion(curr: ZZ32, new: ZZ32) =
    if new > curr then
        (* Common case? *)
        (1 + scale curr) MAX new
    elif scale new <= curr then
        new
    else
        curr
    end

(** Lists of some item type.  Used to collect elements of unknown type
    into a list whose element type is as specific as possible. **)
trait SomeList excludes { Number, HasRank }
        (* comprises List[\E\] where [\E\] *)
    append(f:SomeList): SomeList = app(self,f)
    addLeft(e:Any): SomeList = addL(e,self)
    addRight(e:Any): SomeList = addR(self,e)
end

app[\E,F\](a:List[\E\], b:List[\F\]): SomeList =
    app'(joinReflected(Reflect[\E\](),Reflect[\F\]()),a,b)

app'[\T,E,F\](t:Reflect[\T\], a:List[\E\], b:List[\F\]): List[\T\] =
    typecase (a,b) of
        (List[\T\],SomeList) => a.appendRC[\F\](b)
        (SomeList,List[\T\]) => b.appendLC[\E\](a)
        else =>
            emptyList[\T\](|a| + |b|).appendR[\E\](a).appendR[\F\](b)
    end

addL[\E,F\](x:E, xs:List[\F\]): SomeList =
    addL'(joinReflected(Reflect[\E\](),Reflect[\F\]()),x,xs)

addL'[\T,E,F\](t:Reflect[\T\], x:E, xs:List[\F\]): List[\T\] =
    emptyList[\T\](scale(|xs|)).addRight(x).appendR[\F\](xs)

addR[\E,F\](xs:List[\F\],x:E): SomeList =
    addR'(joinReflected(Reflect[\E\](),Reflect[\F\]()),xs,x)

addR'[\T,E,F\](t:Reflect[\T\], xs:List[\F\], x:E): List[\T\] =
    emptyList[\T\](scale(|xs|)).appendR[\F\](xs).addRight(x)

(** Generic list trait.
    We return a Generator for non-List-specific operations for which
    reuse of the Generator won't increase asymptotic complexity, but
    return a List in cases (such as map and filter) where it will.
*)
trait List[\E\] extends { SomeList, LexicographicOrder[\List[\E\],E\] }
        excludes { Number, HasRank }
    getter left():Maybe[\E\] = extractLeft().map[\E\](fn (v:E,_):E => v)
    getter right():Maybe[\E\] = extractRight().map[\E\](fn (_,v:E):E => v)
    getter extractLeft(): Maybe[\(E,List[\E\])\]
    getter extractRight(): Maybe[\(List[\E\],E)\]
    append(f:List[\E\]): List[\E\]
    appendRC[\T\](other:List[\T\]): List[\E\]
    appendLC[\T\](other:List[\T\]): List[\E\]
    appendR[\T\](other:List[\T\]): List[\E\]
    appendL[\T\](other:List[\T\]): List[\E\]
    addLeft(e:E):List[\E\]
    addRight(e:E):List[\E\]
    take(n:ZZ32): List[\E\]
    drop(n:ZZ32): List[\E\]
    opr [n:ZZ32]: E
    opr [n:Range[\ZZ32\]]: List[\E\] = do
        r = (0 # |self|)[n]
        drop(r.lower()).take(r.extent())
      end
    split(n:ZZ32): (List[\E\], List[\E\])
    split(): (List[\E\], List[\E\])
    reverse(): List[\E\] =
        generate[\List[\E\]\](RevConcat[\E\],singleton[\E\])
    filter(p: E -> Boolean): List[\E\] =
        concatMap[\E\](fn (x:E):List[\E\] => if p(x) then singleton[\E\](x)
                                             else emptyList[\E\]() end)
    toString():String =
      "<|" extractLeft().maybe[\String\](
               fn () => " ",
               fn (h,t) => h (BIG STRING [e<-t] ", " e)) "|>"
    concatMap[\G\](f: E->List[\G\]): List[\G\] =
        generate[\List[\G\]\](Concat[\G\],f)
    map[\G\](f: E->G): List[\G\] =
        concatMap[\G\](fn (e:E):List[\G\] => singleton[\G\](f(e)))
    ivmap[\G\](f: (ZZ32,E)->G): List[\G\] =
        indexValuePairs().generate[\List[\G\]\](Concat[\G\],
                  fn (t:(ZZ32,E)):List[\G\] => singleton[\G\](f(t)))
end

(** Vararg factory for lists; provides aggregate list constants **)
opr <|[\E\] xs: E... |>: List[\E\] = list(xs)
opr BIG <|[\T,U\] g: ( Reduction[\SomeList\], T->SomeList) -> SomeList |>: List[\U\] =
    g(CVConcat,cvSingleton)

(** Convert generator into list; can be used to desugar list
    comprehensions *)
list[\E\](g:Generator[\E\]):List[\E\] =
    g.generate[\List[\E\]\](Concat[\E\], singleton[\E\])
list[\E\](g:Indexed[\E,ZZ32\]):List[\E\] = do
    a = primitiveImmutableArray[\E\](|g|)
    for (i,v) <- g[#].indexValuePairs() do
        a.init0(i,v)
    end
    fromImmutableArray[\E\](a)
  end
list[\E\](f: ImmutableArray[\E,ZZ32\]): List[\E\] =
    if f.bounds().lower() = 0 then
        fromImmutableArray[\E\](f)
    else
        fromImmutableArray[\E\](f[#].copy())
    end
list[\E\](r: List[\E\]): List[\E\] = r

(** Flatten an int-indexed collection of lists **)
concat[\E\](lists:Indexed[\List[\E\],ZZ32\]):ArrayList[\E\] = do
    (* The following just sets positions to the prefix sum of the lengths
       of the lists.  sz is the total length.  When we have prefixes we
       ought to do this step in parallel. *)
    listsLower = lists.bounds().lower()
    positions = primitiveImmutableArray[\ZZ32\](|lists|)
    sz : ZZ32 := 0
    for (i,l) <- sequential(lists.indexValuePairs()) do
         positions.init0(i-listsLower,sz)
         sz += |l|
    end
    (* The prefix is complete.  Allocate the final list and put elements
       into place in parallel. *)
    under = primitiveImmutableArray[\E\](sz)
    for (i,l) <- lists.indexValuePairs() do
        ofs = positions.get(i-listsLower)
        for (j,v) <- l.indexValuePairs() do
            under.init0(ofs+j,v)
        end
    end
    fromImmutableArray[\E\](under)
  end

(** A reduction object for concatenating lists. *)
object Concat[\E\] extends Reduction[\ List[\E\] \]
  empty(): List[\E\] = emptyList[\E\]()
  join(a:List[\E\], b:List[\E\]): List[\E\] = a.append(b)
end

(** A reduction object for concatenating lists covariantly. *)
object CVConcat extends Reduction[\SomeList\]
  empty(): SomeList = emptyList()
  join(a:SomeList, b:SomeList): SomeList = a.append(b)
end

(** The same for reverse concatenation *)
object RevConcat[\E\] extends Reduction[\ List[\E\] \]
  empty(): List[\E\] = emptyList[\E\]()
  join(a:List[\E\], b:List[\E\]): List[\E\] = b.append(a)
end

object ArrayList[\E\]( underlying : ImmutableArray[\E,ZZ32\],
                       firstUsed : ZZ32, canExtendLeft : OneShot,
                       firstUnused : ZZ32, canExtendRight : OneShot )
        extends { List[\E\], DelegatedIndexed[\E,ZZ32\] }
    getter size(): ZZ32 = |self|
    getter isEmpty(): Boolean = firstUnused <= firstUsed
    getter left(): Maybe[\E\] =
        if isEmpty() then Nothing[\E\]
        else Just[\E\](underlying.get(firstUsed)) end
    getter right():Maybe[\E\] =
        if isEmpty() then Nothing[\E\]
        else Just[\E\](underlying.get(firstUnused-1)) end
    getter extractLeft(): Maybe[\(E,ArrayList[\E\])\] =
        if isEmpty() then Nothing[\(E,ArrayList[\E\])\]
        else Just[\(E,ArrayList[\E\])\](underlying.get(firstUsed),
                       ArrayList(underlying, firstUsed+1, noShot,
                                 firstUnused, canExtendRight))
        end
    getter extractRight(): Maybe[\(ArrayList[\E\],E)\] =
        if isEmpty() then Nothing[\(ArrayList[\E\],E)\]
        else Just[\(ArrayList[\E\],E)\](
                       ArrayList(underlying, firstUsed, canExtendLeft,
                                      firstUnused-1, noShot),
                       underlying.get(firstUnused-1))
        end
    getter indices(): Generator[\ZZ32\] = 0 # |self|
    getter indexValuePairs(): Generator[\(ZZ32,E)\] =
        indices().map[\(ZZ32,E)\](fn (i:ZZ32):(ZZ32,E) =>
                                        (i,underlying.get(firstUsed+i)))
    getter generator(): Generator[\E\] =
        (firstUsed # |self|).map[\E\](fn (i:ZZ32):E => underlying.get(i))

    getter leftSpace(): ZZ32 =
        if canExtendLeft.canTry() then
            if firstUsed=0 then canExtendLeft.tryOnce() end
            firstUsed
        else
            0
        end
    getter rightSpace(): ZZ32 =
        if canExtendRight.canTry() then
            res = |underlying| - firstUnused
            if res <= 0 then canExtendRight.canTry() end
            res
        else
            0
        end

    opr |self| : ZZ32 = firstUnused - firstUsed

    get(i:ZZ32): E = underlying.get(firstUsed+i)

    fill[\T\](start: ZZ32, under: ImmutableArray[\T,ZZ32\]): () = do
        shift = start - firstUsed
        under.init0(i+shift, cast[\T\](underlying.get(i))), i <- firstUsed # |self|
      end

    (** Return new ArrayList enlarged on the left by at least i
        elements.  It claims canExtendLeft.  **)
    enlargeLeft[\T\](i:ZZ32): ArrayList[\T\] = do
        sz0 = |underlying|
        sz = (sz0 + i) MAX scale(sz0)
        fstUsed = sz - sz0
        under = primitiveImmutableArray[\E\](sz)
        fill[\T\](fstUsed,under)
        fstUnused = fstUsed + |self|
        ArrayList(under,fstUsed,noShot,fstUnused,oneShot())
      end

    (** Return new ArrayList enlarged on the right by at least i
        elements.  It claims canExtendRight.  **)
    enlargeRight[\T\](i:ZZ32): ArrayList[\T\] = do
        sz0 = |underlying|
        sz = (sz0 + i) MAX scale(sz0)
        under = primitiveImmutableArray[\E\](sz)
        fill[\T\](firstUsed,under)
        ArrayList(under,firstUsed,oneShot(),firstUnused,noShot)
      end

    addLeft(e:E): List[\E\] = do
        c = if canExtendLeft.tryOnce() AND firstUsed > 0 then
                self
            else
                enlargeLeft[\E\](1)
            end
        cFirstUsed1 = c.firstUsed-1
        cUnder = c.underlying
        cUnder.init0(cFirstUsed1,e)
        ArrayList( cUnder, cFirstUsed1,   oneShot(),
                                c.firstUnused, c.canExtendRight )
      end
    addRight(e:E): List[\E\] = do
        c = if canExtendRight.tryOnce() AND firstUnused < |underlying| then
                self
            else
                enlargeRight[\E\](1)
            end
        cFirstUnused = c.firstUnused
        cUnder = c.underlying
        cUnder.init0(cFirstUnused,e)
        ArrayList( cUnder, c.firstUsed,    c.canExtendLeft,
                                cFirstUnused+1, oneShot() )
      end

    (** append.  Can append to the left or to the right.  Choose based
        on available space. **)
    append(other:List[\E\]): List[\E\] =
        if rightSpace() >= |other| AND: canExtendRight.tryOnce() then
            appendR[\E\](other)
        elif other.leftSpace() >= |self| AND: other.canExtendLeft.tryOnce() then
            other.appendL[\E\](self)
        else
            (* Enlarge on the right.  Note missed opportunity for parallelism in
               the name of maintainability: we could do the two copy operations
               in enlargeRight and appendR in parallel. *)
            otherSize = |other|
            fresh = enlargeRight[\E\](otherSize)
            fresh.appendR[\E\](other)
        end
    appendR[\T\](other:List[\T\]): List[\E\] = do
        other.fill[\E\](firstUnused,underlying)
        ArrayList(underlying,firstUsed,canExtendLeft,
                            firstUnused + |other|, oneShot())
      end
    appendRC[\T\](other:List[\T\]): List[\E\] =
        if rightSpace() >= |other| AND: canExtendRight.tryOnce() then
            appendR[\T\](other)
        else
            fresh = enlargeRight[\E\](|other|)
            fresh.appendR[\T\](other)
        end
    appendL[\T\](left:List[\T\]): List[\E\] = do
        lsz = |left|
        fstUsed = firstUsed - lsz
        left.fill[\E\](fstUsed,underlying)
        ArrayList(underlying,fstUsed,oneShot(),firstUnused,canExtendRight)
      end
    appendLC[\T\](left:List[\T\]): List[\E\] =
        if leftSpace() >= |left| AND: canExtendLeft.tryOnce() then
            appendL[\T\](left)
        else
            fresh = enlargeLeft[\E\](|left|)
            fresh.appendL[\T\](left)
        end

    (** Return first n elements of this list.  take(n) never fails: If n is
        negative or 0, an empty list is returned; if n is larger than |self|,
        the whole list is returned. **)
    take(n:ZZ32): ArrayList[\E\] =
        if n <= 0 then
            ArrayList(underlying,firstUsed,canExtendLeft,
                                      firstUsed,noShot)
        elif n < |self| then
            ArrayList(underlying, firstUsed,canExtendLeft,
                                       firstUsed+n, noShot)
        else
            self
        end
    (** Drop the first n elements from this list and return the rest.  drop(n)
        never fails: If n is larger than |self|, an empty list is returned; if
        n <= 0 the original list is returned. **)
    drop(n:ZZ32): ArrayList[\E\] =
        if n <= 0 then
            self
        elif n < |self| then
            ArrayList(underlying, firstUsed+n, noShot,
                                       firstUnused, canExtendRight)
        else
            ArrayList(underlying, firstUnused, noShot,
                                       firstUnused, canExtendRight)
        end
    split(n:ZZ32): (ArrayList[\E\],ArrayList[\E\]) =
        if n <= 0 then
            (ArrayList(underlying, firstUsed,canExtendLeft,
                                        firstUsed,noShot),
             self)
        elif n < |self| then
            (ArrayList(underlying, firstUsed,canExtendLeft,
                                        firstUsed+n, noShot),
             ArrayList(underlying, firstUsed+n, noShot,
                                        firstUnused, canExtendRight))
        else
            (self,
             ArrayList(underlying, firstUnused, noShot,
                                        firstUnused, canExtendRight))
        end
    split(): (ArrayList[\E\],ArrayList[\E\]) = do
        sz = |self|
        if sz <= 1 then
            split(sz)
        else
            split(partitionL(sz))
        end
      end
    opr [n:ZZ32]: E = do
        ui = firstUsed + n
        if 0 <= n AND ui < firstUnused then
            underlying.get(ui)
        else
            fail("ArrayList[" n "] index outside 0#" |self|)
        end
      end
    reverse(): ArrayList[\E\] = do
        firstUnused1 = firstUnused-1
        sz = |self|
        under = primitiveImmutableArray[\E\](sz)
        under.init0(i,underlying.get(firstUnused1-i)), i <- 0#sz
        fromImmutableArray[\E\](under)
      end
    mapArr[\G\](f:E->G):ImmutableArray[\G,ZZ32\] =
        primitiveImmutableArray[\G\](|self|).fill(
            fn (i:ZZ32):G => f(underlying.get(i+firstUsed)))
    map[\G\](f:E->G): ArrayList[\G\] =
        fromImmutableArray[\G\](mapArr[\G\](f))
    ivmapArr[\G\](f:(ZZ32,E)->G):ImmutableArray[\G,ZZ32\] =
        primitiveImmutableArray[\G\](|self|).fill(
            fn (i:ZZ32):G => f(i,underlying.get(i+firstUsed)))
    ivmap[\G\](f:(ZZ32,E)->G): ArrayList[\G\] =
        fromImmutableArray[\G\](ivmapArr[\G\](f))
    (* We implement concatMap data-parallel fashion to avoid repeated copying.
       Cost: we must allocate 2*|self| auxiliary arrays. *)
    concatMap[\G\](f: E->List[\G\]): List[\G\] = do
        lists = mapArr[\List[\G\]\](f)
        concat[\G\](lists)
      end
end

fromImmutableArray[\E\](under: ImmutableArray[\E,ZZ32\]) =
    ArrayList[\E\](under, 0, noShot, |under|, noShot)

value object ZipGenerator[\A,B\](xs: ArrayList[\A\],
                                 ys: ArrayList[\B\])
        extends { Generator[\(A,B)\] }
    getter size():ZZ32 = |self|
    opr |self| : ZZ32 = |xs| MIN |ys|
    seq(self): SequentialGenerator[\(A,B)\] = SeqZipGenerator(xs,ys)
    generate[\R\](r: Reduction[\R\], body: (A,B)->R): R =
        (0#sz).generate[\R\](r,fn(i:ZZ32):R=>body(xs.get(i),ys.get(i)))
end

value object SeqZipGenerator[\A,B\](xs:ArrayList[\A\], ys:ArrayList[\B\])
        extends { SequentialGenerator[\(A,B)\] }
    getter size():ZZ32 = |self|
    opr |self| : ZZ32 = |xs| MIN |ys|
    generate[\R\](r: Reduction[\R\], body: (A,B)->R): R =
        sequential(0#sz).generate[\R\](r,fn(i:ZZ32):R=>body(xs.get(i),ys.get(i)))
end

emptyList[\E\](): List[\E\] =
    ArrayList(PrimImmutableArray[\E,0\](),0,noShot,0,noShot)

(** emptyList[\E\](n) allocates an empty list that can accept n
    addRight operations without reallocating the underlying storage. **)
emptyList[\E\](n:ZZ32): List[\E\] =
    ArrayList(primitiveImmutableArray[\E\](n),0,noShot,0,oneShot())

cvSingleton(e:Any): SomeList = singleton(e)

singleton[\E\](e:E): List[\E\] = do
    u = PrimImmutableArray[\E,1\]()
    u.init0(0,e)
    fromImmutableArray[\E\](u)
  end

end
