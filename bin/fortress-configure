#!/bin/bash

################################################################################
#    Copyright 2007 Sun Microsystems, Inc.,
#    4150 Network Circle, Santa Clara, California 95054, U.S.A.
#    All rights reserved.
#
#    U.S. Government Rights - Commercial software.
#    Government users are subject to the Sun Microsystems, Inc. standard
#    license agreement and applicable provisions of the FAR and its supplements.
#
#    Use is subject to license terms.
#
#    This distribution may include materials developed by third parties.
#
#    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
#    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
################################################################################

echo "Configuring the Fortress compiler."
echo "Before running this script, you should first do the following:"
echo "  Set FORTRESS_HOME to the root of your Fortress installation"
echo "  Set Put $FORTRESS_HOME/bin on your path"
echo "  Set FORTRESS_PATH to a directory you want to load compiled APIs from"
echo ""

# The following nonsense implements auto-homing, if no home is explicitly set

# if Fortress home is not set
if [ -z "$FORTRESS_HOME" ]; then
  cmd=$0
  emptyifslash=${cmd##*/*}
  # if the command contains any slashes at all
  if [ -z "$emptyifslash" ]; then
    # slash occurs in name, use as is
    true;
  else
    # no slash
    cmd=`which $cmd`
  fi
  # if the command that we found resolves to a symbolic link, try to follow
  # (not possible on Solaris, yet)
  if [ -L $cmd ]; then
     READLINK=""
     if [ -e /bin/readlink ]; then
        # Linux
        READLINK=/bin/readlink
     elif [ -e /usr/bin/readlink ]; then
        # MacOS
        READLINK=/usr/bin/readlink
     else
       echo "You need to set FORTRESS_HOME to the directory containing ProjectFortress"
       echo "The target of the symbolic link could not be followed."
       exit 1
     fi
     # Follow the link, figure out if it is absolute or relative.
     target=`$READLINK $cmd`
     emptyifslash=${target##/*}
     # if absolute (begins with /)
     if [ -z "$emptyifslash" ]; then
       cmd=$target
     else
       cmd=${cmd%/*}/$target
     fi
     # echo Symlink resolves to $cmd
  fi
  FORTRESS_HOME=${cmd%/*}/..
  echo guessing FORTRESS_HOME=$FORTRESS_HOME
fi

if [ -e ${FORTRESS_HOME}/ProjectFortress ]; then
  true
else
  echo "FORTRESS_HOME should be the name of the parent directory of ProjectFortress"
  echo "instead of '$FORTRESS_HOME'"
  exit 1
fi

# if Fortress path is not set
if [ -z "$FORTRESS_PATH" ]; then
    echo "Configuration could not be completed. Please set FORTRESS_PATH to a directory you want to load compiled APIs from."
    exit 1
fi

${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/test_library/FortressBuiltin.fsi
mv FortressBuiltin.tfi ${FORTRESS_PATH}

${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/FortressLibrary.fsi
mv FortressLibrary.tfi ${FORTRESS_PATH}

${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/test_library/NativeThread.fsi
${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/test_library/NativeArray.fsi
${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/test_library/NatReflect.fsi

mv NativeThread.tfi ${FORTRESS_PATH}
mv NativeArray.tfi ${FORTRESS_PATH}
mv NatReflect.tfi ${FORTRESS_PATH}

echo ""
echo "Testing that configuration succeeded by trying to compile FortressLibrary.fss..."
${FORTRESS_HOME}/bin/fss compile ${FORTRESS_HOME}/ProjectFortress/FortressLibrary.fss
rm FortressLibrary.tfs

echo "If there are no errors signaled above, you should now be able to compile Fortress source files with the following command:"
echo "  fss compile YOUR_FILE_NAME"
