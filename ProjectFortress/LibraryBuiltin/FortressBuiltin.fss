(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

native component FortressBuiltin
export FortressBuiltin

language="java"
package="com.sun.fortress.interpreter.glue.prim"

value object Float extends RR64
end

object FloatLiteral extends RR64
end

value object RR32 extends RR64
    getter zero(): Number = narrow(0.0)
    getter one(): Number = narrow(1.0)

    (** returns true if the value is an IEEE NaN **)
    getter isNaN(): Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$isNaN")
    (** returns true if the value is an IEEE infinity **)
    getter isInfinite(): Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$isInfinite")
    (** returns true if the value is a valid number (not NaN) **)
    getter isNumber(): Boolean = NOT self.isNaN()
    (** returns true if the value is finite **)
    getter isFinite(): Boolean = NOT (self.isInfinite() OR self.isNaN())
    (** check returns Just(its argument) if it is finite, otherwise Nothing. **)
    getter check(): Maybe[\RR32\] =
        if self.isFinite() then Just[\RR32\](self) else Nothing[\RR32\] end
    (** check_star returns Just(its argument) if it is non-NaN, otherwise Nothing. **)
    getter check_star(): Maybe[\RR32\] =
        if self.isNaN() then Nothing[\RR32\] else Just[\RR32\](self) end
    (** obtain the raw bits of the IEEE floating-point representation of this value. **)
    getter rawBits():ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$RawBits")
    (** next higher IEEE float **)
    getter nextUp():RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$NextUp")
    (** next lower IEEE float **)
    getter nextDown():RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$NextDown")

    opr |self| : Number =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Abs")
    opr =(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Eq")
    opr =/=(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$NEq")
    opr <(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Less")
    opr <=(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$LessEq")
    opr >(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Greater")
    opr >=(self, b:Number):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$GreaterEq")
    opr CMP(self, b:Number):Comparison =
        if self<b then LessThan
        elif self>b then GreaterThan
        elif self=b then EqualTo
        else Unordered
        end
    (** In case of NaN, %MIN% and %MAX% return a NaN, otherwise it respects the
        total order. **)
    opr MIN(self, b:Number):Number =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Min")
    opr MAX(self, b:Number):Number =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Max")

    opr -(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Negate")
    opr +(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Add")
    opr -(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Sub")
    opr DOT(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Mul")
    opr TIMES(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Mul")
    opr juxtaposition
         (self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Mul")
    opr /(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Div")
    opr SQRT(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Sqrt")
    opr PLUS_UP(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$AddUp")
    opr MINUS_UP(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$SubUp")
    opr DOT_UP(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$MulUp")
    opr SLASH_UP(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$DivUp")
    opr SQRT_UP(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$SqrtUp")
    opr PLUS_DOWN(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$AddDown")
    opr MINUS_DOWN(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$SubDown")
    opr DOT_DOWN(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$MulDown")
    opr SLASH_DOWN(self,b:Number):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$DivDown")
    opr SQRT_DOWN(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$SqrtDown")
    opr ^(self, b:RR32):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Pow")
    (** Shouldn't need this extra declaration. **)
    opr ^(self, b:ZZ64):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Pow")
    floor(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Floor")
    opr |\self/| : ZZ64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$IFloor")
    ceiling(self):RR32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Ceiling")
    opr |/self\| : ZZ64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$ICeiling")
    truncate(self):ZZ64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.RR32$Truncate")

    (** %MINNUM% and %MAXNUM% return a numeric result where possible (avoiding NaN).
        Note that %MINNUM% and %MAX% form a lattice with NaN at the top, and
        that %MAXNUM% and %MIN% form a lattice with NaN at the bottom.  **)
    opr MINNUM(self, b:RR32):RR32 = do
        r = self MIN b
        if r.isNaN() then
            if self.isNumber() then self
            elif b.isNumber() then b
            else r end
        else
            r
        end
      end
    opr MAXNUM(self, b:RR32):RR32 = do
        r = self MAX b
        if r.isNaN() then
            if self.isNumber() then self
            elif b.isNumber() then b
            else r end
        else
            r
        end
      end
end

value object ZZ32 extends { StandardTotalOrder[\ZZ32\], ZZ64 }
    getter zero(): ZZ32 = 0
    getter one(): ZZ32 = 1

    opr |self| : ZZ32 = if self>=0 then self else -self end
    opr =(self, b:ZZ32):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Eq")
    opr <(self, b:ZZ32):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Less")

    opr -(self):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Negate")
    opr +(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Add")
    opr -(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Sub")
    opr DOT(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Mul")
    opr juxtaposition(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Mul")
    opr DIV(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Div")
    opr REM(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Rem")
    opr MOD(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Mod")
    opr GCD(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Gcd")
    opr LCM(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Lcm")
    opr CHOOSE(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Choose")
    opr BITAND(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$BitAnd")
    opr BITOR(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$BitOr")
    opr BITXOR(self,b:ZZ32):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$BitXor")
    opr LSHIFT(self,b:ZZ64):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$LShift")
    opr RSHIFT(self,b:ZZ64):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$RShift")
    opr BITNOT(self):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$BitNot")
    opr ^(self, b:ZZ64):RR64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Pow")
    widen(self):ZZ64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$ToLong")
    partitionL(self):ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.ZZ32$Partition")
end

value object Long extends ZZ64
end

object IntLiteral extends Integral[\IntLiteral\]
    getter zero(): IntLiteral =
        1934791870947204798109283471902037419 - 1934791870947204798109283471902037419
    getter one(): IntLiteral = zero() + 1
    opr |self| : ZZ32 = if self>=0 then self else -self end
    opr =(self, b: IntLiteral):Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Eq")
    opr <(self, other:IntLiteral): Boolean = self.cmp(other) < 0
    opr <=(self, other:IntLiteral): Boolean = self.cmp(other) <= 0
    opr >(self, other:IntLiteral): Boolean = self.cmp(other) > 0
    opr >=(self, other:IntLiteral): Boolean = self.cmp(other) >= 0
    opr CMP(self, other:IntLiteral): TotalComparison = self.cmp(other) CMP 0
    cmp(b:IntLiteral): ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Cmp")

    opr -(self): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Negate")
    opr +(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Add")
    opr -(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Sub")
    opr DOT(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Mul")
    opr juxtaposition(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Mul")
    opr TIMES(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Mul")
    opr DIV(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Div")
    opr REM(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Rem")
    opr MOD(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Mod")
    opr GCD(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Gcd")
    opr LCM(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Lcm")
    opr CHOOSE(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Choose")
    opr BITAND(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$BitAnd")
    opr BITOR(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$BitOr")
    opr BITXOR(self, b: IntLiteral): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$BitXor")
    opr LSHIFT(self, b:ZZ64): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$LShift")
    opr RSHIFT(self, b:ZZ64): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$RShift")
    opr BITNOT(self): IntLiteral =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$BitNot")
    opr ^(self, b:ZZ64):RR64 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.IntLiteral$Pow")
end

object Boolean
        extends { Condition[\()\], StandardTotalOrder[\Boolean\] }
    getter holds(): Boolean = self
    getter get(): () = ()
    getter toString(): Boolean = if self then "true" else "false" end
    getter size(): ZZ32 = |self|
    opr |self| : ZZ32 = if self then 1 else 0 end
    cond[\R\](t:()->R, e:()->R) : R = if self then t() else e() end
    generate[\R\](r:Reduction[\R\],b:()->R): R =
        if self then b() else r.empty() end
    map[\G\](f: ()->G): Maybe[\G\] =
        if self then Just[\G\](f()) else Nothing[\G\] end
    cross[\G\](g: Generator[\G\]): Generator[\((),G)\] =
        if self
        then g.map[\((),G)\](fn (e:G):((),G) => ((),e))
        else Nothing[\((),G)\] end

    mapReduce[\R\](b: ()->R, _:(R,R)->R, z:R): R =
        if self then b() else z end
    loop(f:()->()): () = if self then f() end

    opr =(self, other:Boolean): Boolean =
        if self then other else NOT other end
    opr <(self, other:Boolean): Boolean =
        if self then false else other end
    opr CMP(self, other:Boolean): TotalComparison =
        if self then
            if other then EqualTo else GreaterThan end
        else
            if other then LessThan else EqualTo end
        end
end

object Char extends { StandardTotalOrder[\Char\] }
    getter toString(): String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Char$ToString")
    getter ord(): ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Char$Ord")
    opr |self| : ZZ32 = self.ord()
    opr =(self, other:Char): Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Char$Eq")
    opr <(self, other:Char): Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Char$LessThan")
end

object String
        extends { StandardTotalOrder[\String\],
                  ZeroIndexed[\Char\], DelegatedIndexed[\Char,ZZ32\] }
    getter size() : ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Size")
    getter toString() : String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$ToString")
    getter indices() : FullRange[\ZZ32,true\] = self.bounds()
    getter generator() : Generator[\Char\] =
        indices().map[\Char\](fn (i:ZZ32):Char => self[i])
    opr |self| : ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Size")
    opr =(self, other:String): Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Eq")
    opr <(self, other:String): Boolean = self.cmp(other) < 0
    opr <=(self, other:String): Boolean = self.cmp(other) <= 0
    opr >(self, other:String): Boolean = self.cmp(other) > 0
    opr >=(self, other:String): Boolean = self.cmp(other) >= 0
    opr CMP(self, other:String): TotalComparison = self.cmp(other) CMP 0
    opr CASE_INSENSITIVE_CMP(self, other:String): TotalComparison =
      self.cicmp(other) CMP 0
    opr [i:ZZ32]: Char =
        if 0 <= i < |self|
        then get(i)
        else throw IndexOutOfBounds(0,(|self|)-1,i)
        end
    (** get skips bounds checking. **)
    get(i:ZZ32): Char =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Index")
    opr[r0:Range[\ZZ32\]] : String = do
        r1 = (self.bounds())[r0]
        l = r1.lower()
        self.substr(l, l + |r1|)
      end
    cmp(other:String): ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Cmp")
    cicmp(other:String): ZZ32 =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$CICmp")
    substr(lo:ZZ32,hi:ZZ32): String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$Substr")

    (** The operator %||% with at least one String argument converts to string and
        appends **)
    opr ||(self, b:String):String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$App")
    opr ||(self, b:Number):String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$App")
    opr ||(self, c:Char):String =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.String$App")
    opr ||(self, b:()):String = self "()"
    opr ||(self, b:(Any,Any)):String = do (i,j) = b; self "(" i "," j ")" end
    opr ||(self, b:(Any,Any,Any)):String =
        do (i,j,k) = b; self "(" i "," j "," k ")" end
    opr ||(a:Any, self):String = ("" a) self
    opr ||(self, b:Any):String = self b.toString()

    (** The operator %|||% with at least one String argument converts to string,
        then appends with a whitespace separator unless one of the two arguments is
        empty.  If there is an empty argument, the other argument is returned. **)
    opr |||(self, b:String): String =
        if |self| = 0 then b
        elif |b| = 0 then self
        else self || " " || b
        end
    opr |||(self, b:Any): String = self ||| (""||b)
    opr |||(a:Any, self): String = (""||a) ||| self

    (** Right now for backward compatibility juxtaposition works like %||% **)
    opr juxtaposition(a:Any, self):String = (""||a) || self
    opr juxtaposition(self, b:String):String = self || b
    opr juxtaposition(self, b:Any):String = self || b

    (** opr %//% appends with a single newline separator.  Note that as
        with %||% and %|||% at least one argument must be a String.
        There is a postfix version in FortressLibrary that performs
        string conversion, but the prefix version must occur before a
        String. **)
    opr //(self) : String = "\n"||self
    opr //(self, a:String): String = self||"\n"||a
    opr //(self, a:Any): String    = self||"\n"||a
    opr //(a:Any, self): String    = a||"\n"||self

    (** opr %///% appends with a double newline separator.  Note that as
        with %||% and %|||% at least one argument must be a String.
        There is a postfix version in FortressLibrary that performs
        string conversion, but the prefix version must occur before a
        String. **)
    opr ///(self) : String = "\n\n"||self
    opr ///(self, a:String): String = self||"\n\n"||a
    opr ///(self, a:Any): String    = self||"\n\n"||a
    opr ///(a:Any, self): String    = a||"\n\n"||self
end

object Thread[\T\] (fcn:()->T)
    val():T         =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Thread$val")
    wait():()       =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Thread$wait")
    ready():Boolean =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Thread$ready")
    stop():()       =
        builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Thread$stop")
end

abort():() = builtinPrimitive("com.sun.fortress.interpreter.glue.prim.Thread$abort")

end
