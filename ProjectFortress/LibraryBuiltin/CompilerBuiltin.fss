(*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component CompilerBuiltin
import java com.sun.fortress.nativeHelpers.{simplePrintln.nativePrintln as jPrintln}
import java com.sun.fortress.nativeHelpers.{simplePrintZZ32.nativePrintZZ32 as jPrintlnZZ32}
import java com.sun.fortress.nativeHelpers.{simpleConcatenate.nativeConcatenate as jConcatenate}
import java com.sun.fortress.nativeHelpers.{simpleIntArith.intToString as jIntToString,
                                            simpleIntArith.intAdd as jIntAdd,
                                            simpleIntArith.intSub as jIntSub,
                                            simpleIntArith.intMul as jIntMul,
                                            simpleIntArith.intLT as jIntLT,
                                            simpleIntArith.intNeg as jIntNeg}
export CompilerBuiltin

trait Object extends Any
end Object

trait String
    opr ||(self, b:String): String =  jConcatenate(self, b)
end

object FlatString extends String
end FlatString

println(s:String):() = jPrintln(s)
printlnZZ32(x:ZZ32):() = jPrintlnZZ32(x)

trait Number
end

trait ZZ64 extends Number
end

trait ZZ32 extends ZZ64
    asString(): String = "Wurble" (* Broken: jIntToString(self) *)
    opr STR(self): String = jIntToString(self)
    opr -(self): ZZ32 = jIntNeg(self)
    opr +(self, other:ZZ32): ZZ32 = jIntAdd(self,other)
    opr -(self, other:ZZ32): ZZ32 = jIntSub(self,other)
    opr <(self, other:ZZ32): Boolean = jIntLT(self,other)
    opr juxtaposition(self, other:ZZ32): ZZ32 = jIntMul(self,other)
    opr DOT(self, other:ZZ32): ZZ32 = jIntMul(self,other)
end

object IntLiteral extends ZZ32
end

trait RR64 extends Number
end

trait RR32 extends RR64
end

object FloatLiteral extends RR32
end

trait Boolean 
end

end
