(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Syntax
import List.{...}
export Syntax

in_id: ZZ32 := 0
nextId() = atomic do in_id += 1; in_id end
indent = "    "

(* Initialize the abstract syntax id to 0. *)
initSyntax() = atomic in_id := 0

(* abstract syntax tree *)
trait Ast
  getId(): ZZ32
  asString(): String
  toSource(): String
end

(* program *)
(* p  ::= fd... e *)
object Program(decls: List[\FnDecl\], expr: Expr) extends Ast
  id = nextId()
  getId() = id

  asString() =
    (BIG //[d <- decls] (indent d.asString())) // // indent expr.asString()

  toSource() =
    (BIG //[d <- decls] (indent d.toSource())) // // indent expr.toSource()
end

(* function declaration *)
(* fd ::= f(x:t) = e *)
object FnDecl(name: String, param: String, body: Expr) extends Ast
  id = nextId()
  getId() = id
  asString() = name "_" id "(" param ") = " body.asString()
  toSource() = name        "(" param ") = " body.toSource()
end

(* expressions *)
(* e ::= x
       | e e
       | if e then e else e end
       | v
 *)
trait Expr extends Ast comprises { Value, Var, App, If } end

object Var(name: String) extends Expr
  id = nextId()
  getId() = id
  asString() = name "_" id
  toSource() = name
end

object App(function: Expr, argument: Expr) extends Expr
  id = nextId()
  getId() = id
  asString() = function.asString() "(_" id " " argument.asString() ")"
  toSource() = function.toSource() "("         argument.toSource() ")"
end

object If(cond: Expr, thenB: Expr, elseB: Expr) extends Expr
  id = nextId()
  getId() = id
  asString() =
    ("if_" id " " cond.asString() "\n" indent "then " thenB.asString() "\n"
     indent "else " elseB.asString() "\n" indent "end")
  toSource() =
    ("if  "   " " cond.toSource() "\n" indent "then " thenB.toSource() "\n"
     indent "else " elseB.toSource() "\n" indent "end")
end

(* values *)
(* v ::= fn x:t => e
       | true
       | false
 *)
trait Value extends Expr comprises { FnExpr, True, False } end

object FnExpr(param: String, body: Expr) extends Value
  id = nextId()
  getId() = id
  asString() = "fn_" id " " param " => " body.asString()
  toSource() = "fn"     " " param " => " body.toSource()
end

object True extends Value
  id = nextId()
  getId() = id
  asString() = "true"
  toSource() = asString()
end

object False extends Value
  id = nextId()
  getId() = id
  asString() = "false"
  toSource() = asString()
end

end
