(*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Words
import PureList.{...}
export Executable

opr || [\E\](a: List[\E\], b:List[\E\]): List[\E\] = a.append(b)

trait WordState comprises { Chunk, Segment }
  opr OPLUS(self, other: WordState): WordState
end

object Chunk(s: String) extends WordState
  opr OPLUS(self, other: WordState): WordState = Chunk("")
  opr OPLUS(self, other: Chunk): WordState =
    Chunk(s DOT other.s)
  opr OPLUS(self, other: Segment): WordState =
    Segment(s DOT other.l, other.A, other.r)
end

object Segment(l: String, A: List[\String\], r: String)
    extends WordState
  opr OPLUS(self, other: WordState): WordState = Chunk("")
  opr OPLUS(self, other: Chunk): WordState =
    Segment(l, A, r DOT other.s)
  opr OPLUS(self, other: Segment): WordState =
    Segment(l, A || maybeWord(r DOT other.l) || other.A, other.r)
end

object GlomReduction extends Reduction[\WordState\]
    getter toString() = "GlomReduction"
    empty(): WordState = Chunk("")
    join(a: WordState, b: WordState): WordState = a OPLUS b
end

opr BIG OPLUS[\T\](g:(Reduction[\WordState\],
                  T->WordState)->WordState): WordState =
    g(GlomReduction, identity[\WordState\])

maybeWord(s: String): List[\String\] =
  if s = "" then emptyList[\String\]() else <| s |> end

processChar(c: String): WordState =
  if (c = " ") then
    Segment("", emptyList[\String\](), "")
  else
    Chunk(c)
  end

words(s: String) = do
  g = BIG OPLUS[k<-0#length(s)] processChar(substring(s,k,k+1))
  typecase g of
    Chunk => maybeWord(g.s)
    Segment => maybeWord(g.l) || g.A || maybeWord(g.r)
  end
end

run(args:String...):() = do
  println "Hello, world!"
  println words("")
  println words("  ")
  println words("JustOneWord")
  println words("This is a sample")
  println words("  Here  is  another  sample  ")
end

end
