(*******************************************************************************
    Copyright 2011 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component ComparisonLibrary
export ComparisonLibrary

trait Equality[\Self\] comprises Self
    opr =(self, other:Self): Boolean = self SEQV other
end

trait Comparison
        extends { StandardPartialOrder[\Comparison\] }
        comprises { Unordered, TotalComparison }
    getter asString(): String
    (*) ??? The following two should not be needed, becauise Object provides concrete definitions.
    getter asExprString(): String = self.asString
    getter asDebugString(): String = self.asString
    (*) Default opr = is suitable for Comparison
    (** Lexicographic ordering.  First non-equal comparison dictates result. *)
    opr LEXICO(self, other:Comparison): Comparison = Unordered
    (** Symmetric comparison (total orders only).  All comparisons
        must be compatible, or Unordered results.  Compatible means
        "all the same sense or EqualTo" in which case the sense is the
        result (EqualTo if everything's EqualTo). *)
    opr SQCAP(self, other:Comparison): Comparison = Unordered
    opr SQCAP(self, other:()->Comparison): Comparison = self SQCAP other()
    opr CONVERSE(self): Comparison
end

(** Unordered is the outcome of a CMP b when a and b are partially
    ordered and no ordering relationship exists between them. **)
object Unordered extends Comparison
    getter asString(): String = "Unordered"
    opr <(self, other:Comparison): Boolean = false
    opr SQCAP(self, other:()->Comparison): Comparison = Unordered
    opr CONVERSE(self): Comparison = Unordered
end

trait TotalComparison
(*)     extends { Comparison, StandardTotalOrder[\TotalComparison\] }
        extends { Comparison }
        comprises { LessThan, EqualTo, GreaterThan }
    (* We're both a partial order (including Unordered) and a total
       order (TotalComparison alone).  Avoid ambiguity between the
       default definitions of CMP and >=. *)
    opr CMP(self, other:Unordered): Comparison = Unordered
    opr <(self, other:Unordered): Boolean = false
    opr >=(self, other:Unordered): Boolean = false
    opr >=(self, other:Comparison): Boolean = NOT (other < self)
    opr LEXICO(self, other:TotalComparison): TotalComparison = self
    opr LEXICO(self, other:()->TotalComparison): TotalComparison = self
    opr CONVERSE(self): TotalComparison
end

object LessThan extends TotalComparison
    getter asString(): String = "LessThan"
    opr CMP(self, other:LessThan): TotalComparison = EqualTo
    opr CMP(self, other:TotalComparison): TotalComparison = GreaterThan
    opr <(self, other:LessThan): Boolean = false
    opr <(self, other:TotalComparison): Boolean = true
    opr SQCAP(self, other:LessThan): LessThan = LessThan
    opr SQCAP(self, other:EqualTo): LessThan = LessThan
    opr CONVERSE(self): TotalComparison = GreaterThan
end

object GreaterThan extends TotalComparison
    getter asString(): String = "GreaterThan"
    opr CMP(self, other:GreaterThan): TotalComparison = EqualTo
    opr CMP(self, other:TotalComparison): TotalComparison = LessThan
    opr <(self, other:TotalComparison): Boolean = false
    opr SQCAP(self, other:GreaterThan): GreaterThan = GreaterThan
    opr SQCAP(self, other:EqualTo): GreaterThan = GreaterThan
    opr CONVERSE(self): TotalComparison = LessThan
end

object EqualTo extends TotalComparison
    getter asString(): String = "EqualTo"
    opr =(self, other:EqualTo): Boolean = true
    opr CMP(self, other:TotalComparison): TotalComparison = CONVERSE other
    opr <(self, other:GreaterThan): Boolean = true
    opr <(self, other:TotalComparison): Boolean = false
    opr LEXICO(self, other:TotalComparison): TotalComparison = other
    opr LEXICO(self, other:()->TotalComparison): TotalComparison = other()
    opr SQCAP(self, other: Comparison): Comparison = other
    opr CONVERSE(self): TotalComparison = EqualTo
end

(** StandardPartialOrder is partial ordering using the operators
    <, <=, >=, >, =, and CMP.
    This is primarily for floating-point values.
    Minimal complete definition: CMP or { <, = }. **)
trait StandardPartialOrder[\Self\]
        extends { Equality[\Self\] }
        comprises Self
    opr CMP(self, other:Self): Comparison =
        if self < other then LessThan
        elif other < self then GreaterThan
        elif self = other then EqualTo
        else Unordered
        end
    opr <(self, other:Self): Boolean = ((self CMP other) = LessThan)
    opr >(self, other:Self): Boolean = (other < self)
    opr =(self, other:Self): Boolean = ((self CMP other) = EqualTo)
    opr <=(self, other:Self): Boolean = (other >= self)
    opr >=(self, other:Self): Boolean = (self = other OR: self > other)
end

(** SquarePartialOrder is partial ordering using the operators
    SQSUBSET, SQSUBSETEQ, SQSUPSETEQ, SQSUPSET, =, and SQCMP.
    Minimal complete definition: SQCMP or { SQSUBSET, = }. **)
trait SquarePartialOrder[\Self\]
        extends { Equality[\Self\] }
        comprises Self
    opr SQCMP(self, other:Self): Comparison =
        if self SQSUBSET other then LessThan
        elif other SQSUPSET self then GreaterThan
        elif self = other then EqualTo
        else Unordered
        end
    opr SQSUBSET(self, other:Self): Boolean = ((self SQCMP other) = LessThan)
    opr SQSUPSET(self, other:Self): Boolean = (other SQSUBSET self)
    opr =(self, other:Self): Boolean = ((self SQCMP other) = EqualTo)
    opr SQSUBSETEQ(self, other:Self): Boolean = (other SQSUPSETEQ self)
    opr SQSUPSETEQ(self, other:Self): Boolean = (self = other OR: self SQSUPSET other)
end

(** SetPartialOrder is partial ordering using the operators
    SUBSET, SUBSETEQ, SUPSETEQ, SUPSET, =, and SETCMP.
    Minimal complete definition: SETCMP or { SUBSET, = }. **)
trait SetPartialOrder[\Self\]
        extends { Equality[\Self\] }
        comprises Self
    opr SETCMP(self, other:Self): Comparison =
        if self SUBSET other then LessThan
        elif other SUPSET self then GreaterThan
        elif self = other then EqualTo
        else Unordered
        end
    opr SUBSET(self, other:Self): Boolean = ((self SETCMP other) = LessThan)
    opr SUPSET(self, other:Self): Boolean = (other SUBSET self)
    opr =(self, other:Self): Boolean = ((self SETCMP other) = EqualTo)
    opr SUBSETEQ(self, other:Self): Boolean = (other SUPSETEQ self)
    opr SUPSETEQ(self, other:Self): Boolean = (self = other OR: self SUPSET other)
end

(** PrecPartialOrder is partial ordering using the operators
    PREC, PRECEQ, SUCCEQ, SUCC, =, and PRECCMP.
    Minimal complete definition: PRECCMP or { PREC, = }. **)
trait PrecPartialOrder[\Self\]
        extends { Equality[\Self\] }
        comprises Self
    opr PRECCMP(self, other:Self): Comparison =
        if self PREC other then LessThan
        elif other SUCC self then GreaterThan
        elif self = other then EqualTo
        else Unordered
        end
    opr PREC(self, other:Self): Boolean = ((self PRECCMP other) = LessThan)
    opr SUCC(self, other:Self): Boolean = (other PREC self)
    opr =(self, other:Self): Boolean = ((self PRECCMP other) = EqualTo)
    opr PRECEQ(self, other:Self): Boolean = (other SUCCEQ self)
    opr SUCCEQ(self, other:Self): Boolean = (self = other OR: self SUCC other)
end

(** %StandardMin% is a MIN operator; most types that implement %MIN%
    will implement a corresponding total order.  It's a separate type
    to account for the existence of floating point numbers, for which
    NaN counts as a bottom that is less than anything else but doesn't
    actually participate in the standard total ordering.  It is
    otherwise the case that %a MIN b = a% when %a <= b% and that
    %a MIN b = b MIN a%. **)
trait StandardMin[\T extends StandardMin[\T\]\]
    opr MIN(self, other:T): T
end

(** %StandardMax% is a MAX operator; most types that implement %MAX%
    will implement a corresponding total order.  It's a separate type
    to account for the existence of floating point numbers, for which
    NaN counts as a bottom that is less than anything else but doesn't
    actually participate in the standard total ordering.  It is
    otherwise the case that %a MAX b = a% when %a <= b% and that
    %a MAX b = b MAX a%. **)
trait StandardMax[\T extends StandardMax[\T\]\]
    opr MAX(self, other:T): T
end

(** %StandardMinMax% combines MIN and MAX operators, and provides a
    combined MINMAX operator.  This operator returns both its
    arguments; if equality is possible, self should be the leftmost
    result.  This effectively means that %(a MINMAX b)% stably sorts
    %a% and %b%.  In addition, %a MINMAX b = (a MIN b, a MAX b)% must
    always hold. **)

trait StandardMinMax[\Self\]
        extends { StandardMin[\Self\], StandardMax[\Self\] }
        comprises Self
    opr MINMAX(self, other:Self): (Self,Self)
    opr MIN(self, other:Self): Self = do (r,_) = self MINMAX other; r end
    opr MAX(self, other:Self): Self = do (_,r) = self MINMAX other; r end
end

(** StandardTotalOrder is the usual total order using the operators
    <, <=, >=, >, =, and CMP.
    Most values that define a comparison should do so using this.
    Minimal complete definition: either CMP or < (and it is advisable
    to define = in the latter case).  MIN and MAX respect the total
    order and are defined in the obvious way. **)
trait StandardTotalOrder[\Self\]
        extends { StandardPartialOrder[\Self\], StandardMinMax[\Self\] }
        comprises Self
    opr CMP(self, other:Self): TotalComparison =
        if self < other then LessThan
        elif other < self then GreaterThan
        else EqualTo
        end
    opr >=(self, other:Self): Boolean = NOT (self < other)
    opr <=(self, other:Self): Boolean = NOT (other < self)
    opr MIN(self, other:Self): Self = if other < self then other else self end
    opr MAX(self, other:Self): Self = if other < self then self else other end
    opr MINMAX(self, other:Self): (Self,Self) =
        if other < self then (other, self) else (self, other) end
end

end
