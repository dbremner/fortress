(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component NativeSimplePreTypes
export NativeSimplePreTypes

trait PreBoolean
        comprises { Boolean }
    getter toString(): Boolean = if self then "true" else "false" end
    generate[\R\](r:Reduction[\R\],b:()->R): R =
        if self then b() else r.empty() end
    map[\G\](f: ()->G): Maybe[\G\] =
        if self then Just[\G\](f()) else Nothing[\G\] end
    cross[\G\](g: Generator[\G\]): Generator[\((),G)\] =
        if self
        then g.map[\((),G)\](fn (e:G):((),G) => ((),e))
        else Nothing[\((),G)\] end

    mapReduce[\R\](b: ()->R, _:(R,R)->R, z:R): R =
        if self then b() else z end
    loop(f:()->()): () = if self then f() end

    opr =(self, other:Boolean): Boolean =
        if self then other else NOT other end
    opr <(self, other:Boolean): Boolean =
        if self then false else other end
    opr CMP(self, other:Boolean): Boolean =
        if self then
            if other then EqualTo else GreaterThan end
        else
            if other then LessThan else EqualTo end
        end
end

end
