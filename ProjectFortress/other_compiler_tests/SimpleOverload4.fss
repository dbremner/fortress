(*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component SimpleOverload4
import java com.sun.fortress.nativeHelpers.{simplePrintln.nativePrintln as jPrintln}
import java com.sun.fortress.nativeHelpers.{simpleOverload.bar as jBar}

import java com.sun.fortress.nativeHelpers.{simpleOverload.baz as jBaz}
import java com.sun.fortress.nativeHelpers.{simpleOverload.duo as jDuo}

export Executable

print2(x:String, y:String):() = do
  jPrintln(jDuo(x,y)) 
end

(* jDuo(x:String, y:ZZ32):String = do
   jPrintln("cat");
   jPrintln("dog");
   "catdog"
end *)

local(x:String, y:String):String = "localSS"
local(x:ZZ32, y:ZZ32):String = "localZZ"

run() = do
  print2("PA","SS")
  (* (* Un(outer)comment for bug.
        Set breakpoint in com.sun.fortress.compiler.OverloadRewriteVisitor
        forFnRefOnly, if fns.size() > 1
        Problem is that overload disambiguate identifies a single function,
        but the inferred type is insufficiently precise.
      *)
        
  jPrintln(local(5,6))
  *) 
  jPrintln(jDuo(5,6))
  (* jPrintln(jDuo("cat",7)) *)
end

end
