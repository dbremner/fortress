(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component WordCountSmall
import File.{...}
import FileSupport.{...}
import List.{...}
import Map.{...}

export Executable

isDelimiter(c:Char):Boolean =   c IN <| ' ',  ',', '.', '?' |>

maybeAddWord(word:String, 
                         database:Map[\String,ZZ32\]):Map[\String,ZZ32\]= do
    var result:Map[\String,ZZ32\] := mapping[\String,ZZ32\]()
    occurs = database.member(word,0)
    if occurs > 0 then 
        result := database.update(word,occurs+1)
    else 
        result := database.add(word,1)
    end
    result
end

getWords(s:String):Map[\String, ZZ32\] = do
    var database:Map[\String,ZZ32\] := mapping[\String,ZZ32\]()
    var count:ZZ32 := 1
    var current:ZZ32 := 0
    var start:ZZ32 := 0

    while (current < s.size()) do
        if isDelimiter(s[current]) then
           count := count - 1
           if count >= 1 then
               word:String = s[start#count]
               database := maybeAddWord(word, database)
          end
           start := current + 1
           count := 0
        end
        count += 1
        current += 1
    end
    count := count - 1
    if count >= 1 then
        word:String = s[start#count]
        database := maybeAddWord(word,database)
    end
    database
end

makeInv(x:String,y:ZZ32):Map[\ZZ32, List[\String\]\] = do
    var database:Map[\ZZ32,List[\String\]\] := mapping[\ZZ32,List[\String\]\]()
    database := database.add(y, <| x |>)
    database
end

opr UNIONSUM(a:Map[\String,ZZ32\], b:Map[\String,ZZ32\]):Map[\String,ZZ32\] = a.union(fn(k,x,y)=>x+y, b)

opr BIG UNIONSUM(g:(Reduction[\Map[\String,ZZ32\]\], Map[\String,ZZ32\]->Map[\String,ZZ32\])->Map[\String,ZZ32\]):Map[\String,ZZ32\]=
    embiggen[\Map[\String,ZZ32\]\](fn (a,b) => a UNIONSUM b, mapping[\String,ZZ32\](), g)

opr UNIONUNION(a:Map[\ZZ32,List[\String\]\], b:Map[\ZZ32, List[\String\]\]):Map[\ZZ32,List[\String\]\] = a.union(fn(k,x,y) =>x.append(y),b)

opr BIG UNIONUNION(g:(Reduction[\Map[\ZZ32,List[\String\]\]\], Map[\ZZ32,List[\String\]\]->Map[\ZZ32,List[\String\]\])->Map[\ZZ32,List[\String\]\]):Map[\ZZ32,List[\String\]\] =
    embiggen[\Map[\ZZ32, List[\String\]\]\](fn(a,b) => a UNIONUNION b, mapping[\ZZ32,List[\String\]\](),g)

processFile(name:String):() = do
    println("Processing file " name)
    var rs:FileReadStream = FileReadStream(name)
    database:Map[\String, ZZ32\] = BIG UNIONSUM [l<-rs.lines()] (getWords(l))
    var invDatabase:Map[\ZZ32,List[\String\]\] = BIG UNIONUNION [(x,y) <-database] (makeInv(x,y))
    try 
        for i <- seq(1#100) do 
            (c:ZZ32,m:List[\String\]) = invDatabase.maximum().get()
            invDatabase := invDatabase.deleteMaximum()
            println(m ": " c " times") 
        end 
    catch e 
            NotFound => println("end")
    end
    rs.close()
end


run(args:String...)= do
    processFile(getEnvironment("FORTRESS_HOME", ".") "/ProjectFortress/tests/presidents")   
end
end

