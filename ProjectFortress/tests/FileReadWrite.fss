(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component FileReadWrite
import File.{...}
import FileSupport.{...}
import Writer.{...}
import Streams.{...}
export Executable

shouldBeTheSame(a:String, b:String, diag:String,f:String):() =
   if a =/= b then
       println("FAIL: " diag f)
       println("--------expected--------------------------------------------")
       println(a)
       println("--------got-------------------------------------------------")
       println(b)
       println("------------------------------------------------------------")
   end

streamTest(s:String, inter:String, op: ReadStream -> String, desc:String) = do
    println("************************* " desc)
    rs = FileReadStream("testFile.txt")
    res : String := op(rs)
    while NOT (rs.eof()) do
        res := res inter op(rs)
    end
    rs.close()
    shouldBeTheSame(s,res,"ReadStream using ",desc)
  end

genTest[\S\](s:String, inter:String, gen: ReadStream -> Generator[\S\], desc: String) = do
    println("************************* par " desc)
    rs = FileReadStream("testFile.txt")
    res = BIG ||[l<-gen(rs)] l inter
    rs.close()
    shouldBeTheSame(s,res,"Generated using ",desc)
    println("************************* seq " desc)
    rss = FileReadStream("testFile.txt")
    ress : String := ""
    for l <- seq(gen(rss)) do
        ress := ress l inter
    end
    rss.close()
    shouldBeTheSame(s,ress,"Generated sequentially using ",desc)
    println("************************* seq gen " desc)
    rs3 = FileReadStream("testFile.txt")
    res3 = BIG ||[l <- seq(gen(rs3))] l inter
    rs3.close()
    shouldBeTheSame(s,res3,"Generated sequentially via comprehension using ",desc)
  end

createTestFile(fout: WriteStream): String = do
      s0 = "Writing into a file..."//
      s1 = "Writing again..."//
      s2 = "And an unterminated line."
      s = s0 s1 s2
      fout.write(s0)
      fout.write(s1)
      fout.write(s2)
      fout.close()
      s
  end

run(args:String...) = do
  (* This is commented out because at present using the handle detaches it from Java-land
     so that output to System.err gets lost.  This works apart from that little shortcoming.
  t = createTestFile(stdErr)
  *)

  s = createTestFile(Writer("testFile.txt"))

  (* Note that we can't distinguish the non-terminated final line when
     we use readLine.  We'll always get a final empty line. *)
  streamTest(s//, "\n", fn (rs) => rs.readLine(),"readLine")
  rdChar(rs:ReadStream): String = do
      c = rs.readChar()
      if c = char(0) then "" else "" c end
    end
  streamTest(s, "", rdChar, "readChar")
  streamTest(s, "", fn (rs) => rs.read(16),"read(16)")
  streamTest(s, "", fn (rs) => rs.read(),"read()")

  genTest[\String\](s//, "\n", fn (rs) => rs.lines(), "lines")
  genTest[\Char\](s, "", fn (rs) => rs.characters(), "characters")
  genTest[\String\](s, "", fn (rs) => rs.chunks(16), "chunks(16)")
  genTest[\String\](s, "", fn (rs) => rs.chunks(), "chunks()")
  genTest[\Char\](s, "", fn (rs) => rs.chunks().nest[\Char\](identity[\String\]),
               "exploded characters")

  _ = createTestFile(BufferedWriter(Writer("testFile.txt"), 23))
  streamTest(s, "", fn (rs) => rs.read(16),"read(16)")
end

end
