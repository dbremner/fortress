(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component FileReadWrite
import File.{...}
import FileSupport.{...}
export Executable

same(a:String, b:String, diag:String,f:String):() =
   if a =/= b then
       println("FAIL: " diag f)
       println("--------expected--------------------------------------------")
       println(a)
       println("--------got-------------------------------------------------")
       println(b)
       println("------------------------------------------------------------")
   end

streamTest(s:String, inter:String, op: ReadStream -> String, desc:String) = do
    println("************************* " desc)
    rs = FileReadStream("testFile.txt")
    res : String := op(rs)
    while NOT (rs.eof()) do
        res := res inter op(rs)
    end
    rs.close()
    same(s,res,"ReadStream using ",desc)
  end

genTest(s:String, inter:String, gen: ReadStream -> Generator[\String\],
        desc: String) = do
    println("************************* par " desc)
    rs = FileReadStream("testFile.txt")
    res = BIG STRING [l<-gen(rs)] l inter
    rs.close()
    same(s,res,"Generated using ",desc)
    println("************************* seq " desc)
    rss = FileReadStream("testFile.txt")
    ress : String := ""
    for l <- seq(gen(rss)) do
        ress := ress l inter
    end
    rss.close()
    same(s,ress,"Generated sequentially using ",desc)
  end

run(args:String...) = do
  s0 = "Writing into a file...\n"
  s1 = "Writing again...\n"
  s2 = "And an unterminated line."
  s = s0 s1 s2
  fout: BufferedWriter = outFileOpen("testFile.txt")
  outFileWrite(fout, s0)
  outFileWrite(fout, s1)
  outFileWrite(fout, s2)
  outFileClose(fout)

  (* Note that we can't distinguish the non-terminated final line when
     we use readLine.  We'll always get a final empty line. *)
  streamTest(s "\n", "\n", fn (rs) => rs.readLine(),"readLine")
  streamTest(s, "", fn (rs) => rs.readChar(),"readChar")
  streamTest(s, "", fn (rs) => rs.read(16),"read(16)")
  streamTest(s, "", fn (rs) => rs.read(),"read()")

  genTest(s "\n", "\n", fn (rs) => rs.lines(), "lines")
  genTest(s, "", fn (rs) => rs.characters(), "characters")
  genTest(s, "", fn (rs) => rs.chunks(16), "chunks(16)")
  genTest(s, "", fn (rs) => rs.chunks(), "chunks()")
end

end
