(*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component ConditionalExtension

export Executable

trait RationalQuantity[\unit U absorbs unit, bool ninf, bool lt, bool eq,
                        bool gt, bool pinf, bool nan\]
    extends { RationalQuantity[\U, ninf', lt', eq', gt', pinf', nan'\]
              where [\bool ninf', bool lt', bool eq', bool gt', bool pinf',
                      bool nan' \]
                    { ninf IMPLIES ninf', lt IMPLIES lt',
                      eq IMPLIES eq', gt IMPLIES gt', pinf IMPLIES pinf',
                      nan IMPLIES nan'
                    },
              PartialOrderAndBoundedLattice[\RationalQuantity[\U, ninf, lt, eq, gt, pinf, nan\], <=, MIN, MAX\]
              where { ninf AND pinf AND NOT nan }
            }
    where { ninf OR lt OR eq OR gt OR pinf OR nan }
  coerce(x: Identity[\+\]) = 0
end

run(args:String...) = println "Conditional extension with where clauses can be parsed."

end
