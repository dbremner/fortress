(*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component wrongOverload
export Executable

(* We choose the most-specific overloading which is in scope at the
   call site.  Because juxtaposition calls through to DOT, this is the
   definition of DOT in force in FortressLibrary.fss, not here. *)

trait Sparse[\N extends Number, nat n, nat m\]
  extends Matrix[\N,n,m\]
    get(t:(ZZ32,ZZ32)) = do println("OK: sparse get"); 0 end
    put(t:(ZZ32,ZZ32), v:N) = fail("Sparse put")
    init0(t:(ZZ32,ZZ32), v:N) = fail("Sparse init")
    replica[\U\]() = fail("Sparse replica")
    mapReduce[\R\](f:N->R, j:(R,R)->R, z:R):R =
          fail("Sparse mapReduce")
end

object Csr[\N extends Number, nat n, nat m\]()
  extends Sparse[\N,n,m\]
    t() = Csc[\N,m,n\]()
end

object Csc[\N extends Number, nat n, nat m\]()
  extends Sparse[\N,n,m\]
    t() = Csr[\N,m,n\]()
end

opr DOT[\ T extends Number, nat n, nat m, nat p\]
       (me:Csr[\T,n,m\], other:Csc[\T,m,p\]):Csr[\T,n,p\] = do
  println("FAIL: Csr DOT Csc")
  me
end

mkMatrix[\nat n\]() : RR64[n,n] = do
end

run(args: String...): () = do
  l = Csr[\RR64,1,1\]()
  l l.t()
  ()
end

end
