(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component LongStringTests
import FlatStringInfo.{...}
import File.{...}
import String.{...}
import Timing.{...}
import List.{...}

export Testable

    var fileContents: String := ""
    var longSourceString: String := ""
    
    test inputTest(): () = do
        readFile(10)
        println ""
        println "fileContents is a " fileContents.ilkName
        println "length = " fileContents.size
        println "depth = " fileContents.depth
        println  ( if fileContents.isBalanced then 
                            "balanced" 
                        elif fileContents.isAlmostBalanced then 
                            "almost balanced" 
                        else 
                            "unbalanced" 
                        end  )

        balancedContents = fileContents.balanced()
        assert(balancedContents, fileContents)
        println "balancedContents is a " balancedContents.ilkName
        println "length = " balancedContents.size
        println "depth = " balancedContents.depth
        println (  if balancedContents.isBalanced then 
                            "balanced" 
                        elif balancedContents.isAlmostBalanced then 
                            "almost balanced" 
                        else 
                            "unbalanced" 
                        end  )
        output = FileWriteStream("ProjectFortress/not_passing_yet/poem.out")
        output.write(balancedContents)
        output.close()
    end
    
    readFile(n: ZZ32): () = do
        input = FileReadStream("ProjectFortress/not_passing_yet/poem.txt")
        flatStringInfo.maxSize := n
        fileContents := BIG || [ c ← seq(input.chunks(n)) ] c
        input.close()
        longSourceString := fileContents.asJavaString
        (* for i ← seq(1:4) do
            longSourceString := longSourceString || longSourceString
        end
        longSourceString := longSourceString.asJavaString *)
    end
    
    buildString(n: ZZ32): () = do
        flatStringInfo.maxSize := n
        fileContents := BIG || [ i ← longSourceString.indices ] longSourceString[i]
    end
    
    test miniTest() = do
        flatStringInfo.maxSize := 10
        abcdef = CatString("a", CatString("b", CatString("c", CatString("d", 
            CatString(EmptyString, CatString("e", "f"))))))
        assert(abcdef, "abcdef")
        balancedAbcdef = abcdef.balanced()
        assert(balancedAbcdef, "abcdef")
        println abcdef.asDebugString
    end
    
    run(args:String...):() = label runMethod
        (* Warm the file cache *)
        readFile(32)
        for t ← seq(⟨8, 16, 32, 64 (*, 128, 256, 512, 1024 *)⟩) do
            ("MaxFlat = " || t || ": ") PRINTTIME: buildString(t)  
            printStats(fileContents) 
        end
    end runMethod
    
end LongStringTests