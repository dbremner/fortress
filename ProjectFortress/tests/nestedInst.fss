(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component nestedInst
export Executable

(* We want to support polymorphic recursion without falling off a
   cliff instantiating types with ever deeper nesting.  This is
   extracted from the FingerTree code. *)

trait D14[\E\]
  nodes3():D14[\D14[\E\]\] = D1[\D14[\E\]\]()
end

object D1[\E\]() extends { D14[\E\] }
  asString()="1"
end

run():() = do
  println("Starting instantiation")
  e = D1[\ZZ32\]()
  println(e.asString())
  ()
end

end
