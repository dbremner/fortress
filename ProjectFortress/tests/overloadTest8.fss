(*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component overloadTest8
export Executable

(* Used to
   Need this to get excludes relationship that ought to be
   derived automatically for any two object types.

   Ought to work as of r1071

   But now doesn't anymore, as RR64 is no longer closed due to absence
   of where clauses preventing Integral closure. *)

trait notRR64 excludes {RR64} end

trait super extends {notRR64} end

object O extends {super} end
object P end

x:ZZ32 := 0

f[\S extends super\](o:S) = do println("f(O) called"); x += 1; end

f(p:P) = do println("f(P) called"); x += 16; end

f(y:RR64) = do println("f(RR64) called"); x += 4; end


run():() = do
  f(1.0)
  f(O)
  f(P)
  println("x=" x)
  println( if x=21 then "PASS" else "FAIL" end )
end

end
