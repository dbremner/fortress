(*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Compiled8
export Executable

(** Add in a bunch more higher-order function goodness to Compiled7. **)

start : RR64 = 0.0
finish : RR64 = 1536.0
errorTolerance : RR64 = 10.0^(-4) (* should be 10^(-12) *)
reps : ZZ32 = 10
expect = 1.391570583 10.0^12

(* Why is -> on types not right-associative? *)
curry(f:(RR64,RR64)->RR64): RR64 -> (RR64 -> RR64) = fn a => fn b => f(a,b)

opr AP(f: RR64 -> RR64, a: () -> RR64): RR64 = f(a())


(*
opr AND(a:Boolean, b:()->Boolean): Boolean =
    if a then b() else a end
opr OR(a:Boolean, b:()->Boolean): Boolean =
    if a then a else b() end
*)

RR64AsString(x:RR64): String = x.asString()

(* Actually test more HOFs *)
integrate(l: RR64, h:RR64, f: RR64->RR64, tol: RR64): RR64 =
    integrate'(l,h,f(l),f(h),0,f,tol)

integrate'(l: RR64, h:RR64, fl: RR64, fh:RR64, a:RR64, f: RR64->RR64, tol: RR64): RR64 = do
    w = 0.5 (h-l)
    hw = 0.5 w
    m = l + w
    fm = f(m)
    al = hw (fl + fm)
    ah = hw (fm + fh)
    alh = al + ah
    if |alh - a| <= |alh| tol OR: w <= tol then
        alh
    else
        (curry(fn (x,y) => x+y) AP:
         integrate'(l,m,fl,fm,al,f,tol)) AP:
        integrate'(m,h,fm,fh,ah,f,tol)
    end
  end

elapsedSec(init:ZZ64, final:ZZ64): RR64 =
    (final - init) / (10.0^9)

f(x: RR64): RR64 = x (x x + 1.0)

run(): () = do
    println("Time(s)\tArea")
    for _ <- 0#reps do
        startTime = nanoTime()
        a = integrate(start,finish,f,errorTolerance)
        endTime = nanoTime()
        if |a - expect| > errorTolerance a then
            println("FAIL: Bad error tolerance!")
        end
        println(RR64AsString(elapsedSec(startTime,endTime)) "\t" RR64AsString(a))
    end
  end

end
