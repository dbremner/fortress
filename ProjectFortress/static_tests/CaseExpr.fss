(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component CaseExpr
import Set.{...}
export Executable

(* Tests that various normal (not extemum) case expressions type check ok. *)
  
foo(z:ZZ32,g:Generator[\ZZ32\]) : String = do
  ignore(case z IN of
           g => "this?" end as String)

  case z of
    g => "Did this work?"
  end
end


run(args:String...):() = do
  ignore(case 5 of
           1=> "1"
           2=> "2"
         end as String)

(*
  
  (* No operator *)
  ignore(case 5:10 of
    2:10 => 0
    1    => 1
    5:10 => 1
    else => -1
  end as IntLiteral)
  ignore(case 5 of
    1 => "1"
    2 => "2"
    (* 3:10 => "range" won't work because of stupid IntLiteral *)
  end as String)
  ignore(case 5 of
    1 => "1"
    2 => "2"
    (* 6:10 => "range" Won't work because of stupid IntLiteral *)
    else => "else"
  end as String)
  *)
    (* Operator *)
    (*
    planet = "Saturn"
    ignore(case planet IN of 
      {"Mercury", "Venus", "Earth", "Mars"} => "inner" 
      {"Jupiter", "Saturn", "Uranus", "Neptune"} => "outer" 
      else => "remote"
    end as String)

    ignore(case 5 > of
      4 => true
    6 => false
    else => false
  end as Boolean)
*)

end

end
