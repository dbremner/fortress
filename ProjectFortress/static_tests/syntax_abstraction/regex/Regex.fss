(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Regex
import List.{...}
export Regex

    trait Element
    end

    object Regexp( elements : List[\Element\] )
        asString():String = "/" (BIG || elements) "/"
        raw():String = (BIG || elements)
        (*
        opr =(self,s:String):Boolean = match(self.raw(),s)
        *)
        opr =(self,r:Regexp):Boolean = self SEQV r
        opr CONTAINS(self,s:String):Boolean = match(self.raw(),s)
        opr IN(s:String,self):Boolean = match(self.raw(),s)
    end

    object RepeatElement(e:Element) extends Element
        asString():String = e "*"
    end
    
    object RepeatNonGreedyElement(e:Element) extends Element
        asString():String = e "*?"
    end

    object RepeatExactlyElement(e:Element, n:ZZ32) extends Element
        asString():String = e "{" n "}"
    end

    object RepeatMinElement(e:Element, n:ZZ32) extends Element
        asString():String = e "{" n ",}"
    end

    object RepeatMaxElement(e:Element, n:ZZ32) extends Element
        asString():String = e "{," n "}"
    end

    object RepeatBetweenElement(e:Element, n1:ZZ32, n2:ZZ32) extends Element
        asString():String = e "{" n1 ", " n2 "}"
    end
    
    object RepeatOneElement(e:Element) extends Element
        asString():String = e "+"
    end
    
    object RepeatOneNonGreedyElement(e:Element) extends Element
        asString():String = e "+?"
    end
    
    object MaybeElement(e:Element) extends Element
        asString():String = e "?"
    end

    object GroupElement(e:List[\Element\]) extends Element
        asString():String = "(" (BIG || e) ")"
    end

    object RangeElement(s1:String,s2:String) extends Element
        asString():String = s1 "-" s2
    end
    
    object ClassElement(e:List[\Element\]) extends Element
        asString():String = "[" (BIG || e) "]"
    end
    
    object InverseClassElement(e:List[\Element\]) extends Element
        asString():String = "[^" (BIG || e) "]"
    end
    
    object StartElement() extends Element
        asString():String = "^"
    end
    
    object AnyElement() extends Element
        asString():String = "."
    end

    object EndElement() extends Element
        asString():String = "$"
    end

    object CharElement(s:String) extends Element
        asString():String = s
    end
    
    object EscapedElement(s:String) extends Element
        asString():String = "\\" s
    end
    
    object AlternateElement() extends Element
        asString():String = "|"
    end
    
end
