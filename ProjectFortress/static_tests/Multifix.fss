(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component Multifix
  export Executable

  object Foo end
  object Gnar end

  opr +(a:Foo, b:Foo):Foo = a
  opr +(a:Foo, b:Gnar):Gnar = b

  opr +(a:Foo, b:Foo, c:Foo, d:Foo, e:Foo...):String = "Surprise!"

  (* We should be able to call multi-fix operators. *)
  foo(f:Foo) : String = f+f+f+f

  (* But if no function taking the same number of arguments
     exists, we use the binary operation. *)
  bar(f:Foo) : Foo = f+f+f

  (* Also we use the binary operator if types are incompatible.
     So overloading should be taken into account *)
  quux(a:Foo,b:Gnar) : Gnar = a+a+a+b

  run(args:String...):() = do
    assert(foo(Foo), "Surprise!")
    assert(bar(Foo), Foo)
    assert(quux(Foo, Gnar), Gnar)
  end
end
