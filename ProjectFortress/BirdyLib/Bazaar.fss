(*******************************************************************************
    Copyright 2012, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

 ******************************************************************************)

component Bazaar

  import Util.{...}
  import Maybe.{...}
  import List.{...}
  export Bazaar

  object AndRed extends MonoidReduction[\Boolean\]
    getter asString(): String = "And cat"
    empty(): Boolean = true
    join(x: Boolean, y: Boolean) = x AND y
  end

  opr BIG AND() :BigReduction[\Boolean,Boolean\] = BigReduction[\Boolean,Boolean\](AndRed)

  object SumRed extends MonoidReduction[\ZZ32\]
    getter asString(): String = "Plus red"
    empty(): ZZ32 = 0
    join(x: ZZ32, y: ZZ32) = x + y    
  end

  opr BIG +() :BigReduction[\ZZ32,ZZ32\] = BigReduction[\ZZ32,ZZ32\](SumRed) 

  object ProdRed extends MonoidReduction[\ZZ32\]
    getter asString(): String = "Prod red"
    empty(): ZZ32 = 1
    join(x: ZZ32, y: ZZ32) = x y    
  end


  opr PROD() :BigReduction[\ZZ32,ZZ32\] = BigReduction[\ZZ32,ZZ32\](ProdRed) 

  object ProdRedRR64 extends MonoidReduction[\RR64\]
    getter asString(): String = "Prod red RR64"
    empty(): RR64 = 1.0
    join(x: RR64, y: RR64) = x y    
  end

  (*)opr PROD() :BigReduction[\RR64,RR64\] = BigReduction[\RR64,RR64\](ProdRedRR64) 

  opr PROD(g: Generator[\RR64\]): RR64 =
    __bigOperatorSugar[\RR64,RR64,RR64,RR64\](BigReduction[\RR64,RR64\](ProdRedRR64) , g) 

  object BXRed extends AssociativeReduction[\ZZ32\]
    simpleJoin(x: ZZ32, y: ZZ32): ZZ32 = x BITXOR y
  end

  opr BIG BITXOR(): BigReduction[\ZZ32,Maybe[\ZZ32\]\] = BigReduction[\ZZ32,Maybe[\ZZ32\]\](BXRed)

  object MinRed extends AssociativeReduction[\RR64\]
    simpleJoin(x: RR64, y: RR64): RR64 = x MIN y
  end

  opr BIG MIN() : BigReduction[\RR64,Maybe[\RR64\]\] = BigReduction[\RR64,Maybe[\RR64\]\](MinRed)

  strToFloat(s: String): RR64 = 1.0

  opr <|g: Generator[\ZZ32\]|>: List[\ZZ32\] = <|[\ZZ32\] x | x <- g |>

  opr |r: Range|: ZZ32 = r.upperBound - r.lowerBound

  object StrRed extends MonoidReduction[\String\]
    getter asString(): String = "String concat reduction"
    empty(): String = ""
    join(x: String, y: String) = x || y      
  end

  opr BIG ||() : BigReduction[\String,String\] = BigReduction[\String,String\](StrRed)

end