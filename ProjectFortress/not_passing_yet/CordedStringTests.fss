(*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)

component CordedStringTests
  import CordedString.{...}
  import Set.{...}
  export Executable

  test testNonEmptyConcat(): () =  do
    e = EmptyString
    stuff = "Hello "
    more = "World"
    hw = CatString(stuff, more)
    assert(|hw|, |stuff| + |more|)
    assert(hw, "Hello World")
    assert(hw, CatString("Hell", "o World"))
    assert(hw[2:7], "llo Wo")
    assert(hw[0:3], "Hell")
    assert(hw[5:2], "")
  end
  
  test testEmptyConcat(): () = do   
    e = EmptyString
    assert(|e|, 0)
    assert(e.isEmpty)
    stuff = "Hello "
    more = "World"
    h = CatString(stuff, e)
    assert(|h|, |stuff|)
    assert(stuff || e, stuff)
  end 

  test testCharConcat(): () =  do
    var result: String = EmptyString
    hw = "Hello World"
    for c <- seq(hw) do
        result := result || c
    end
    assert(result, hw)
  end
  
  test testParallelGenerator(): () = do
    chars = "abcdefghijklmnopqrstuvwxyz"
    (* result = BIG UNION chars *)       (* CordedStringTests.fss:57:13-23: Operator BIG CUP cannot be disambiguated. *)
    result = set[\Char\](chars as Generator[\Char\])
    (* for c <- chars do result.add(c) end   *)
    assert(|result|, |chars|)
    for c <- result do assert(c âˆˆ chars) end
  end  

  run(args:String...):() = do
    println "Tests complete"
  end

end
