/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Class which builds a table of pieces of Rats! AST which corresponds the macro 
 * declarations given as input.
 * The Rats! ASTs are combined to Rats! modules which are written to files on the
 * file system.
 * 
 */

package com.sun.fortress.macro;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.File;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import xtc.parser.Action;
import xtc.parser.AlternativeAddition;
import xtc.parser.Element;
import xtc.parser.Grammar;
import xtc.parser.Module;
import xtc.parser.ModuleDependency;
import xtc.parser.ModuleList;
import xtc.parser.ModuleName;
import xtc.parser.NonTerminal;
import xtc.parser.OrderedChoice;
import xtc.parser.PrettyPrinter;
import xtc.parser.Production;
import xtc.parser.Sequence;
import xtc.parser.SequenceName;
import xtc.tree.AttributeList;
import xtc.tree.Comment;
import xtc.tree.Printer;

import com.sun.fortress.nodes.MacroDecl;

public class FileBasedMacroCompiler implements MacroCompiler {

	private static final String MODULE_NAME_EXTENSION = "Ext";

	public int compile(Collection<? extends MacroDecl> macroDecls) {
		MacroTable macroTable = new RatsMacroTable();
		for (MacroDecl macroDecl: macroDecls) {
			macroTable.add(macroDecl);
		}

		/* Run through all Rats! modules constituting the Fortress grammar
		 * and write out their extensions to files if they exists.
		 * For all the modules which are extended we need to change the
		 * name used in Fortress.rats.
		 */
		List<Module> modules = new LinkedList<Module>();
		for (ModuleEnum e: macroTable.getModules()) { 
			Collection<RatsMacroDecl> ratsMacroDecls = macroTable.getMacroDecls(e);

			Module m = makeRatsModule(e);
			modules.add(m);

			Map<ProductionEnum,AlternativeAddition> prods = new HashMap<ProductionEnum,AlternativeAddition>();
			for (RatsMacroDecl ratsMacroDecl: ratsMacroDecls) {
				if (prods.keySet().contains(ratsMacroDecl.getProduction())) {
					prods.get(ratsMacroDecl.getProduction()).choice.add(ratsMacroDecl.getSequence());
				}
				else {
					prods.put(ratsMacroDecl.getProduction(), 
							new AlternativeAddition(ModuleInfo.getASTName(ratsMacroDecl.getProduction()),
									new NonTerminal(getProductionName(ratsMacroDecl)),
									new OrderedChoice(ratsMacroDecl.getSequence()), 
									new SequenceName("STRING"),false));

				}
			}
			List<Production> productions = new LinkedList<Production>();
			productions.addAll(prods.values());
			m.productions = productions;
		}
		
		RatsParserGenerator ratsParserGenerator = new RatsParserGenerator();
		ratsParserGenerator.generateParser(modules);
		
		return 0;
	}

	private String getProductionName(RatsMacroDecl ratsMacroDecl) {
		return ratsMacroDecl.getProduction().name();
	}

	private Module makeRatsModule(ModuleEnum e) {
		Module m = new Module();
		m.name = getModuleName(e);
		m.parameters = new ModuleList(ModuleInfo.getParameters(e));
		List<String> lines = new LinkedList<String>();
		lines.add("Module generated by the Fortress compiler on "+new Date());
		m.documentation = new Comment(0, lines);
		m.dependencies = ModuleInfo.getModuleModification(e);
		return m;
	}

	private ModuleName getModuleName(ModuleEnum e) {
		String name = e.name().substring(0,1).toUpperCase()+e.name().substring(1).toLowerCase();
		name += MODULE_NAME_EXTENSION;
		return new ModuleName(name);
	}

}
