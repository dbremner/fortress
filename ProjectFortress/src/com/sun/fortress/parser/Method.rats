/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress method declarations.
 */
module com.sun.fortress.parser.Method(Param, NoNewlineHeader, MayNewlineHeader,
                                      Type, NoNewlineExpr, Identifier, Keyword,
                                      Symbol, Spacing);

import Param;
import NoNewlineHeader;
import MayNewlineHeader;
import Type;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* MdDecl ::=
     MdDef
   | (abstract w)? Mods? AbsMdHeaderFront FnHeaderClause
 */
FnDecl MdDecl =
     MdDef
   / a1:(abstract w)? a2:Mods? a3:AbsMdHeaderFront a4:FnHeaderClause
     { Modifiers mods = Modifiers.combine(Modifiers.possiblyAbstract(a1),a2);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       a3, a4);
     };

/* MdDef ::= MdMods? MdHeaderFront FnHeaderClause w = w NoNewlineExpr */
FnDecl MdDef =
     a1:Mods? a2:MdHeaderFront a3:FnHeaderClause w equals w a4:NoNewlineExpr
     { a1 = Modifiers.nonNull(a1);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), a1,
                                       a2, a3, a4);
     };

/* AbsMdDecl ::= (abstract w)? Mods? AbsMdHeaderFront FnHeaderClause */
FnDecl AbsMdDecl =
     a1:(abstract w)? a2:Mods? a3:AbsMdHeaderFront a4:FnHeaderClause
     { Modifiers mods = Modifiers.combine(Modifiers.possiblyAbstract(a1),a2);;
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       a3, a4);
     };

/* MdHeaderFront ::=
     NamedMdHeaderFront
   | OpMdHeaderFront
 */
private FnHeaderFront MdHeaderFront =
     NamedMdHeaderFront
   / OpHeaderFront ;

/* AbsMdHeaderFront ::=
     AbsNamedMdHeaderFront
   | AbsOpMdHeaderFront
 */
private FnHeaderFront AbsMdHeaderFront =
     AbsNamedMdHeaderFront
   / AbsOpHeaderFront ;

/* NamedMdHeaderFront ::= Id (w StaticParams)? w MdValParam */
FnHeaderFront NamedMdHeaderFront =
     a1:Id a2:(w StaticParams)? w a3:ValParam
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new FnHeaderFront(a1, a2, a3);
     };

/* AbsNamedMdHeaderFront ::= Id (w StaticParams)? w AbsMdValParam */
FnHeaderFront AbsNamedMdHeaderFront =
     a1:Id a2:(w StaticParams)? w a3:AbsValParam
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new FnHeaderFront(a1, a2, a3);
     };

/* GetterSetterDecl ::=
     GetterSetterDef
   | (abstract w) Mods? GetterSetterMod AbsMdHeaderFront FnHeaderClause
 */
FnDecl GetterSetterDecl =
     GetterSetterDef
   / a1:(abstract w)? a2:Mods? a3:GetterSetterMod a4:AbsMdHeaderFront
     a5:FnHeaderClause
     { Modifiers mods = Modifiers.combine(Modifiers.possiblyAbstract(a1),a2,a3);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       a4, a5);
     };

/* GetterSetterDef ::=
     Mods? GetterSetterMod MdHeaderFront FnHeaderClause w = w NoNewlineExpr
 */
FnDecl GetterSetterDef =
     a1:Mods? a2:GetterSetterMod a3:MdHeaderFront a4:FnHeaderClause w equals w
     a5:NoNewlineExpr
     { a1 = Modifiers.combine(a1,a2);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), a1,
                                       a3, a4, a5);
     };

/* GetterSetterMod ::= getter w | setter w */
transient private Modifiers GetterSetterMod =
     a1:getter w { yyValue = Modifiers.Getter;}
   / a1:setter w { yyValue = Modifiers.Setter;};

/* AbsGetterSetterDecl ::=
     (abstract w) Mods? GetterSetterMod AbsMdHeaderFront FnHeaderClause
 */
FnDecl AbsGetterSetterDecl =
     a1:(abstract w)? a2:Mods? a3:GetterSetterMod a4:AbsMdHeaderFront
     a5:FnHeaderClause
     { Modifiers mods = Modifiers.combine(Modifiers.possiblyAbstract(a1),a2,a3);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       a4, a5);
     };

/* Coercion ::=
     coerce (w StaticParams)? w ( w BindId w IsType w ) CoercionClauses w
     (widens w)? = w NoNewlineExpr
 */
Decl Coercion =
     coerce a1:(w StaticParams)? w openparen w a2:BindId w a3:IsType w closeparen
     a4:CoercionClauses w a5:(widens w)? equals w a6:NoNewlineExpr
     { if (a1 == null) a1 = FortressUtil.emptyStaticParams();
       List<Param> params = FortressUtil.<Param, Param>mkList(NodeFactory.makeParam(a2, a3));
       Modifiers mods = Modifiers.possible(a5,Modifiers.Widens);
       Span span = createSpan(yyStart+9,8);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       new Id(span,"coerce"),a1, params, a4, a6);
     };

/* AbsCoercion ::=
   coerce (w StaticParams)? w ( w BindId w IsType w ) CoercionClauses (w widens)?
 */
Decl AbsCoercion =
     coerce a1:(w StaticParams)? w openparen w a2:BindId w a3:IsType w closeparen
     a4:CoercionClauses a5:(w widens)?
     { if (a1 == null) a1 = FortressUtil.emptyStaticParams();
       List<Param> params = FortressUtil.<Param, Param>mkList(NodeFactory.makeParam(a2, a3));
       Modifiers mods = Modifiers.possible(a5,Modifiers.Widens);
       Span span = createSpan(yyStart+9,8);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       new Id(span, "coerce"),
                                       a1, params, a4);
    };

/* CoercionClauses ::= (w CoercionWhere)? (w Ensures)? (w Invariant)? */
private FnHeaderClause CoercionClauses =
     a1:(w CoercionWhere)? a2:(w Ensures)? a3:(w Invariant)?
     { Option<WhereClause> where;
       if (a1 == null)
           where = Option.<WhereClause>none();
       else
           where = Option.some(a1);
       Option<Contract> contractClause;
       if (a2 == null && a3 == null) contractClause = Option.<Contract>none();
       else contractClause = Option.<Contract>some(
                                    new Contract(createSpan(yyStart,yyCount),
                                                 Option.<List<Expr>>none(),
                                                 Option.wrap(a2),
                                                 Option.wrap(a3)));
       yyValue = new FnHeaderClause(Option.<List<BaseType>>none(), where,
                                    contractClause, Option.<Type>none());
     };

/* CoercionWhere ::=
     where w [\ w WhereBindingList w \] (w { w CoercionWhereConstraintList w })?
   | where w { w CoercionWhereConstraintList w }
 */
private WhereClause CoercionWhere =
     where w opendoublesquare w a1:WhereBindingList w closedoublesquare
     a2:(w void:opencurly w CoercionWhereConstraintList w void:closecurly)?
     { if (a2 == null)
         yyValue = new WhereClause(createSpan(yyStart,yyCount),
                                   a1, Collections.<WhereConstraint>emptyList());
       else
         yyValue = new WhereClause(createSpan(yyStart,yyCount),
                                   a1, a2);
     }
   / where w opencurly w a1:CoercionWhereConstraintList w closecurly
     { yyValue = new WhereClause(createSpan(yyStart,yyCount),
                                 Collections.<WhereBinding>emptyList(), a1);
     };

/* CoercionWhereConstraintList ::=
     CoercionWhereConstraint (w , w CoercionWhereConstraint)*
 */
private List<WhereConstraint> CoercionWhereConstraintList =
     a1:CoercionWhereConstraint a2s:(w comma w CoercionWhereConstraint)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* CoercionWhereConstraint ::=
     WhereConstraint
   | Type w widens w or w coerces w Type
*/
private WhereConstraint CoercionWhereConstraint =
     WhereConstraint
   / a1:Type w widens w or w coerces w a2:Type
     { yyValue = new WhereWidensCoerces(createSpan(yyStart,yyCount), a1, a2); };
