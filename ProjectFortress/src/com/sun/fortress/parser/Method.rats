/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress method declarations.
 */
module com.sun.fortress.parser.Method(Param, Header, Type, NoNewlineExpr,
                                      Identifier, Keyword, Symbol, Spacing);

import Param;
import Header;
import Type;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* MdDecl ::=
   MdDef
 | (abstract w)? MdMods? MdHeaderFront FnHeaderClause
 */
FnAbsDeclOrDecl MdDecl =
     MdDef
   / a1:(abstract w)? a2:MdMods? a3:MdHeaderFront a4:FnHeaderClause
     { List<Modifier> mods = new ArrayList<Modifier>();
       if (a1 != null)
           mods.add(new ModifierAbstract(createSpan(yyStart,8)));
       if (a2 != null) mods.addAll(a2);
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods,
                                          a3.getReceiver(), a3, a4);
     };

/* MdDef ::= MdMods? MdHeaderFront FnHeaderClause w = w NoNewlineExpr */
FnDecl MdDef =
     a1:MdMods? a2:MdHeaderFront a3:FnHeaderClause w equals w a4:NoNewlineExpr
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), a1,
                                       a2.getReceiver(), a2, a3, a4);
     };

/* AbsMdDecl ::= (abstract w)? AbsMdMods? MdHeaderFront FnHeaderClause */
AbsFnDecl AbsMdDecl =
     a1:(abstract w)? a2:AbsMdMods? a3:MdHeaderFront a4:FnHeaderClause
     { List<Modifier> mods = new ArrayList<Modifier>();
       if (a1 != null)
           mods.add(new ModifierAbstract(createSpan(yyStart,8)));
       if (a2 != null) mods.addAll(a2);
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods,
                                          a3.getReceiver(), a3, a4);
     };

/* MdHeaderFront ::=
     NamedFnHeaderFront
   | OpHeaderFront
 */
private FnHeaderFront MdHeaderFront =
     NamedFnHeaderFront
   / OpHeaderFront ;

/* NamedFnHeaderFront ::= Id (w StaticParams)? w MdValParam */
FnHeaderFront NamedFnHeaderFront =
     a1:Id a2:(w StaticParams)? w a3:ValParam
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new FnHeaderFront(NodeFactory.makeIdName(a1),a2,a3);
     };

/* GetterSetterDecl ::=
   GetterSetterDef
 | (abstract w) FnMods? GetterSetterMod MdHeaderFront FnHeaderClause
 */
FnAbsDeclOrDecl GetterSetterDecl =
     GetterSetterDef
   / a1:(abstract w)? a2:FnMods? a3:GetterSetterMod a4:MdHeaderFront
     a5:FnHeaderClause
     { List<Modifier> mods = new ArrayList<Modifier>();
       if (a1 != null)
           mods.add(new ModifierAbstract(createSpan(yyStart,8)));
       if (a2 != null) mods.addAll(a2);
       mods.add(a3);
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods,
                                          a4.getReceiver(), a4, a5);
     };

/* GetterSetterDef ::=
   FnMods? GetterSetterMod MdHeaderFront FnHeaderClause w = w NoNewlineExpr
 */
FnAbsDeclOrDecl GetterSetterDef =
     a1:FnMods? a2:GetterSetterMod a3:MdHeaderFront a4:FnHeaderClause w equals w
     a5:NoNewlineExpr
     { if (a1 == null) a1 = new ArrayList<Modifier>();
       a1.add(a2);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), a1,
                                       a3.getReceiver(), a3, a4, a5);
     };

/* GetterSetterMod ::= getter w | setter w */
private Modifier GetterSetterMod =
     a1:getter w { yyValue = new ModifierGetter(createSpan(yyStart,yyCount));}
   / a1:setter w { yyValue = new ModifierSetter(createSpan(yyStart,yyCount));};

/* AbsGetterSetterDecl ::=
     (abstract w) AbsFnMods? GetterSetterMod MdHeaderFront FnHeaderClause
 */
AbsFnDecl AbsGetterSetterDecl =
     a1:(abstract w)? a2:AbsFnMods? a3:GetterSetterMod a4:MdHeaderFront
     a5:FnHeaderClause
     { List<Modifier> mods = new ArrayList<Modifier>();
       if (a1 != null)
           mods.add(new ModifierAbstract(createSpan(yyStart,8)));
       if (a2 != null) mods.addAll(a2);
       mods.add(a3);
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods,
                                          a4.getReceiver(), a4, a5);
     };

/* Coercion ::=
     coerce (w StaticParams)? w ( w BindId w IsType w ) CoercionClauses w
     (widens w)? = w NoNewlineExpr
 */
Decl Coercion =
     coerce a1:(w StaticParams)? w openparen w a2:BindId w a3:IsType w closeparen
     a4:CoercionClauses w a5:(widens w)? equals w a6:NoNewlineExpr
     { if (a1 == null) a1 = FortressUtil.emptyStaticParams();
       List<Param> params = FortressUtil.<Param, NormalParam>mkList(NodeFactory.makeParam(a2, a3));
       List<Modifier> mods = new ArrayList<Modifier>();
       if (a5 != null) mods.add(new ModifierWidens(createSpan(yyStart,8)));
       Span span = createSpan(yyStart+9,8);
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount), mods,
                                       NodeFactory.makeIdName(span, "coerce"), a1,
                                       params, a4, a6);
     };

/* AbsCoercion ::=
   coerce (w StaticParams)? w ( w BindId w IsType w ) CoercionClauses (w widens)?
 */
AbsDecl AbsCoercion =
     coerce a1:(w StaticParams)? w openparen w a2:BindId w a3:IsType w closeparen
     a4:CoercionClauses a5:(w widens)?
     { if (a1 == null) a1 = FortressUtil.emptyStaticParams();
       List<Param> params = FortressUtil.<Param, NormalParam>mkList(NodeFactory.makeParam(a2, a3));
       List<Modifier> mods = new ArrayList<Modifier>();
       if (a5 != null) mods.add(new ModifierWidens(createSpan(yyStart,8)));
       Span span = createSpan(yyStart+9,8);
       yyValue = FortressUtil.mkAbsFnDecl(createSpan(yyStart,yyCount), mods,
                                          NodeFactory.makeIdName(span, "coerce"),
                                          a1, params, a4);
    };

/* CoercionClauses ::= (w CoercionWhere)? (w Ensures)? (w Invariant)? */
private FnHeaderClause CoercionClauses =
     a1:(w CoercionWhere)? a2:(w Ensures)? a3:(w Invariant)?
     { Option<List<WhereClause>> whereClause = Option.wrap(a1);
       Option<Contract> contractClause;
       if (a2 == null && a3 == null) contractClause = Option.<Contract>none();
       else contractClause = Option.<Contract>some(
                                    new Contract(createSpan(yyStart,yyCount),
                                                 Option.<List<Expr>>none(),
                                                 Option.wrap(a2),
                                                 Option.wrap(a3)));
       yyValue = new FnHeaderClause(Option.<List<TraitType>>none(), whereClause,
                                    contractClause, Option.<Type>none());
     };

/* CoercionWhere ::=
     where w [\ w WhereBindingList w \] (w { w CoercionWhereConstraintList w })?
   | where w { w CoercionWhereConstraintList w }
 */
private List<WhereClause> CoercionWhere =
     where w opendoublesquare w a1:WhereBindingList w closedoublesquare
     a2:(w opencurly w CoercionWhereConstraintList w closecurly)?
     { if (a2 != null)
           for (WhereClause w : a2) a1.add(w);
       yyValue = a1;
     }
   / where w opencurly w CoercionWhereConstraintList w closecurly ;

/* CoercionWhereConstraintList ::=
     CoercionWhereConstraint (w , w CoercionWhereConstraint)*
 */
private List<WhereClause> CoercionWhereConstraintList =
     a1:CoercionWhereConstraint a2s:(w comma w CoercionWhereConstraint)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* CoercionWhereConstraint ::=
     WhereConstraint
   | Type w widens w or w coerces w Type
*/
private WhereClause CoercionWhereConstraint =
     WhereConstraint
   / a1:Type w widens w or w coerces w a2:Type
     { yyValue = new WhereWidensCoerces(createSpan(yyStart,yyCount), a1, a2); };
