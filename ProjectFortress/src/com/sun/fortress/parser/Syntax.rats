/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress macro language.
 */
module com.sun.fortress.parser.Syntax(Identifier, Keyword, Spacing, Symbol, Expr, Unicode, Header, Type);

import Identifier;
import Keyword;
import Spacing;
import Symbol;
import Expr;
import Unicode;
import Header;
import Type;

/* GrammarDef ::= grammar w id w GrammarExtends? (br ProductionDef)* w end */
public GrammarDecl GrammarDef =
     grammar w a1:Id a2:(w GrammarExtends)? a3s:(br ProductionDef)* w end
     { if ( a2 == null) a2 = Collections.<QualifiedIdName>emptyList();
       yyValue = new GrammarDef(createSpan(yyStart,yyCount), NodeFactory.makeQualifiedIdName(a1), a2, a3s.list()); };

/* GrammarExtends ::= extends w QualifiedNames */
List<QualifiedIdName> GrammarExtends = extends w QualifiedNames ;

/* QualifiedNames ::= QualifiedName | { w QualifiedNameList w } */
List<QualifiedIdName> QualifiedNames =
     a1:QualifiedName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w QualifiedNameList w void:closecurly ;

/* QualifiedNameList ::= QualifiedName (w , w QualifiedName)* */
private List<QualifiedIdName> QualifiedNameList = a1:QualifiedName a2s:(w comma w QualifiedName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Extends ::= extends w IdName */
Option<QualifiedIdName> Extends = extends w a1:QualifiedName { yyValue = Option.wrap(a1); };

private ProductionDef ProductionDef =
      m1:(GrammarMod w)? production w a1:Id w colon w a2:TraitType a3:(w Extends)? w end
      { if (a3 == null) a3 = Option.none();
        List<SyntaxDef> a4 = Collections.<SyntaxDef>emptyList();
        if (m1 == null) m1 = Option.none();
        yyValue = new ProductionDef(createSpan(yyStart,yyCount), m1, NodeFactory.makeQualifiedIdName(a1), a2, a3, a4); }
    /m1:(GrammarMod w)? production w a1:Id w colon w a2:TraitType a3:(w Extends)? w a4:SyntaxDef  a4s:(br SyntaxDefOr)* w end
      { if ( a3 == null) a3 = Option.none();
        if ( m1 == null) m1 = Option.none();
        yyValue = new ProductionDef(createSpan(yyStart,yyCount), m1, NodeFactory.makeQualifiedIdName(a1), a2, a3, FortressUtil.mkList(a4, a4s.list())); };

private Option<ModifierPrivate> GrammarMod =
        private {yyValue = Option.wrap(new ModifierPrivate(createSpan(yyStart,yyCount)));};

/* SyntaxDef ::= SyntaxSymbol*  --> w Expr **/
SyntaxDef SyntaxDef =
       a1s:SyntaxSymbols w doublerightarrow w a2:Expr
       { yyValue = NodeFactory.makeSyntaxDef(createSpan(yyStart,yyCount), a1s, a2); };

SyntaxDef SyntaxDefOr =
       or a1s:SyntaxSymbols w doublerightarrow w a2:Expr
       {yyValue = NodeFactory.makeSyntaxDef(createSpan(yyStart,yyCount), a1s, a2); };

List<SyntaxSymbol> SyntaxSymbols =
      a1:SyntaxSymbol a1s:(w SyntaxSymbol)* &(w doublerightarrow)
      { yyValue = FortressUtil.mkList(a1, a1s.list()); };

/*
SyntaxSymbol            ::= (Id ":" )? Symbol 
                   | Whitespace
                   | br
Symbol      ::= BasicSymbol "?" 
                   | BasicSymbol "*" 
                   | BasicSymbol "+" 
                   | BasicSymbol "#" 
                   | BasicSymbol
BasicSymbol       ::= ItemSymbol
                   | PredicateSymbol
ItemSymbol        ::= KeywordSymbol 
                   | TokenSymbol
                   | NonterminalSymbol
PredicateSymbol   ::= "NOT" ItemSymbol 
                   | "\land" ItemSymbol
*/
SyntaxSymbol SyntaxSymbol =
      a1:(Id void:colon)? s:Symbol
      { Option<Id> prefix = Option.none();
        if (a1 != null) prefix = Option.some(a1);
        yyValue = new PrefixedSymbol(prefix, s); };

SyntaxSymbol Symbol =
     "NOT" w s1:Suffix
     { SyntaxSymbol tmp = null;
       if (s1 instanceof OptionalSymbol) {
          tmp = ((OptionalSymbol) s1).getSymbol();
          s1 = new OptionalSymbol(new NotPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof RepeatSymbol) {
          tmp = ((RepeatSymbol) s1).getSymbol();
          s1 = new RepeatSymbol(new NotPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof RepeatOneOrMoreSymbol) {
          tmp = ((RepeatOneOrMoreSymbol) s1).getSymbol();
          s1 = new RepeatOneOrMoreSymbol(new NotPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof WhitespaceSymbol) {
          tmp = ((WhitespaceSymbol) s1).getSymbol();
          s1 = new WhitespaceSymbol(new NotPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       }
       if (tmp != null) {
         yyValue = s1;
       }
       else {
         yyValue = new NotPredicateSymbol(createSpan(yyStart,yyCount), s1);
       }
     }
     / "AND" w s1:Suffix
     { SyntaxSymbol tmp = null;
       if (s1 instanceof OptionalSymbol) {
          tmp = ((OptionalSymbol) s1).getSymbol();
          s1 = new OptionalSymbol(s1.getSpan(), new AndPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof RepeatSymbol) {
          tmp = ((RepeatSymbol) s1).getSymbol();
          s1 = new RepeatSymbol(s1.getSpan(), new AndPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof RepeatOneOrMoreSymbol) {
          tmp = ((RepeatOneOrMoreSymbol) s1).getSymbol();
          s1 = new RepeatOneOrMoreSymbol(s1.getSpan(), new AndPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       } else if (s1 instanceof WhitespaceSymbol) {
          tmp = ((WhitespaceSymbol) s1).getSymbol();
          s1 = new WhitespaceSymbol(s1.getSpan(), new AndPredicateSymbol(createSpan(yyStart,yyCount), tmp));
       }

       if (tmp != null) {
         yyValue = s1;
       }
       else {
         yyValue = new AndPredicateSymbol(createSpan(yyStart,yyCount), s1);
       }
     }
     / Suffix;

SyntaxSymbol Suffix = 
     a1:Item w questionmark
     { yyValue = new OptionalSymbol(createSpan(yyStart,yyCount), a1); }
     / a1:Item w star
     { yyValue = new RepeatSymbol(createSpan(yyStart,yyCount), a1); }
     / a1:Item w plus
     { yyValue = new RepeatOneOrMoreSymbol(createSpan(yyStart,yyCount), a1); }
     / a1:Item w hash
     { yyValue = new WhitespaceSymbol(createSpan(yyStart,yyCount), a1); }
     / a1:Item
     { yyValue = a1; };

SyntaxSymbol Item =
       !(w doublerightarrow) s:ItemText
       { yyValue = new ItemSymbol(s); };

String SpecialSymbol = questionmark / star / plus / hash;

String EscapedSymbols =
     doublerightarrow doublerightarrow
     / questionmark questionmark
     / star star
     / plus plus;


String ItemText = s1:(Unicode Unicode*);
String Unicode = UnicodeIdStart / "-" / ">" / "." / UnicodeIdRest;

transient String questionmark = "?";
transient String hash = "#";
transient void doublerightarrow = "-->";
