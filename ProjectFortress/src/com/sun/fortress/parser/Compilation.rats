/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress components and APIs.
 */
module com.sun.fortress.parser.Compilation(Decl, Identifier, Keyword, Symbol,
                                           Spacing);

import Decl;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* File ::=
     w CompilationUnit w EndOfFile
   | (w Imports w ;?)? w Exports w ;? (w Decls w ;?)? w EndOfFile
   | (w Imports w ;?)? w AbsDecls w ;? w EndOfFile
   | w Imports w ;? (w AbsDecls w ;?)? w EndOfFile
 */
public CompilationUnit File =
     w CompilationUnit w EndOfFile
   / a1:(w yyValue:Imports w semicolon?)? w a2:Exports w semicolon?
     a3:(w yyValue:Decls w semicolon?)? w EndOfFile
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       if (a3 == null) a3 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       DottedName name = NodeFactory.makeDottedName(span, file, "\\.");
       yyValue = new Component(span, name, a1, a2, a3);
     }
   / a1:(w yyValue:Imports w semicolon?)? w a2:AbsDecls w semicolon? w EndOfFile
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       DottedName name = NodeFactory.makeDottedName(span, file, "\\.");
       yyValue = new Api(span, name, a1, a2);
     }
   / w a1:Imports w semicolon? a2:(w yyValue:AbsDecls w semicolon?)? w EndOfFile
     { if (a2 == null) a2 = Collections.<AbsDecl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       DottedName name = NodeFactory.makeDottedName(span, file, "\\.");
       yyValue = new Api(span, name, a1, a2);
     };

/* CompilationUnit ::=
     Component
   | Api
 */
private CompilationUnit CompilationUnit =
     Component
   / Api ;

/* Component ::=
   component w APIName (w Imports w ;?)? w Exports w ;? (w Decls w ;?)? w end
 */
private Component Component =
     component w a1:APIName a2:(w yyValue:Imports w semicolon?)? w
     a3:Exports w semicolon? a4:(w yyValue:Decls w semicolon?)? w end
     { if (a2 == null) a2 = Collections.<Import>emptyList();
       if (a4 == null) a4 = Collections.<Decl>emptyList();
       yyValue = new Component(createSpan(yyStart,yyCount), a1, a2, a3, a4);
     };

/* Api ::= api w APIName (w Imports w ;?)? (w AbsDecls w ;?)? w end */
private Api Api =
     api w a1:APIName a2:(w yyValue:Imports w semicolon?)?
     a3:(w yyValue:AbsDecls w semicolon?)? w end
     { if (a2 == null) a2 = Collections.<Import>emptyList();
       if (a3 == null) a3 = Collections.<AbsDecl>emptyList();
       yyValue = new Api(createSpan(yyStart,yyCount), a1, a2, a3);
     };

/* Imports ::= Import (br Import)* */
private List<Import> Imports = a1:Import a2s:(br Import)*
     { for (List<Import> i : a2s.list()) {
         for (Import j : i) {
           a1.add(j);
         }
       }
       yyValue = a1;
     };

/* Import ::=
     import w ImportedNames
   | import w api w AliasedAPINames
 */
private List<Import> Import =
     import w ImportedNames
   / import w api w a1:AliasedAPINames
     { Import imp = new ImportApi(createSpan(yyStart, yyCount), a1);
       yyValue = FortressUtil.mkList(imp);
     };

/* ImportedNames ::=
     APIName . w { w ... w } (w except w Names)?
   | APIName . w Id (w as w Id)?
   | APIName . w { w AliasedNameList (w , w ...)? w }
 */
private List<Import> ImportedNames =
     a1:APIName dot w opencurly w ellipses w closecurly a2:(w except w Names)?
     { if (a2 == null) a2 = Collections.<SimpleName>emptyList();
       yyValue = FortressUtil.mkList((Import)new ImportStar(createSpan(yyStart,yyCount),
                                                    a1, a2));
     }
   / a1:APIName dot w a2:Id a3:(w as w Id)?
     { AliasedName an;
       if (a3 == null)
         an = NodeFactory.makeAliasedName(a2.getSpan(), a2);
       else
         an = NodeFactory.makeAliasedName(FortressUtil.spanTwo(a2, a3), a2, a3);
       yyValue = FortressUtil.mkList((Import)new ImportNames(createSpan(yyStart,yyCount),
                                                    a1,FortressUtil.mkList(an)));
     }
   / a1:APIName dot w opencurly w a2:AliasedNameList a3:(w comma w ellipses)?
     w closecurly
     { Span span = createSpan(yyStart,yyCount);
       List<Import> imports = FortressUtil.mkList((Import)new ImportNames(span,
                                                                         a1,a2));
       if (a3 != null)
           imports.add((Import)new ImportStar(span, a1,
                               Collections.<SimpleName>emptyList()));
       yyValue = imports;
     };

/* Names ::= Name | { w NameList w } */
private List<SimpleName> Names =
     a1:Name
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w NameList w closecurly ;

/* NameList ::= Name (w , w Name)* */
private List<SimpleName> NameList = a1:Name a2s:(w comma w Name)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedName ::=
     Id (w as w Id)?
   | opr w Op (w as w Op)?
   | opr w EncloserPair (w as w EncloserPair)?
 */
private AliasedName AliasedName =
     a1:Id a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount), a1);
       else
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount), a1, a2);
     }
   / opr w a1:Op a2:(w as w Op)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount),
                                                 new Opr(a1.getSpan(), a1));
       else
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount),
                                                 new Opr(a1.getSpan(), a1),
                                                 new Opr(a2.getSpan(), a2));
     }
   / opr w a1:EncloserPair a2:(w as w EncloserPair)?
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(span, a1);
       else
           yyValue = NodeFactory.makeAliasedName(span, a1, a2);
     };

/* AliasedNameList ::= AliasedName (w , w AliasedName)* */
private List<AliasedName> AliasedNameList =
     a1:AliasedName a2s:(w comma w AliasedName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedAPINames ::=
     AliasedAPIName
   | { w AliasedAPINameList w }
 */
private List<AliasedDottedName> AliasedAPINames =
     a1:AliasedAPIName
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w AliasedAPINameList w closecurly ;

/* AliasedAPIName ::= APIName (w as w APIName)? */
private AliasedDottedName AliasedAPIName =
     a1:APIName a2:(w as w APIName)?
     { if (a2 == null)
           yyValue = new AliasedDottedName(createSpan(yyStart,yyCount), a1,
                                           Option.<DottedName>none());
       else
           yyValue = new AliasedDottedName(createSpan(yyStart,yyCount), a1,
                                           Option.some(a2));
     };

/* AliasedAPINameList ::= AliasedAPIName (w , w AliasedAPIName)* */
private List<AliasedDottedName> AliasedAPINameList =
     a1:AliasedAPIName a2s:(w comma w AliasedAPIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Exports ::= Export (br Export)* */
private List<Export> Exports = a1:Export a2s:(br Export)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Export ::= export w APINames */
private Export Export = export w a1:APINames
     { yyValue = new Export(createSpan(yyStart,yyCount), a1); };

/* APINames ::=
     APIName
   | { w APINameList w }
 */
List<DottedName> APINames =
     a1:APIName
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w APINameList w closecurly ;

/* APINameList ::= APIName (w , w APIName)* */
private List<DottedName> APINameList = a1:APIName a2s:(w comma w APIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };
