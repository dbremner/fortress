/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress components and APIs.
 */
module com.sun.fortress.parser.Compilation(Decl, Literal, Identifier, Keyword,
                                           Symbol, Spacing);

import Decl;
import Literal;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* File ::=
     w CompilationUnit w EndOfFile
   | (w Imports w ;?)? w Exports w ;? (w Decls w ;?)? w EndOfFile
   | (w Imports w ;?)? w AbsDecls w ;? w EndOfFile
   | w Imports w ;? (w AbsDecls w ;?)? w EndOfFile
 */
public CompilationUnit File = initParser yyValue:Program closeParser ;
void initParser  = w { initParser(); };
void closeParser = w EndOfFile
     { try {
           writer.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

CompilationUnit Program =
     yyValue:CompilationUnit
     { Span span = createSpan(yyStart,yyCount);
       String filename = span.getBegin().getFileName();
       String cuname = yyValue.getName().toString();
       if (!Shell.checkCompilationUnitName(filename,
                                           cuname))
           yyValue = syntaxError(NodeUtil.getSpan(yyValue.getName()),
                                 "Component/API names must match their enclosing file names, from name="
                                 + filename+", from contents="+cuname);
     }
   / <ErrorProduction1>
     Exports w semicolon? w Imports w semicolon?
     (w Decls w semicolon?)?
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Import statements should come before export statements.");
     }
   / a1:(yyValue:Imports w semicolon? w)? a2:Exports w semicolon?
     a3:(w yyValue:Decls w semicolon?)?
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       if (a3 == null) a3 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = NodeFactory.makeComponent(span, name, a1, a3, a2);
     }
   / a1:Imports w semicolon? a2:(w yyValue:AbsDecls w semicolon?)?
     { if (a2 == null) a2 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = new Api(span, name, a1, a2);
     }
   / a1:(yyValue:Imports w semicolon? w)? a2:AbsDecls w semicolon?
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = new Api(span, name, a1, a2);
     };

/* CompilationUnit ::=
     Component
   | Api
 */
private CompilationUnit CompilationUnit =
     Component
   / Api ;

/* Component ::=
     (native w)? component w APIName (w Imports w ;?)? w Exports w ;?
     (w Decls w ;?)? w end ((s component)? s APIName)?
 */
private Component Component =
     <ErrorProduction1>
     (native w)? component w APIName w Exports w semicolon?
     w Imports w semicolon? (w Decls w semicolon?)? w end
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Import statements should come before export statements.");
     }
   / <ErrorProduction2>
     (native w)? component w APIName (w Imports w semicolon?)?
     (w Decls w semicolon?)? w end
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Components should have at least one export statement.");
     }
   / a1:(native w)? component w a2:APIName a3:(w yyValue:Imports w semicolon?)? w
     a4:Exports w semicolon? a5:(w yyValue:Decls w semicolon?)? w end
     a6:((s component)? s APIName)?
     { Span span = createSpan(yyStart,yyCount);
       if (a6 != null && !NodeUtil.nameString(a6).equals(NodeUtil.nameString(a2)))
           yyValue = syntaxError(span, "A component declaration of " + a2 +
                                 " has the different name " + a6 + " at the end.");
       if (a3 == null) a3 = Collections.<Import>emptyList();
       if (a5 == null) a5 = Collections.<Decl>emptyList();
       if (a1 == null)
           yyValue = NodeFactory.makeComponent(span, a2, a3, a5, a4);
       else
           yyValue = NodeFactory.makeComponent(span, a2, a3, a5, true, a4);
     };

/* Api ::= api w APIName (w Imports w ;?)? (w AbsDecls w ;?)? w end
           ((s api)? s APIName)?
 */
private Api Api =
     <ErrorProduction1>
     native w api w APIName (w Imports w semicolon?)?
     (w AbsDecls w semicolon?)? w end
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "The native modifier is only for components not for APIs.");
     }
   / api w a1:APIName a2:(w yyValue:Imports w semicolon?)?
     a3:(w yyValue:AbsDecls w semicolon?)? w end
     a4:((s api)? s APIName)?
     { Span span = createSpan(yyStart,yyCount);
       if (a4 != null && !NodeUtil.nameString(a4).equals(NodeUtil.nameString(a1)))
           yyValue = syntaxError(span, "An API declaration of " + a1 +
                                 " has the different name " + a4 + " at the end.");
       if (a2 == null) a2 = Collections.<Import>emptyList();
       if (a3 == null) a3 = Collections.<Decl>emptyList();
       yyValue = new Api(span, a1, a2, a3);
     };

/* Imports ::= Import (br Import)* */
private List<Import> Imports = a1:Import a2s:(br Import)*
     { for (List<Import> i : a2s.list()) {
         for (Import j : i) {
           a1.add(j);
         }
       }
       yyValue = a1;
     };

/* Import ::=
     import (w ForeignLang)? w api w AliasedAPINames
   | import w ImportedNames
 */
private List<Import> Import =
     import a1:(w ForeignLang)? w api w a2:AliasedAPINames
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       Import imp = new ImportApi(createSpan(yyStart, yyCount), fl, a2);
       yyValue = FortressUtil.mkList(imp);
     }
   / import w ImportedNames;

/* ForeignLang ::= Id | StringLiteralExpr */
private String ForeignLang =
     !(Id w dot) a1:Id { yyValue = a1.getText(); }
   / a1:StringLiteralExpr { yyValue = a1.getText(); };

/* ImportedNames ::=
     (ForeignLang w)? APIName . w { w ... w } (w except w SimpleNames)?
   | (ForeignLang w)? APIName . w { w AliasedSimpleNameList (w , w ...)? w }
   | (ForeignLang w)? QualifiedName (w as w Id)?
 */
private List<Import> ImportedNames =
     a1:(ForeignLang w)? a2:APIName dot w opencurly w ellipses w closecurly
     a3:(w except w SimpleNames)?
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       if (a3 == null) a3 = Collections.<IdOrOpOrAnonymousName>emptyList();
       yyValue = FortressUtil.mkList((Import)new ImportStar(
                                             createSpan(yyStart,yyCount),fl,a2,a3));
     }
   / a1:(ForeignLang w)? a2:APIName dot w opencurly w a3:AliasedSimpleNameList
     a4:(w comma w ellipses)? w closecurly
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       Span span = createSpan(yyStart,yyCount);
       List<Import> imports = FortressUtil.mkList((Import)new ImportNames(span,fl,
                                                                         a2,a3));
       if (a4 != null)
           imports.add((Import)new ImportStar(span, fl,a2,
                               Collections.<IdOrOpOrAnonymousName>emptyList()));
       yyValue = imports;
     }
   / a1:(ForeignLang w)? a2:Id dot a3:QualifiedName a4:(w as w Id)?
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       APIName api;
       Id id;
       if (a3.getApiName().isNone()) {
           api = NodeFactory.makeAPIName(a2);
           id = a3;
       } else {
           api = NodeFactory.makeAPINameSkipLast(a2, a3);
           id  = NodeFactory.makeIdFromLast(a3);
       }
       AliasedSimpleName an;
       if (a4 == null) an = NodeFactory.makeAliasedSimpleName(id);
       else            an = NodeFactory.makeAliasedSimpleName(id, a4);
       Import imp = new ImportNames(createSpan(yyStart,yyCount), fl, api,
                                    FortressUtil.mkList(an));
       yyValue = FortressUtil.mkList(imp);
     }
   / <ErrorProduction>
     (ForeignLang w)? Id (w as w Id)?
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Syntax Error: Try 'import api APIName'");
     };

/* SimpleNames ::= SimpleName | { w SimpleNameList w } */
private List<IdOrOpOrAnonymousName> SimpleNames =
     a1:SimpleName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w SimpleNameList w void:closecurly ;

/* SimpleNameList ::= SimpleName (w , w SimpleName)* */
private List<IdOrOpOrAnonymousName> SimpleNameList =
     a1:SimpleName a2s:(w comma w SimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedSimpleName ::=
     Id (w as w Id)?
   | opr (w BIG)? w (Encloser / Op) (w as w (Encloser / Op))?
   | opr (w BIG)? w EncloserPair (w as w EncloserPair)?
 */
private AliasedSimpleName AliasedSimpleName =
     a1:Id a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else
           yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
     }
   / opr big:(w BIG)? w a1:(Encloser / Op) a2:(w as w (Encloser / Op))?
     { if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
       }
     }
   / opr big:(w BIG)? w a1:EncloserPair a2:(w as w EncloserPair)?
     { if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
       }
     };

/* AliasedSimpleNameList ::= AliasedSimpleName (w , w AliasedSimpleName)* */
private List<AliasedSimpleName> AliasedSimpleNameList =
     a1:AliasedSimpleName a2s:(w comma w AliasedSimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedAPINames ::=
     AliasedAPIName
   | { w AliasedAPINameList w }
 */
private List<AliasedAPIName> AliasedAPINames =
     a1:AliasedAPIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w AliasedAPINameList w void:closecurly ;

/* AliasedAPIName ::= APIName (w as w Id)? */
private AliasedAPIName AliasedAPIName =
     a1:APIName a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedAPIName(a1);
       else
           yyValue = NodeFactory.makeAliasedAPIName(a1, a2);
     };

/* AliasedAPINameList ::= AliasedAPIName (w , w AliasedAPIName)* */
private List<AliasedAPIName> AliasedAPINameList =
     a1:AliasedAPIName a2s:(w comma w AliasedAPIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Exports ::= Export (br Export)* */
private List<APIName> Exports = a1:Export a2s:(br Export)*
     { yyValue = a1;
       for (List<APIName> export : a2s.list()) {
           a1.addAll(export);
       }
     };

/* Export ::= export w APINames */
private List<APIName> Export = export w APINames ;

/* APINames ::=
     APIName
   | { w APINameList w }
 */
List<APIName> APINames =
     a1:APIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w APINameList w void:closecurly ;

/* APINameList ::= APIName (w , w APIName)* */
private List<APIName> APINameList = a1:APIName a2s:(w comma w APIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };
