/*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress components and APIs that are accepted by the preparser.
 */
module com.sun.fortress.parser.preparser.PreCompilation(PreLiteral, Identifier, Keyword,
                                                        Symbol, Spacing);

import PreLiteral;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

option stateful(PreParserState), setOfString(FORTRESS_KEYWORDS);

public resetting void File = initParser Program closeParser ;
void initParser  = w { initParser(); yyState.init(writer); };
void closeParser = w EndOfFile
     { try {
           yyState.report();
           writer.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

void Program = (Token w)+ ;

stateful void Token =
     LiteralExpr
   / import w api // ignore the api keyword
   / api        { yyState.left(createSpan(yyStart,yyCount), "api"); }
   / case       { yyState.left(createSpan(yyStart,yyCount), "case"); }
   / component  { yyState.left(createSpan(yyStart,yyCount), "component"); }
   / do         { yyState.left(createSpan(yyStart,yyCount), "do"); }
   / grammar    { yyState.left(createSpan(yyStart,yyCount), "grammar"); }
   / "(if"      { yyState.left(createSpan(yyStart,yyCount), "(if"); }
   / if         { yyState.left(createSpan(yyStart,yyCount), "if"); }
   / label      { yyState.left(createSpan(yyStart,yyCount), "label"); }
   / object     { yyState.left(createSpan(yyStart,yyCount), "object"); }
   / trait      { yyState.left(createSpan(yyStart,yyCount), "trait"); }
   / try        { yyState.left(createSpan(yyStart,yyCount), "try"); }
   / typecase   { yyState.left(createSpan(yyStart,yyCount), "typecase"); }
   / also       { yyState.right(createSpan(yyStart,yyCount), "also"); }
   / end        { yyState.right(createSpan(yyStart,yyCount), "end"); }
   / Encloser   // ignore vertical bars
   / a1:LeftEncloser  { yyState.left(a1); }
   / a1:RightEncloser { yyState.right(a1); }
   / a1:"("     { yyState.left(createSpan(yyStart,yyCount), a1); }
   / a1:")"     { yyState.right(createSpan(yyStart,yyCount), a1); }
   / a1:Opening { yyState.left(createSpan(yyStart,yyCount), a1); }
   / a1:Closing { yyState.right(createSpan(yyStart,yyCount), a1); }
   / a1:["] { yyState.quote(createSpan(yyStart,yyCount), "\\\""); } // "
   / a1:['] { yyState.quote(createSpan(yyStart,yyCount), "'"); } // '
   / Numbers
   / OtherKeywords
   / OtherSymbols
   / QualifiedName
   / NumericSeparator
   / Op
   / (_ (!w))+
   ;

stateful private transient String Opening =
     opendoublesquare / opensquare / opencurly / "\u201c" / "\u2018" / "`";

stateful private transient String Closing =
     closedoublesquare / closesquare / closecurly / "\u201d" / "\u2019";

stateful private transient String OtherKeywords =
     s:(idstart idrest*) &{ FORTRESS_KEYWORDS.contains(s) };

stateful private transient void NumericSeparator = "'" / "\u202f" / "." ;
stateful private transient void Numbers = [0-9]+;

stateful private transient void OtherSymbols =
     openparen w closeparen
   / comma / colonequals / colon / ellipses / dot / semicolon
   / equals w end
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Missing function body.");
       yyState.right(span, "end");
     }
   / equals / ExponentOp / caret / SUM / PROD
   / bar+ / "\u2016" / "\u2af4" / match / mapsto / leftarrow / cross / rightarrow
   / underscore
   ;
