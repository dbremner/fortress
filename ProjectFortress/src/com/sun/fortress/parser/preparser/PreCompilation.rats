/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress components and APIs that are accepted by the preparser.
 */
module com.sun.fortress.parser.preparser.PreCompilation(Identifier, Keyword,
                                                        Symbol, Spacing);

import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* File ::=
     w CompilationUnit w EndOfFile
   | (w Imports w ;?)? w Exports w ;? (w Decls w ;?)? w EndOfFile
   | (w Imports w ;?)? w AbsDecls w ;? w EndOfFile
   | w Imports w ;? (w AbsDecls w ;?)? w EndOfFile
 */
public CompilationUnit File =
     w yyValue:CompilationUnit
     { Span span = createSpan(yyStart,yyCount);
       String filename = span.getBegin().getFileName();
       String cuname = yyValue.getName().toString();
       if (!Shell.checkCompilationUnitName(filename,
                                           cuname))
           yyValue = syntaxError(span,
                                 "Component/API names must match their enclosing file names, from name="
                                 + filename+", from contents="+cuname);
     }
   / w Exports w semicolon? w Imports w semicolon? w (_)* // Error production
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Import statements should come before export statements.");
     }
   / w a1:Imports w semicolon? w (_)*
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       List<Decl> a2 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = new Api(span, name, a1, a2);
     }
   / a1:(w yyValue:Imports w semicolon?)? w a2:Exports w (_)*
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       List<Decl> a3 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = new Component(span, name, a1, a2, a3);
     }
   / _
     { Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = new Api(span, name, Collections.<Import>emptyList(),
                         Collections.<Decl>emptyList());
     };

/* CompilationUnit ::=
     Component
   | Api
 */
private CompilationUnit CompilationUnit =
     Component
   / Api ;

/* Component ::=
     (native w)? component w APIName (w Imports w ;?)? w Exports w ;?
     (w Decls w ;?)? w end
 */
private Component Component =
     <ErrorProduction1>
     (native w)? component w APIName w Exports w semicolon?
     w Imports w (_)*
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Import statements should come before export statements.");
     }
   / a1:(native w)? component w a2:APIName a3:(w yyValue:Imports w semicolon?)? w a4:Exports w (_)*
     { if (a3 == null) a3 = Collections.<Import>emptyList();
       List<Decl> a5 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       if (a1 == null)
           yyValue = new Component(span, a2, a3, a4, a5);
       else
           yyValue = new Component(span, true, a2, a3, a4, a5);
     };

/* Api ::= api w APIName (w Imports w ;?)? (w AbsDecls w ;?)? w end */
private Api Api =
     native w api w APIName (w Imports w semicolon?)? w (_)* // Error production
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "The native modifier is only for components not for APIs.");
     }
   / api w a1:APIName a2:(w yyValue:Imports w semicolon?)? w (_)*
     { if (a2 == null) a2 = Collections.<Import>emptyList();
       List<Decl> a3 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       yyValue = new Api(span, a1, a2, a3);
     };

/* Imports ::= Import (br Import)* */
private List<Import> Imports = a1:Import a2s:(br Import)*
     { for (List<Import> i : a2s.list()) {
         for (Import j : i) {
           a1.add(j);
         }
       }
       yyValue = a1;
     };

/* Import ::=
     import w api w AliasedAPINames
   | import w ImportedNames
 */
private List<Import> Import =
     import w api w a1:AliasedAPINames
     { Import imp = new ImportApi(createSpan(yyStart, yyCount), a1);
       yyValue = FortressUtil.mkList(imp);
     }
   / import w ImportedNames;

/* ImportedNames ::=
     APIName . w { w ... w } (w except w SimpleNames)?
   | APIName . w { w AliasedSimpleNameList (w , w ...)? w }
   | QualifiedName (w as w Id)?
 */
private List<Import> ImportedNames =
     a1:APIName dot w opencurly w ellipses w closecurly
     a2:(w except w SimpleNames)?
     { if (a2 == null) a2 = Collections.<IdOrOpOrAnonymousName>emptyList();
       yyValue = FortressUtil.mkList((Import)new ImportStar(
                                             createSpan(yyStart,yyCount),a1,a2));
     }
   / a1:APIName dot w opencurly w a2:AliasedSimpleNameList
     a3:(w comma w ellipses)? w closecurly
     { Span span = createSpan(yyStart,yyCount);
       List<Import> imports = FortressUtil.mkList((Import)new ImportNames(span,
                                                                         a1,a2));
       if (a3 != null)
           imports.add((Import)new ImportStar(span, a1,
                               Collections.<IdOrOpOrAnonymousName>emptyList()));
       yyValue = imports;
     }
   / a1:Id dot a2:QualifiedName a3:(w as w Id)?
     { APIName api;
       Id id;
       if (a2.getApi().isNone()) {
           api = NodeFactory.makeAPIName(a1);
           id = a2;
       } else {
           api = NodeFactory.makeAPINameSkipLast(a1, a2);
           id  = NodeFactory.makeIdFromLast(a2);
       }
       AliasedSimpleName an;
       if (a3 == null) an = NodeFactory.makeAliasedSimpleName(id);
       else            an = NodeFactory.makeAliasedSimpleName(id, a3);
       Import imp = new ImportNames(createSpan(yyStart,yyCount), api,
                                    FortressUtil.mkList(an));
       yyValue = FortressUtil.mkList(imp);
     }
   / a1:Id a2:(w as w Id)?    // Error production
     { yyValue = error(new VoidLiteralExpr(createSpan(yyStart,yyCount)),
                       "Syntax Error: Try 'import api APIName'");
     };

/* SimpleNames ::= SimpleName | { w SimpleNameList w } */
private List<IdOrOpOrAnonymousName> SimpleNames =
     a1:SimpleName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w SimpleNameList w void:closecurly ;

/* SimpleNameList ::= SimpleName (w , w SimpleName)* */
private List<IdOrOpOrAnonymousName> SimpleNameList =
     a1:SimpleName a2s:(w comma w SimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedSimpleName ::=
     Id (w as w Id)?
   | opr (w BIG)? w (Encloser / Op) (w as w (Encloser / Op))?
   | opr (w BIG)? w EncloserPair (w as w EncloserPair)?
 */
private AliasedSimpleName AliasedSimpleName =
     a1:Id a2:(w as w Id)?
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(span, a1);
       else
           yyValue = NodeFactory.makeAliasedSimpleName(span, a1, a2);
     }
   / opr big:(w BIG)? w a1:(Encloser / Op) a2:(w as w (Encloser / Op))?
     { Span span = createSpan(yyStart,yyCount);
       if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(span, a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(span, a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(span, a1, a2);
       }
     }
   / opr big:(w BIG)? w a1:EncloserPair a2:(w as w EncloserPair)?
     { Span span = createSpan(yyStart,yyCount);
       if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(span, a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(span, a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(span, a1, a2);
       }
     };

/* AliasedSimpleNameList ::= AliasedSimpleName (w , w AliasedSimpleName)* */
private List<AliasedSimpleName> AliasedSimpleNameList =
     a1:AliasedSimpleName a2s:(w comma w AliasedSimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedAPINames ::=
     AliasedAPIName
   | { w AliasedAPINameList w }
 */
private List<AliasedAPIName> AliasedAPINames =
     a1:AliasedAPIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w AliasedAPINameList w void:closecurly ;

/* AliasedAPIName ::= APIName (w as w Id)? */
private AliasedAPIName AliasedAPIName =
     a1:APIName a2:(w as w Id)?
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null)
           yyValue = new AliasedAPIName(span, a1, Option.<Id>none());
       else
           yyValue = new AliasedAPIName(span, a1, Option.some(a2));
     };

/* AliasedAPINameList ::= AliasedAPIName (w , w AliasedAPIName)* */
private List<AliasedAPIName> AliasedAPINameList =
     a1:AliasedAPIName a2s:(w comma w AliasedAPIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Exports ::= Export (br Export)* */
private List<APIName> Exports = a1:Export a2s:(br Export)*
     { yyValue = a1;
       for (List<APIName> export : a2s.list()) {
           a1.addAll(export);
       }
     };

/* Export ::= export w APINames */
private List<APIName> Export = export w APINames;

/* APINames ::=
     APIName
   | { w APINameList w }
 */
List<APIName> APINames =
     a1:APIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w APINameList w void:closecurly ;

/* APINameList ::= APIName (w , w APIName)* */
private List<APIName> APINameList = a1:APIName a2s:(w comma w APIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };
