/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress precomponents which also accepts APIs.
 */
module com.sun.fortress.parser.preparser.PreCompilation(Identifier, Keyword, Symbol, Spacing);

import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* File ::=
     w CompilationUnit w
   | (w Imports)? w Exports (w Decls)? w
   | (w Imports)? w AbsDecls w
   | w Imports (w AbsDecls)? w
 */
public CompilationUnit File =
     w CompilationUnit w
   / a1:(w Imports)? w
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPIName(span, file, "\\.");
       List<Export> a3 = Collections.<Export>emptyList();
       List<Decl> a4 = Collections.<Decl>emptyList();
       yyValue = new Component(span, name, a1, a3, a4);
     };

//transient void EndOfFile = !_ ;

/* CompilationUnit ::=
     Component
 */
private CompilationUnit CompilationUnit =
     Component  ;

/* Component ::= component w APIName (w Imports)? w  end */
private Component Component =
     component w  a1:APIName a2:(w Imports)? w (_)*
     {  if (a2 == null) a2 = Collections.<Import>emptyList();
        List<Export> a3 = Collections.<Export>emptyList();
        List<Decl> a4 = Collections.<Decl>emptyList();
        yyValue = new Component(createSpan(yyStart,yyCount), a1, a2, a3, a4);};

/* Imports ::= Import (br Import)* */
private List<Import> Imports = a1:Import a2s:(br Import)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Import ::=
     import w ImportedNames
   | import w AliasedAPINames
 */
private Import Import =
     import w ImportedNames
   / import w a1:AliasedAPINames
     { yyValue = new ImportApi(createSpan(yyStart, yyCount), a1); };

/* ImportedNames ::=
     * (w except w Names)? w from w APIName
   | AliasedNames w from w APIName
 */
private ImportedNames ImportedNames =
     a1:APIName dot w opencurly w ellipses w closecurly a2:(w except w Names)?
     { if (a2 == null) a2 = Collections.<SimpleName>emptyList();
       yyValue = new ImportStar(createSpan(yyStart,yyCount), a1, a2);
     }
   / a1:APIName dot a2:AliasedNames
     { yyValue = new ImportNames(createSpan(yyStart,yyCount), a1, a2); };

/* Names ::= Name | { w NameList w } */
private List<SimpleName> Names =
     a1:Name
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w NameList w closecurly ;

/* NameList ::= Name (w , w Name)* */
private List<SimpleName> NameList = a1:Name a2s:(w comma w Name)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedNames ::=
     AliasedName
   | { w AliasedNameList w }
 */
private List<AliasedName> AliasedNames =
     a1:AliasedName
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w AliasedNameList w closecurly ;

/* AliasedName ::=
     Id (w as w Id)?
   | opr w Op (w as w Op)?
   | opr w EncloserPair (w as w EncloserPair)?
 */
private AliasedName AliasedName =
     a1:Id a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount), a1);
       else
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount), a1, a2);
     }
   / opr w a1:Op a2:(w as w Op)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount),
                                                 new Opr(a1.getSpan(), a1));
       else
           yyValue = NodeFactory.makeAliasedName(createSpan(yyStart,yyCount),
                                                 new Opr(a1.getSpan(), a1),
                                                 new Opr(a2.getSpan(), a2));
     }
   / opr w a1:EncloserPair a2:(w as w EncloserPair)?
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedName(span, a1);
       else
           yyValue = NodeFactory.makeAliasedName(span, a1, a2);
     };

/* EncloserPair ::= (LeftEncloser | Encloser) w (RightEncloser | Encloser) */
private Bracketing EncloserPair =
     a1:(LeftEncloser / Encloser) w a2:(RightEncloser / Encloser)
     { if (PrecedenceMap.ONLY.matchedBrackets(a1.getText(), a2.getText()))
           yyValue = new Bracketing(createSpan(yyStart,yyCount), a1, a2);
       else
           yyValue = error(a2, "Mismatched Enclosers.");
     };

/* AliasedNameList ::= AliasedName (w , w AliasedName)* */
private List<AliasedName> AliasedNameList =
     a1:AliasedName a2s:(w comma w AliasedName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedAPINames ::=
     AliasedAPIName
   | { w AliasedAPINameList w }
 */
private List<AliasedAPIName> AliasedAPINames =
     a1:AliasedAPIName
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w AliasedAPINameList w closecurly ;

/* AliasedAPIName ::= APIName (w as w APIName)? */
private AliasedAPIName AliasedAPIName =
     a1:APIName a2:(w as w APIName)?
     { if (a2 == null)
           yyValue = new AliasedAPIName(createSpan(yyStart,yyCount), a1,
                                           Option.<APIName>none());
       else
           yyValue = new AliasedAPIName(createSpan(yyStart,yyCount), a1,
                                           Option.some(a2));
     };

/* AliasedAPINameList ::= AliasedAPIName (w , w AliasedAPIName)* */
private List<AliasedAPIName> AliasedAPINameList =
     a1:AliasedAPIName a2s:(w comma w AliasedAPIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* APINames ::=
     APIName
   | { w APINameList w }
 */
List<APIName> APINames =
     a1:APIName
     { yyValue = FortressUtil.mkList(a1); }
   / opencurly w APINameList w closecurly ;

/* APINameList ::= APIName (w , w APIName)* */
private List<APIName> APINameList = a1:APIName a2s:(w comma w APIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };
