/*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress components and APIs that are accepted by the preparser.
 */
module com.sun.fortress.parser.preparser.PreCompilation(Identifier, Keyword,
                                                        Symbol, Spacing);

import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* File ::=
     w CompilationUnit w EndOfFile
   | (w Imports w ;?)? w Exports w ;? (w Decls w ;?)? w EndOfFile
   | (w Imports w ;?)? w AbsDecls w ;? w EndOfFile
   | w Imports w ;? (w AbsDecls w ;?)? w EndOfFile
 */
public CompilationUnit File = initParser yyValue:Program closeParser ;
void initParser  = w { initParser(); };
void closeParser = w EndOfFile
     { try {
           writer.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

CompilationUnit Program =
     yyValue:CompilationUnit
     { Span span = createSpan(yyStart,yyCount);
       String filename = span.getBegin().getFileName();
       String cuname = yyValue.getName().toString();
       if (!Shell.checkCompilationUnitName(filename,
                                           cuname))
           log(NodeUtil.getSpan(yyValue.getName()),
               "    Component/API names must match their enclosing file names." +
               "\n    File name: " + filename +
               "\n    Component/API name: " + cuname);
     }
   / <ErrorProduction1>
     Exports (w semicolon)? w Imports (w semicolon)? (_)*
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Import statements should come before export statements.");
       yyValue = NodeFactory.makeComponent(span, NodeFactory.makeAPIName(span));
     }
   / a1:(yyValue:Imports (w semicolon)? w)? a2:Exports (w semicolon)?
     w DeclsRestWithoutEnd
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       List<Decl> a3 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = NodeFactory.makeComponent(span, name, a1, a3, a2);
     }
   / a1:Imports (w semicolon)? w AbsDeclsRest (w semicolon)?
     { List<Decl> a2 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = NodeFactory.makeApi(span, name, a1, a2);
     }
   / a1:(yyValue:Imports (w semicolon)? w)? AbsDeclsRest (w semicolon)?
     { if (a1 == null) a1 = Collections.<Import>emptyList();
       List<Decl> a2 = Collections.<Decl>emptyList();
       Span span = createSpan(yyStart,yyCount);
       String file = span.begin.getFileName();
       APIName name = NodeFactory.makeAPINameFromPath(span, file, "\\.");
       yyValue = NodeFactory.makeApi(span, name, a1, a2);
     };

/* CompilationUnit ::=
     Component
   | Api
 */
private CompilationUnit CompilationUnit =
     Component
   / Api ;

/* Component ::=
     (native w)? component w APIName (w Imports w ;?)? w Exports w ;?
     (w Decls w ;?)? w end ((s component)? s APIName)?
 */
private Component Component =
     <ErrorProduction1>
     (native w)? component w a1:APIName w Exports (w semicolon)?
     w Imports (w semicolon)? (_)*
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Import statements should come before export statements.");
       yyValue = NodeFactory.makeComponent(span, a1);
     }
   / <ErrorProduction2>
     (native w)? component w a1:APIName (w Imports (w semicolon)?)? w end
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Components should have at least one export statement.");
       yyValue = NodeFactory.makeComponent(span, a1);
     }
   / a1:(native w)? component w a2:APIName a3:(w yyValue:Imports (w semicolon)?)? w
     a4:Exports (w semicolon)? w end a6:((s component)? s yyValue:APIName)?
     { Span span = createSpan(yyStart,yyCount);
       if (a6 != null && !NodeUtil.nameString(a6).equals(NodeUtil.nameString(a2))) {
           log(span, "A component declaration of " + a2 +
               " has the different name " + a6 + " at the end.");
           yyValue = NodeFactory.makeComponent(span, a2);
       }
       if (a3 == null) a3 = Collections.<Import>emptyList();
       List<Decl> a5 = Collections.<Decl>emptyList();
       if (a1 == null)
           yyValue = NodeFactory.makeComponent(span, a2, a3, a5, a4);
       else
           yyValue = NodeFactory.makeComponent(span, a2, a3, a5, true, a4);
     }
   / a1:(native w)? component w a2:APIName a3:(w yyValue:Imports (w semicolon)?)? w
     a4:Exports (w semicolon)? w a5:DeclsRest
     { Span span = createSpan(yyStart,yyCount);
       if (a3 == null) a3 = Collections.<Import>emptyList();
       List<Decl> decls = Collections.<Decl>emptyList();
       if ( a5.isSome() && a5.equals(NodeUtil.nameString(a2)) ) {
           log(span, "A component declaration of " + a2 +
               " has the different name " + a5.unwrap() + " at the end.");
           yyValue = NodeFactory.makeComponent(span, a2);
       }
       if (a1 == null)
           yyValue = NodeFactory.makeComponent(span, a2, a3, decls, a4);
       else
           yyValue = NodeFactory.makeComponent(span, a2, a3, decls, true, a4);
     }
   / <ErrorProduction3>
     (native w)? component w a1:APIName (w Imports (w semicolon)?)?
     w DeclsRest
     { Span span = createSpan(yyStart,yyCount);
       if ( ! withError )
           log(span, "Components should have at least one export statement.");
       yyValue = NodeFactory.makeComponent(span, a1);
     };

/* Api ::= api w APIName (w Imports w ;?)? (w AbsDecls w ;?)? w end
           ((s api)? s APIName)?
 */
private Api Api =
     <ErrorProduction1>
     native w api w a1:APIName (_)*
     { Span span = createSpan(yyStart,yyCount);
       log(span, "The \"native\" modifier is only for components not for APIs.");
       yyValue = NodeFactory.makeApi(span, a1);
     }
   / api w a1:APIName a2:(w yyValue:Imports (w semicolon)?)? w (_)*
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<Import>emptyList();
       List<Decl> a3 = Collections.<Decl>emptyList();
       yyValue = NodeFactory.makeApi(span, a1, a2, a3);
     };

/* Imports ::= Import (br Import)* */
private List<Import> Imports = a1:Import a2s:(br Import)*
     { for (List<Import> i : a2s.list()) {
         for (Import j : i) {
           a1.add(j);
         }
       }
       yyValue = a1;
     };

/* Import ::=
     import (w ForeignLang)? w api w AliasedAPINames
   | import w ImportedNames
 */
private List<Import> Import =
     import a1:(w ForeignLang)? w api w a2:AliasedAPINames
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       Import imp = NodeFactory.makeImportApi(createSpan(yyStart, yyCount), fl, a2);
       yyValue = FortressUtil.mkList(imp);
     }
   / import w ImportedNames;

/* ForeignLang ::= Id | StringLiteralExpr */
private String ForeignLang =
     !(Id w dot) a1:Id { yyValue = a1.getText(); }
   / a1:StringLiteralExpr { yyValue = a1.getText(); };

StringLiteralExpr StringLiteralExpr =
     <FIRST> ["] a1:StringLiteralContents? ["]
     { if (a1 == null) a1 = "";
       yyValue = ExprFactory.makeStringLiteralExpr(createSpan(yyStart,yyCount), a1);
     }
   / "\u201c" a1:StringLiteralContents? "\u201d"
     { if (a1 == null) a1 = "";
       yyValue = ExprFactory.makeStringLiteralExpr(createSpan(yyStart,yyCount), a1);
     }
   / <ErrorProduction1> ["] a1:StringLiteralContents? "\u201d"
     { Span span = createSpan(yyStart,yyCount);
       log(span, "The opening and closing marks of a string literal must match.");
       yyValue = ExprFactory.makeStringLiteralExpr(span, "");
     }
   / <ErrorProduction2> "\u201c" a1:StringLiteralContents? ["]
     { Span span = createSpan(yyStart,yyCount);
       log(span, "The opening and closing marks of a string literal must match.");
       yyValue = ExprFactory.makeStringLiteralExpr(span, "");
     }
   / <ErrorProduction3> ["] a1:StringLiteralContents
     { Span span = createSpan(yyStart,yyCount);
       yyValue = ExprFactory.makeStringLiteralExpr(span, "");
     }
   / <ErrorProduction4> "\u201c" a1:StringLiteralContents
     { Span span = createSpan(yyStart,yyCount);
       yyValue = ExprFactory.makeStringLiteralExpr(span, "");
     }
   ;

private String StringLiteralContents =
     StringLiteralContent* a1:[\n\f\r]+ &( w EndOfFile )
     { yyValue = ""; }
   / StringLiteralContent* a1:[\n\f\r]+
     { log(createSpan(yyStart,yyCount), "Unmatched delimiter \"\\\"\".");
       yyValue = "";
     }
   / a1:StringLiteralContent+
     { String str = "";
       for (String c : (List<String>)a1.list()) {
           str = str.concat(c);
       }
       yyValue = str;
     }
   ;

private String StringLiteralContent =
     EscapeSequence
   / a1:(!InvalidStringLiteralContent _) &( w EndOfFile )
     { log(createSpan(yyStart,yyCount), "Unmatched delimiter \"\\\"\".");
       yyValue = String.valueOf(a1);
     }
   / a1:(!InvalidStringLiteralContent _) { yyValue = String.valueOf(a1); }
   ;

private void InvalidStringLiteralContent =
     void:["\u201c\u201d]
   / [\n\f\r]
   / a1:[\\]
     { log(createSpan(yyStart,yyCount), "Invalid string literal content: " + a1); }
   / a1:[\u0009\u000b\u001c\u001d\u001e\u001f\u2028\u2029]
     { log(createSpan(yyStart,yyCount), "Invalid string literal content: " + a1); }
   / c:_ &{ Character.getType(c) == Character.CONTROL }
     { log(createSpan(yyStart,yyCount), "Invalid string literal content: " + c); };

private String EscapeSequence =
     '\\' a1:[btnfr"\\]
     { switch (a1) {
           case 'b': { yyValue = "\b"; break; }
           case 't': { yyValue = "\t"; break; }
           case 'n': { yyValue = "\n"; break; }
           case 'f': { yyValue = "\f"; break; }
           case 'r': { yyValue = "\r"; break; }
           case '"': { yyValue = "\""; break; }
           case '\\': { yyValue = "\\"; break; }
           default: { yyValue = ""; }
       }
     }
   / '\\' a1:[\u201c] { yyValue = "\u201c"; }
   / '\\' a1:[\u201d] { yyValue = "\u201d"; };
/* '*/

/* ImportedNames ::=
     (ForeignLang w)? APIName . w { w ... w } (w except w SimpleNames)?
   |  ForeignLang w   APIName . w { w AliasedQualifiedNameList (w , w ...)? w }
   | (ForeignLang w)? APIName . w { w AliasedSimpleNameList (w , w ...)? w }
   | (ForeignLang w)? QualifiedName (w as w Id)?
 */
private List<Import> ImportedNames =
     a1:(ForeignLang w)? a2:APIName dot w opencurly w ellipses w closecurly
     a3:(w except w SimpleNames)?
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       if (a3 == null) a3 = Collections.<IdOrOpOrAnonymousName>emptyList();
       yyValue = FortressUtil.mkList((Import)NodeFactory.makeImportStar(
                                             createSpan(yyStart,yyCount),fl,a2,a3));
     }
   / a1:ForeignLang w a2:APIName dot w opencurly w a3:AliasedQualifiedNameList
     a4:(w comma w ellipses)? w closecurly
     { Option<String> fl = Option.<String>some(a1);
       Span span = createSpan(yyStart,yyCount);
       List<Import> imports = FortressUtil.mkList((Import)NodeFactory.makeImportNames(span,fl,
                                                                         a2,a3));
       if (a4 != null)
           imports.add((Import)NodeFactory.makeImportStar(span, fl,a2,
                               Collections.<IdOrOpOrAnonymousName>emptyList()));
       yyValue = imports;
     }
   / a1:(ForeignLang w)? a2:APIName dot w opencurly w a3:AliasedSimpleNameList
     a4:(w comma w ellipses)? w closecurly
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       Span span = createSpan(yyStart,yyCount);
       List<Import> imports = FortressUtil.mkList((Import)NodeFactory.makeImportNames(span,fl,
                                                                         a2,a3));
       if (a4 != null)
           imports.add((Import)NodeFactory.makeImportStar(span, fl,a2,
                               Collections.<IdOrOpOrAnonymousName>emptyList()));
       yyValue = imports;
     }
   / a1:(ForeignLang w)? a2:Id dot a3:QualifiedName a4:(w as w Id)?
     { Option<String> fl;
       if ( a1 == null ) fl = Option.<String>none();
       else              fl = Option.<String>some(a1);
       APIName api;
       Id id;
       if (a3.getApiName().isNone()) {
           api = NodeFactory.makeAPIName(a2);
           id = a3;
       } else {
           api = NodeFactory.makeAPINameSkipLast(a2, a3);
           id  = NodeFactory.makeIdFromLast(a3);
       }
       AliasedSimpleName an;
       if (a4 == null) an = NodeFactory.makeAliasedSimpleName(id);
       else            an = NodeFactory.makeAliasedSimpleName(id, a4);
       Import imp = NodeFactory.makeImportNames(createSpan(yyStart,yyCount), fl, api,
                                                FortressUtil.mkList(an));
       yyValue = FortressUtil.mkList(imp);
     }
   / <ErrorProduction>
     Id (w as w Id)?
     { log(createSpan(yyStart,yyCount),
           "Syntax Error: Try \"import api APIName\"");
       yyValue = Collections.<Import>emptyList();
     };

/* SimpleNames ::= SimpleName | { w SimpleNameList w } */
private List<IdOrOpOrAnonymousName> SimpleNames =
     a1:SimpleName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w SimpleNameList w void:closecurly ;

/* SimpleNameList ::= SimpleName (w , w SimpleName)* */
private List<IdOrOpOrAnonymousName> SimpleNameList =
     a1:SimpleName a2s:(w comma w SimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedSimpleName ::=
     Id (w as w Id)?
   | opr (w BIG)? w (Encloser / Op) (w as w (Encloser / Op))?
   | opr (w BIG)? w EncloserPair (w as w EncloserPair)?
 */
private AliasedSimpleName AliasedSimpleName =
     a1:Id a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else
           yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
     }
   / opr big:(w BIG)? w a1:(Encloser / Op) a2:(w as w (Encloser / Op))?
     { if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
       }
     }
   / opr big:(w BIG)? w a1:EncloserPair a2:(w as w EncloserPair)?
     { if (big != null) {
           a1 = NodeFactory.makeBig(a1);
       }
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else {
           if (big != null)
               yyValue = NodeFactory.makeAliasedSimpleName(a1,
                                                           NodeFactory.makeBig(a2));
           else
               yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
       }
     };

/* AliasedSimpleNameList ::= AliasedSimpleName (w , w AliasedSimpleName)* */
private List<AliasedSimpleName> AliasedSimpleNameList =
     a1:AliasedSimpleName a2s:(w comma w AliasedSimpleName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedQualifiedName ::= QualifiedName (w as w QualifiedName)? */
private AliasedSimpleName AliasedQualifiedName =
     a1:QualifiedName a2:(w as w QualifiedName)?
     { a1 = NodeFactory.makeDottedId(a1);
       if (a2 == null)
           yyValue = NodeFactory.makeAliasedSimpleName(a1);
       else {
           a2 = NodeFactory.makeDottedId(a2);
           yyValue = NodeFactory.makeAliasedSimpleName(a1, a2);
       }
     };

/* AliasedQualifiedNameList ::= AliasedQualifiedName (w , w AliasedQualifiedName)* */
private List<AliasedSimpleName> AliasedQualifiedNameList =
     a1:AliasedQualifiedName a2s:(w comma w AliasedQualifiedName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* AliasedAPINames ::=
     AliasedAPIName
   | { w AliasedAPINameList w }
 */
private List<AliasedAPIName> AliasedAPINames =
     a1:AliasedAPIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w AliasedAPINameList w void:closecurly ;

/* AliasedAPIName ::= APIName (w as w Id)? */
private AliasedAPIName AliasedAPIName =
     a1:APIName a2:(w as w Id)?
     { if (a2 == null)
           yyValue = NodeFactory.makeAliasedAPIName(a1);
       else
           yyValue = NodeFactory.makeAliasedAPIName(a1, a2);
     };

/* AliasedAPINameList ::= AliasedAPIName (w , w AliasedAPIName)* */
private List<AliasedAPIName> AliasedAPINameList =
     a1:AliasedAPIName a2s:(w comma w AliasedAPIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Exports ::= Export (br Export)* */
private List<APIName> Exports = a1:Export a2s:(br Export)*
     { yyValue = a1;
       for (List<APIName> export : a2s.list()) {
           a1.addAll(export);
       }
     };

/* Export ::= export w APINames */
private List<APIName> Export = export w APINames ;

/* APINames ::=
     APIName
   | { w APINameList w }
 */
List<APIName> APINames =
     a1:APIName { yyValue = FortressUtil.mkList(a1); }
   / void:opencurly w APINameList w void:closecurly ;

/* APINameList ::= APIName (w , w APIName)* */
private List<APIName> APINameList = a1:APIName a2s:(w comma w APIName)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* Declarations within component/end.
   Do not handle the following declarations yet:
     trait/object/var/dimension/unit/test/property/type alias
 */
/* Decls ::= Decl (br Decl)* */
transient private Option<String> DeclsRest =
     component (_)*
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Nested component definitions are not allowed.");
       yyValue = Option.<String>none();
     }
   / api (_)*
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Nested API definitions are not allowed.");
       yyValue = Option.<String>none();
     }
   / Mods? (trait/object) (_)*
     { yyValue = Option.<String>none(); }
   / (dim / unit / SI_unit / type / test / property) (_)*
     { yyValue = Option.<String>none(); }
   / FnDeclHeader w NoNewlineExpr (w semicolon)? w end a2:((s component)? s APIName)? &( w EndOfFile )
     { if (a2 == null)
           yyValue = Option.<String>none();
       else
           yyValue = Option.<String>some(NodeUtil.stringName(a2));
     }
   / FnDeclHeader w NoNewlineExpr (w semicolon)? &( w EndOfFile )
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Unmatched delimiter \"component\".");
       yyValue = Option.<String>none();
     }
   / FnDeclHeader (w semicolon)? (w (end / DeclKeywords))? &( w EndOfFile )
     { Span span = createSpan(yyStart,yyCount);
       log(span, "Missing function body.");
       yyValue = Option.<String>none();
     }
   / FnDeclHeader w NoNewlineExpr br a2:DeclsRest
     { yyValue = a2; }
   / FnDeclHeader (_)+
     { yyValue = Option.<String>none(); }
   / end w Extra
     { yyValue = Option.<String>none(); }
   / (_)+
     { yyValue = Option.<String>none(); };

/* Unmatched leftover inputs */
transient private void Extra =
     end (_)*
     { log(createSpan(yyStart,yyCount), "Unmatched delimiter \"end\"."); }
   / a1:(_)+
     { String input = "";
       for ( char c : a1.list() ) {
           input += c;
       }
       log(createSpan(yyStart,yyCount), "Unmatched input \"" + input + "\".");
     };

/* Declarations without component/end.
   Do not handle the following declarations yet:
     trait/object/var/dimension/unit/test/property/type alias
 */
/* Decls ::= Decl (br Decl)* */
transient private Option<String> DeclsRestWithoutEnd =
     Mods? (trait/object) (_)*
     { yyValue = Option.<String>none(); }
   / (dim / unit / SI_unit / type / test / property) (_)*
     { yyValue = Option.<String>none(); }
   / FnDeclHeader w NoNewlineExpr (w semicolon)? &( w EndOfFile )
     { yyValue = Option.<String>none(); }
   / FnDeclHeader w NoNewlineExpr br a2:DeclsRestWithoutEnd
     { yyValue = a2; }
   / FnDeclHeader (_)+
     { yyValue = Option.<String>none(); }
   / Extra
     { yyValue = Option.<String>none(); }
   / (_)+
     { yyValue = Option.<String>none(); };

transient private void FnDeclHeader =
     Mods? Id (w StaticParams)? w ValParam (w NoNewlineIsType)? w equals w
   / Mods? Id (w StaticParams)? w a1:ExtraOpenparen w ValParam (w NoNewlineIsType)? w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \"(\".");
     }
   / Mods? Id (w StaticParams)? w a1:ExtraCloseparen w ValParam (w NoNewlineIsType)? w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \")\".");
     }
   / Mods? Id (w StaticParams)? w ValParam w a1:ExtraOpenparen (w NoNewlineIsType)? w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \"(\".");
     }
   / Mods? Id (w StaticParams)? w ValParam w a1:ExtraCloseparen (w NoNewlineIsType)? w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \")\".");
     }
   / Mods? Id (w StaticParams)? w ValParam (w NoNewlineIsType)? w a1:ExtraOpenparen w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \"(\".");
     }
   / Mods? Id (w StaticParams)? w ValParam (w NoNewlineIsType)? w a1:ExtraCloseparen w equals w
     { log(NodeUtil.getSpan(a1),
           "Unmatched delimiter \")\".");
     };

transient private Expr ExtraOpenparen =
     openparen
     { yyValue = ExprFactory.makeVoidLiteralExpr(createSpan(yyStart,yyCount)); } ;

transient private Expr ExtraCloseparen =
     closeparen
     { yyValue = ExprFactory.makeVoidLiteralExpr(createSpan(yyStart,yyCount)); } ;

/* AbsDecls ::= AbsDecl (br AbsDecl)* */
transient Option<String> AbsDeclsRest = AbsDecl (br AbsDecl)*
     { yyValue = Option.<String>none(); };

/* Declarations in APIs.
   Do not handle any declarations yet.
 */
/* AbsDecl ::=
     AbsTraitDecl
   | AbsObjectDecl
   | AbsVarDecl
   | AbsFnDecl
   | DimUnitDecl
   | TypeAlias
   | TestDecl
   | PropertyDecl
   | GrammarDef
 */
transient List<Decl> AbsDecl =
     Mods? (trait/object) (_)*
     { yyValue = Collections.<Decl>emptyList(); }
   / (dim / unit / SI_unit / type / test / property / grammar) (_)*
     { yyValue = Collections.<Decl>emptyList(); }
   / (_)*
     { yyValue = Collections.<Decl>emptyList(); };

/* Each modifier cannot appear more than once. */
/* Mods ::= (Mod w)+ */
transient void Mods = (Mod w)+ ;

/* Mod ::=
   atomic | hidden | io | override | private | settable | test | value | var | wrapped
 */
transient void Mod =
     atomic / hidden / io / override / private
   / settable / test / value / var / wrapped
   ;

/* ValParam ::= BindId | ( (w Params)? w ) */
transient void ValParam =
     BindId
   / openparen w closeparen
   / openparen w Params w closeparen
   ;

/* Params ::=
     (Param w , w)* (Varargs w , w)? Keyword (w , w Keyword)*
   | (Param w , w)*  Varargs
   |  Param (w , w Param)*
 */
transient void Params =
     (Param w comma w)* (Varargs w comma w)? Keyword (w comma w Keyword)*
   / (Param w comma w)* Varargs
   / Param (w comma w Param)* ;

/* Param ::= BindId (w IsType)? */
transient void Param = BindId (w IsType)? ;

/* Varargs ::= BindId w : w Type w ... */
transient void Varargs = BindId w colon w Type w ellipses ;

//transient void Keyword = Param w equals w NoNewlineExpr ;
transient void Keyword = Param w equals w DefaultExpr ;
transient void DefaultExpr = ([0-9]+ / Id) (w Op w DefaultExpr)* ;

/* StaticParams ::= [\ w StaticParamList w \] */
transient void StaticParams =
     a1:opendoublesquare (w StaticParamList)? w a2:closedoublesquare
     { if (! PrecedenceMap.ONLY.matchedBrackets(a1,a2) )
             log(createSpan(yyStart,yyCount),
                 "Unmatched delimiter \"" + a1 + "\" and \"" + a2 + "\".");
     }
   / a1:(a:LeftEncloser {yyValue=a.getText();} / opendoublesquare / opensquare)
     (w StaticParamList)? w
     a2:(a:RightEncloser {yyValue=a.getText();} / closedoublesquare / closesquare)
     { if (! PrecedenceMap.ONLY.matchedBrackets((String)a1,(String)a2) )
           log(createSpan(yyStart,yyCount),
               "Unmatched delimiter \"" + a1 + "\" and \"" + a2 + "\".");
     }
   / opendoublesquare
     { log(createSpan(yyStart,yyCount),
           "Unmatched delimiter \"[\\\".");
     }
   ;

/* StaticParamList ::= StaticParam (w , w StaticParam)* */
transient void StaticParamList = StaticParam (w comma w StaticParam)* ;

/* Do not handle unit parameters and type parameters fully yet. */
/* StaticParam ::=
     nat w Id
   | int w Id
   | bool w Id
   | dim w Id
   | unit w Id (w : w NoNewlineType)? (w absorbs w unit)?
   | opr w Op
   | Id (w Extends)? (w absorbs w unit)?
*/
transient void StaticParam =
     (nat / int / bool / dim / unit) w Id
   / opr w Op
   / Id w extends w Type
   / Id
   ;

/* Do not handle types fully yet. */
transient void Type = TypeFront TypeTail* ;

transient void TypeFront =
     openparen w closeparen
   / openparen w Type (w comma w Type)* w closeparen
   / openparen (w Type)? (w comma w Type)* w
     { log(createSpan(yyStart,yyCount),
           "Unmatched delimiter \"(\".");
     }
   / closeparen
     { log(createSpan(yyStart,yyCount),
           "Unmatched delimiter \")\".");
     }
   / Id a1:opendoublesquare w StaticArg (w comma w StaticArg)* w a2:closedoublesquare
     { if (! PrecedenceMap.ONLY.matchedBrackets(a1,a2) )
             log(createSpan(yyStart,yyCount),
                 "Unmatched delimiter \")\".");
     }
   / Id
   ;

/* Do not handle static arguments fully yet. */
transient void StaticArg =
     Type
   / [0-9]+
   ;
transient void TypeTail =
     w rightarrow w Type
   / opensquare w ExtentRange w closesquare
   / caret openparen w ExtentBase (w cross w ExtentBase)* w closeparen
   ;
transient void ExtentRange = ExtentBase (w comma w ExtentBase)* ;

transient void ExtentBase = [0-9]+ (w (pound/colon) w [0-9]+)? / Id ;

transient void IsType = colon w Type ;
transient void NoNewlineIsType = IsType ;

/* Do not handle expressions fully yet. */
transient void NoNewlineExpr =
     do w BlockElems w end
   / label w Id BlockElems w end w Id
   / exit (w Id)? (w with w NoNewlineExpr)?
   / do w BlockElems
     { log(createSpan(yyStart,yyCount),
           "Unmatched delimiter \"do\".");
     }
   / do w end
   / NoNewlineExprFront NoNewlineExprTail* ;

transient void NoNewlineExprFront =
     openparen (s NoNewlineExpr (w comma w NoNewlineExpr)*)? s closeparen
   / Id
   ;

transient void NoNewlineExprTail =
     s Op s Id
   / s StringLiteralExpr
   / s NoNewlineExpr
   / s as Id
   / s openparen (s NoNewlineExpr (w comma w NoNewlineExpr)*)? s closeparen
   ;

transient void BlockElems =
     BlockElem br BlockElems
   / BlockElem w semicolon
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen / w EndOfFile)
   / BlockElem
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen / w EndOfFile)
   ;

private Expr BlockElem =
     NoNewlineExpr
   ;

private void DeclKeywords =
     trait / object / dim / unit / SI_unit / type / test / property ;
