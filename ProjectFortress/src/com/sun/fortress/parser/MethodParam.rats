/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress method parameter declarations.
 */
module com.sun.fortress.parser.MethodParam(Param, Keyword);

modify Param;
import Keyword;

/* MdValParam ::= ( (w MdParams)? w )
   MdParams ::=
     (MdParam w , w)* (Varargs w , w)? MdKeyword (w , w MdKeyword)*
   | (MdParam w , w)*  Varargs
   |  MdParam (w , w MdParam)*
   MdKeyword ::= MdParam w = w Expr
   MdParam   ::= Param | self
 */
List<Param> ValParam := openparen a1:(w Params)? w closeparen
     { if (a1 == null) yyValue = FortressUtil.emptyParams();
       else            yyValue = a1;
     };

NormalParam Param :=
     PlainParam
   / a1:self
     { yyValue = NodeFactory.makeParam(new Id(createSpan(yyStart,yyCount),
                                             "self")); };

/* OpHeaderFront ::=
     opr (w StaticParams)? (w BIG)? w (LeftEncloser | Encloser) w Params w
     (RightEncloser | Encloser) (w := w ( w SubscriptAssignParam w ))?
   | opr (w StaticParams)? w ValParam w (Op | ExponentOp)
   | opr (w BIG)? w (Op | caret | Encloser) (w StaticParams)? w ValParam
 */
FnHeaderFront OpHeaderFront :=
     <Enclosing>
     opr opa1:(w StaticParams)? big:(w BIG)? w opa2:(LeftEncloser / Encloser) w
     opa3:Params w opa4:(RightEncloser / Encloser) opa5:(w void:colonequals w
     openparen w SubscriptAssignParam w closeparen)?
     { SimpleName name;
       Span span = createSpan(yyStart,yyCount);
       String left  = opa2.getText();
       String right = opa4.getText();
       if (PrecedenceMap.ONLY.matchedBrackets(left, right)) {
           if (big != null) {
               opa2 = NodeFactory.makeOp(opa2.getSpan(), "BIG " + left);
               opa4 = NodeFactory.makeOp(opa4.getSpan(), "BIG " + right);
           }
           if (FortressUtil.isFunctionalMethod(opa3)) {
               name = new Bracketing(span, opa2, opa4);
           } else {
               name = new SubscriptOp(span, opa2, opa4);
           }
       } else
           name = error(opa2, "Mismatched enclosing operator definition: "
                              + left + " and " + right);
       if (opa1 == null) opa1 = FortressUtil.emptyStaticParams();
       Option<Param> opparam = Option.wrap(opa5);
       yyValue = new FnHeaderFront(name, opa1, opa3, opparam);
     }
   / ... ;

/* SubscriptAssignParam ::= Varargs | Param */
private Param SubscriptAssignParam =
     Varargs
   / Param ;
