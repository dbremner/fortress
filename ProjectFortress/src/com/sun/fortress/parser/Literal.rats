/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress literals.
 */
module com.sun.fortress.parser.Literal(MayNewlineHeader, DelimitedExpr,
                                       NoSpaceExpr, Symbol, Spacing, Identifier);

import MayNewlineHeader;
import DelimitedExpr;
import NoSpaceExpr;
import Symbol;
import Spacing;
import Identifier;

/* LiteralExpr ::=
     ( w )
   | NumericLiteralExpr
   | CharLiteralExpr
   | StringLiteralExpr
 */
Expr LiteralExpr =
     <GAP> "<!@#$%^&*<" w a1:Id params:ParamList? w ">*&^%$#@!>"
     { if (params == null) params = new LinkedList<Id>();
       yyValue = ExprFactory.makeTemplateGapExpr(createSpan(yyStart,yyCount), a1, params);
     }
   / <VOID> openparen w closeparen
     { yyValue = ExprFactory.makeVoidLiteralExpr(createSpan(yyStart,yyCount)); }
   / <NUMERICAL> NumericLiteralExpr
   / <CHAR>CharLiteralExpr
   / <STRING> StringLiteralExpr
   ;


List<Id> ParamList =
     openparen a1:Id a2s:(w comma w Id)* closeparen
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* ArrayExpr ::= [ StaticArgs? w RectElements w ] */
ArrayExpr ArrayExpr =
     void:opensquare a1:StaticArgs? w a2:RectElements w void:closesquare
     { if (a1 == null) yyValue = a2;
       else            yyValue = FortressUtil.addStaticArgsToArrayExpr(a1, a2);
     };

/* RectElements ::= NoSpaceExpr MultiDimCons* */
private ArrayExpr RectElements =
     a1:NoSpaceExpr a2s:MultiDimCons*
     { if (a2s == null || a2s.isEmpty())
           yyValue = new ArrayElement(a1.getSpan(), false, a1);
       else
           yyValue = FortressUtil.multiDimCons(a1, a2s.list());
     };

/* MultiDimCons ::= RectSeparator NoSpaceExpr */
com.sun.fortress.useful.Pair<Integer,Expr> MultiDimCons =
     a1:RectSeparator a2:NoSpaceExpr
     { yyValue = new com.sun.fortress.useful.Pair<Integer,Expr>(a1,a2); };

NumberLiteralExpr NumericLiteralExpr =
     FloatLiteralExpr
   / IntLiteralExpr ;

transient FloatLiteralExpr FloatLiteralExpr = a1:DigitString dot a2:DigitString
     { yyValue = ExprFactory.makeFloatLiteralExpr(createSpan(yyStart,yyCount),
                                                  a1 + "." + a2); };

transient IntLiteralExpr IntLiteralExpr = a1:DigitString
     { yyValue = ExprFactory.makeIntLiteralExpr(createSpan(yyStart,yyCount),
                                                a1);
     };

private transient String DigitString = [0-9]+;

CharLiteralExpr CharLiteralExpr = "'" a1:CharLiteralContent "'"
     { yyValue = ExprFactory.makeCharLiteralExpr(createSpan(yyStart,yyCount),
                                                 a1);
     };

StringLiteralExpr StringLiteralExpr = ["] a1:StringLiteralContent* ["]
     { String str = "";
       for (String c : (List<String>)a1.list()) {
           str = str.concat(c);
       }
       yyValue = new StringLiteralExpr(createSpan(yyStart,yyCount), false, str);
     };
private String StringLiteralContent =
     EscapeSequence
   / a1:(!["\\] _) { yyValue = String.valueOf(a1); };

private String EscapeSequence = '\\' a1:[btnfr"\\]
     { switch (a1) {
           case 'b': { yyValue = "\b"; break; }
           case 't': { yyValue = "\t"; break; }
           case 'n': { yyValue = "\n"; break; }
           case 'f': { yyValue = "\f"; break; }
           case 'r': { yyValue = "\r"; break; }
           case '"': { yyValue = "\""; break; }
           case '\'': { yyValue = "\'"; break; }
           case '\\': { yyValue = "\\"; break; }
           default: { yyValue = ""; }
       }
     };

private String CharLiteralContent =
     EscapeSequence
   / a1:(!['\\] _) { yyValue = String.valueOf(a1); };
