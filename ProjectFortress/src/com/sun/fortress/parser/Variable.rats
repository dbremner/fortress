/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress variable declarations.
 */
module com.sun.fortress.parser.Variable(NoNewlineHeader, MayNewlineHeader,
                                        NoNewlineType, NoNewlineExpr,
                                        Identifier, Keyword, Symbol, Spacing);

import NoNewlineHeader;
import MayNewlineHeader;
import NoNewlineType;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* VarDecl ::=
     VarMods? VarMayTypes w InitVal
   | VarImmutableMods? BindIdOrBindIdTuple w = w NoNewlineExpr
   | VarMods? BindIdOrBindIdTuple w : w NoNewlineType w ... w InitVal
   | VarMods? BindIdOrBindIdTuple w : w NoNewlineTupleType w InitVal
 */
VarDecl VarDecl =
     a1:VarMods? a2:VarMayTypes w a3:InitVal
     { if (a1 != null) {
           if (a3.getB()) {
               FortressUtil.allHaveTypes(a2);
               a2 = FortressUtil.setModsAndMutable(a2, a1);
           } else {
               if (FortressUtil.getMutable(a1))
                   FortressUtil.allHaveTypes(a2);
               a2 = FortressUtil.setMods(a2, a1);
           }
       } else {
             if (a3.getB()) {
                 FortressUtil.allHaveTypes(a2);
                 a2 = FortressUtil.setMutable(a2);
             }
       }
       FortressUtil.validId(a2);
       yyValue = new VarDecl(createSpan(yyStart,yyCount), a2, a3.getA());
     }
   / a1:VarImmutableMods? a2:BindIdOrBindIdTuple w equals w a3:NoNewlineExpr
     { List<LValue> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1);
       else lvs = FortressUtil.ids2Lvs(a2);
       FortressUtil.validId(lvs);
       yyValue = new VarDecl(createSpan(yyStart,yyCount), lvs, a3);
     }
   / a1:VarMods? a2:BindIdOrBindIdTuple w colon w a3:NoNewlineType w ellipses w a4:InitVal
     { List<LValue> lvs;
       if (a1 != null) {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a1, a3, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a1, a3, false);
       } else {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a3, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a3, false);
       }
       FortressUtil.validId(lvs);
       yyValue = new VarDecl(createSpan(yyStart,yyCount), lvs, a4.getA());
     }
   / a1:VarMods? a2:BindIdOrBindIdTuple w colon w a3:NoNewlineTupleType w a4:InitVal
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       if (a2.size() != tys.size())
           syntaxError(span, "Mismatched numbers of variables and types.");
       List<LValue> lvs;
       if (a1 != null) {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, a1, tys, true);
           else           lvs = FortressUtil.ids2Lvs(a2, a1, tys, false);
       } else {
           if (a4.getB()) lvs = FortressUtil.ids2Lvs(a2, tys, true);
           else           lvs = FortressUtil.ids2Lvs(a2, tys, false);
       }
       FortressUtil.validId(lvs);
       yyValue = new VarDecl(span, lvs, a4.getA());
     }
   / <ErrorProduction>
     var w BindIdOrBindIdTuple w equals w NoNewlineExpr
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Mutable variables should be declared with their types.");
     };

/* Each modifier cannot appear more than once. */
/* VarMods ::= (VarMod w)+ */
transient List<Modifier> VarMods = a1s:(VarMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* Each modifier cannot appear more than once. */
/* VarImmutableMods ::= (VarImmutableMod w)+ */
transient List<Modifier> VarImmutableMods =
     a1s:(VarImmutableMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* VarMod ::= AbsVarMod | private */
transient private Modifier VarMod =
     AbsVarMod
   / a1:private
     { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* VarImmutableMod ::= AbsVarImmutableMod | private */
transient private Modifier VarImmutableMod =
     AbsVarImmutableMod
   / a1:private
     { yyValue = new ModifierPrivate(createSpan(yyStart,yyCount)); };

/* VarMayTypes ::=
     VarMayType
   | ( w VarMayType (w , w VarMayType)+ w )
 */
List<LValue> VarMayTypes =
     a1:VarMayType
     { yyValue = FortressUtil.mkList(a1); }
   / openparen w a1:VarMayType a2s:(w comma w VarMayType)+ w closeparen
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* VarMayType ::= BindId (w IsType)? */
LValue VarMayType = a1:BindId a2:(w IsType)
     { if (a2 == null)
           yyValue = FortressUtil.mkLValue(createSpan(yyStart,yyCount),a1);
       else
           yyValue = FortressUtil.mkLValue(createSpan(yyStart,yyCount),a1,a2);
     };

/* InitVal ::= (=|:=) w NoNewlineExpr */
com.sun.fortress.useful.Pair<Expr,Boolean> InitVal =
     a1:(equals / colonequals) w a2:NoNewlineExpr
     { boolean isMutable = a1.equals(":=") || a1.equals("\u2254");
       yyValue = new com.sun.fortress.useful.Pair<Expr,Boolean>(a2, isMutable);
     };

/* AbsVarDecl ::=
     AbsVarMods? NoNewlineVarWTypes
   | AbsVarMods? BindIdOrBindIdTuple w : w NoNewlineType w ...
   | AbsVarMods? BindIdOrBindIdTuple w : w NoNewlineTupleType
 */
AbsVarDecl AbsVarDecl =
     a1:AbsVarMods? a2:NoNewlineVarWTypes
     { if (a1 != null) a2 = FortressUtil.setMods(a2, a1);
       FortressUtil.validId(a2);
       yyValue = new AbsVarDecl(createSpan(yyStart,yyCount), a2);
     }
   / a1:AbsVarMods? a2:BindIdOrBindIdTuple w colon w a3:NoNewlineType w ellipses
     { List<LValue> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1, a3, false);
       else            lvs = FortressUtil.ids2Lvs(a2, a3, false);
       FortressUtil.validId(lvs);
       yyValue = new AbsVarDecl(createSpan(yyStart,yyCount), lvs);
     }
   / a1:AbsVarMods? a2:BindIdOrBindIdTuple w colon w a3:NoNewlineTupleType
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       if (a2.size() != tys.size())
           syntaxError(span, "Mismatched numbers of variables and types.");
       List<LValue> lvs;
       if (a1 != null) lvs = FortressUtil.ids2Lvs(a2, a1, tys, false);
       else            lvs = FortressUtil.ids2Lvs(a2, tys, false);
       FortressUtil.validId(lvs);
       yyValue = new AbsVarDecl(span, lvs);
     };

/* Each modifier cannot appear more than once. */
/* AbsVarMods ::= (AbsVarMod w)+ */
transient List<Modifier> AbsVarMods = a1s:(AbsVarMod w)+
     { yyValue = FortressUtil.mkList(a1s.list());
       FortressUtil.noDuplicate(yyValue);
     };

/* AbsVarMod ::= var | AbsVarImmutableMod */
transient private Modifier AbsVarMod =
     a1:var  { yyValue = new ModifierVar(createSpan(yyStart,yyCount)); }
   / AbsVarImmutableMod ;

/* AbsVarImmutableMod ::= test */
transient private Modifier AbsVarImmutableMod =
     a1:test { yyValue = new ModifierTest(createSpan(yyStart,yyCount)); };
