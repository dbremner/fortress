/*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress expressions that do not include any newlines.
 */
module com.sun.fortress.parser.NoNewlineExpr(Expr, Keyword, Symbol, Spacing);

modify Expr;
import Keyword;
import Symbol;
import Spacing;

/* NoNewlineExpr ::=
     NoNewlineAssignExpr
   | NoNewlineOpExpr
   | DelimitedExpr
   | NoNewlineFlowExpr
   | fn w ValParam (w IsType)? (w Throws)? w => w NoNewlineExpr
   | NoNewlineExpr s as w Type
   | NoNewlineExpr s asif w Type
   NoNewlineFlowExpr ::=
     exit (w Id)? (w with w NoNewlineExpr)?
   | Accumulator (w [ w GeneratorList w ] w)? w NoNewlineExpr
   | atomic w NoNewlineAtomicBack
   | tryatomic w NoNewlineAtomicBack
   | spawn w NoNewlineExpr
   | throw w NoNewlineExpr
   NoNewlineAtomicBack ::=
     NoNewlineOpExpr
   | DelimitedExpr
   | NoNewlineAssignExpr
   NoNewlineAssignExpr ::= AssignLefts s AssignOp w NoNewlineExpr
 */
Expr NoNewlineExpr = Expr ;
private Expr Expr := ... ;
Expr ExprFront := ... ;
Expr NoNewlineAssignExpr =
    a1:AssignLefts s a2:AssignOp w a3:NoNewlineExpr
    { yyValue = new Assignment(createSpan(yyStart,yyCount), false, a1, a2, a3);};

Action<Expr> ExprTail :=
     <As> NoNewlineAs
   / <AsIf> NoNewlineAsIf
   ;

inline Action<Expr> NoNewlineAs =
     s as w a1:Type
     { yyValue = new Action<Expr>() {
           public Expr run(Expr base) {
               return new AsExpr(createSpan(yyStart,yyCount), false, (Expr)base, a1);
           }};
     };

inline Action<Expr> NoNewlineAsIf =
     s asif w a1:Type
     { yyValue = new Action<Expr>() {
           public Expr run(Expr base) {
               return new AsIfExpr(createSpan(yyStart,yyCount), false, (Expr)base, a1);
           }};
     };

/* NoNewlineOpExpr ::=
     NoNewlineOpExprNoEnc
   | NoNewlineOpExprLeftEncloser
   | Encloser
   NoNewlineOpExprNoEnc ::=
     NoNewlineOpExprPrimary
   | NoNewlineOpExprPrefix
   | Op
   NoNewlineTightInfixRight ::=
     Encloser NoNewlineOpExprPrimary
   | Encloser NoNewlineOpExprPrefix
   | Encloser sr NoNewlineOpExprPrimary
   | Encloser sr NoNewlineLooseInfix
   | Encloser sr NoNewlineLeftLooseInfix
   | Encloser
 */
PureList<PrecedenceOpExpr> TightInfixRight := ...
   / <Primary>   a1:Encloser sr a2:OpExprPrimary
     { yyValue = a2.cons((PrecedenceOpExpr)new Right(a1)); }
   / <Loose>     a1:Encloser sr a2:LooseInfix
     { yyValue = a2.cons((PrecedenceOpExpr)new Right(a1)); }
   / <LeftLoose> a1:Encloser sr a2:LeftLooseInfix
     { yyValue = a2.cons((PrecedenceOpExpr)new Right(a1)); };

/* NoNewlineLeftLooseInfix ::=
     NoNewlineOpExprLeftEncloser
   | Encloser sr NoNewlineOpExprPrimary
   | Encloser sr NoNewlineOpExprPrefix
   | Encloser sr NoNewlineOpExprLeftEncloser
 */
PureList<PrecedenceOpExpr> LeftLooseInfix := ...
   / <Primary> a1:Encloser sr a2:OpExprPrimary
     { yyValue = a2.cons((PrecedenceOpExpr)new LooseInfix(a1)); }
   / <Prefix>  a1:Encloser sr a2:OpExprPrefix
     { yyValue = a2.cons((PrecedenceOpExpr)new LooseInfix(a1)); }
   / <Left>    a1:Encloser sr a2:OpExprLeftEncloser
     { yyValue = a2.cons((PrecedenceOpExpr)new LooseInfix(a1)); };

/* NoNewlineOpExprLeftEncloser ::= Encloser NoNewlineOpExprNoEnc */
/* NoNewlineOpExprPrimary ::=
     Primary NoNewlineTightInfixPostfix
   | Primary NoNewlineTightInfixRight
   | Primary sr NoNewlineOpExprPrimary
   | Primary sr NoNewlineLooseInfix
   | Primary sr NoNewlineLeftLooseInfix
   | Primary
 */
PureList<PrecedenceOpExpr> OpExprPrimary := ...
   / <Primary>   a1:Primary sr a2:OpExprPrimary
     { yyValue = a2.cons(new RealExpr(FortressUtil.buildPrimary(a1))); }
   / <Loose>     a1:Primary sr a2:LooseInfix
     { yyValue = a2.cons(new RealExpr(FortressUtil.buildPrimary(a1))); }
   / <LeftLoose> a1:Primary sr a2:LeftLooseInfix
     { yyValue = a2.cons(new RealExpr(FortressUtil.buildPrimary(a1))); };

/* NoNewlineOpExprPrefix ::=
     Op NoNewlineOpExprPrimary
   | Op NoNewlineOpExprPrefix
   | Op NoNewlineOpExprLeftEncloser
   | Op sr NoNewlineOpExprPrimary
   | Op sr NoNewlineOpExprPrefix
   | Op sr NoNewlineOpExprLeftEncloser
 */
PureList<PrecedenceOpExpr> OpExprPrefix := ...
   / <Primary> a1:Op sr a2:OpExprPrimary
     { yyValue = a2.cons((PrecedenceOpExpr)new Prefix(a1)); }
   / <Prefix>  a1:Op sr a2:OpExprPrefix
     { yyValue = a2.cons((PrecedenceOpExpr)new Prefix(a1)); }
   / <Left>    a1:Op sr a2:OpExprLeftEncloser
     { yyValue = a2.cons((PrecedenceOpExpr)new Prefix(a1)); };

/* NoNewlineTightInfixPostfix ::=
     Op NoNewlineOpExprPrimary
   | Op NoNewlineOpExprPrefix
   | Op NoNewlineOpExprLeftEncloser
   | Op sr NoNewlineOpExprPrimary
   | Op sr NoNewlineOpExprPrefix
   | Op sr NoNewlineOpExprLeftEncloser
   | Op
 */
PureList<PrecedenceOpExpr> TightInfixPostfix := ...
   / <Primary> a1:Op sr a2:OpExprPrimary
     { yyValue = a2.cons((PrecedenceOpExpr)new Postfix(a1)); }
   / <Prefix>  a1:Op sr a2:OpExprPrefix
     { yyValue = a2.cons((PrecedenceOpExpr)new Postfix(a1)); }
   / <Left>    a1:Op sr a2:OpExprLeftEncloser
     { yyValue = a2.cons((PrecedenceOpExpr)new Postfix(a1)); };

/* NoNewlineLooseInfix ::=
     Op wr NoNewlineOpExprPrimary
   | Op wr NoNewlineOpExprPrefix
   | Op sr NoNewlineOpExprLeftEncloser
 */
PureList<PrecedenceOpExpr> LooseInfix := ...
   / <Left> a1:Op sr a2:OpExprLeftEncloser
     { yyValue = a2.cons((PrecedenceOpExpr)new LooseInfix(a1)); };

/* NoNewlineGeneratorList ::= NoNewlineGenerator (s , w NoNewlineGenerator)*
   NoNewlineGenerator ::=
     Id w <- w NoNewlineExpr
   | ( w Id w , w IdList w ) w <- w NoNewlineExpr
   | NoNewlineExpr
 */
List<Generator> GeneratorList := a1:Generator a2s:(s comma w Generator)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };
List<Generator> NoNewlineGeneratorList = GeneratorList ;
