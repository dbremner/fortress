/*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress local declarations.
 */
module com.sun.fortress.parser.LocalDecl(Variable, Header, NoNewlineType,
                                         NoNewlineExpr, DelimitedExpr, Identifier,
                                         Keyword, Symbol, Spacing);
import Variable;
import Header;
import NoNewlineType;
import NoNewlineExpr;
import DelimitedExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* BlockElems ::=
     BlockElem br BlockElems
   | BlockElem (w ;)?
 */
Block BlockElems =
     a1:BlockElemCollection
     { yyValue = ExprFactory.doBlock(writer, a1); };

private List<Expr> BlockElemCollection =
     a1:BlockElem br a2:BlockElemCollection
     { yyValue = Useful.cons(a1, a2); }
   / a1:BlockElem w semicolon
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen)
     { yyValue = Useful.list(a1); }
   / a1:BlockElem
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen)
     { yyValue = Useful.list(a1); }
   / a1:BlockElem &(w Else / br CaseClause / br TypecaseTypes / br CaseElse)
     { yyValue = Useful.list(a1); }
   / a1:BlockElem w semicolon  &(w Else)
     { yyValue = Useful.list(a1); };

/* BlockElem ::=
     LocalVarFnDecl
   | NoNewlineExpr (s , w NoNewlineGeneratorClauseList)?
 */
private Expr BlockElem =
     LocalVarFnDecl
   / a1:NoNewlineExpr a2:(s comma w NoNewlineGeneratorClauseList)?
     { if (a2 == null) yyValue = a1;
       else yyValue = ExprFactory.makeFor(createSpan(yyStart,yyCount),
                                          a2, ExprFactory.makeBlock(a1));
     };

/* LocalVarFnDecl ::=
     LocalFnDecl (br LocalFnDecl)*
   | LocalVarDecl
 */
private LetExpr LocalVarFnDecl =
     a1:LocalFnDecl a2s:(br LocalFnDecl)*
     { List<FnDecl> fns = Useful.cons(a1, a2s.list());
       yyValue = ExprFactory.makeLetFn(createSpan(yyStart,yyCount),
                           Collections.<Expr>emptyList(), fns);
     }
   / LocalVarDecl ;

/* LocalFnDecl ::= Mods? NamedFnHeaderFront FnHeaderClause w = w NoNewlineExpr */
private FnDecl LocalFnDecl =
     a1:Mods? a2:Id a3:(w StaticParams)? w a4:ValParam a5:FnHeaderClause w equals
     w a6:NoNewlineExpr
     { if (a1 == null) a1 = Modifiers.None;
       if (a3 == null) a3 = Collections.<StaticParam>emptyList();
       FnHeaderFront hd = new FnHeaderFront(a2, a3, a4);
       yyValue = NodeFactory.mkFnDecl(createSpan(yyStart,yyCount),a1,hd,a5,a6);
     };

transient List<Param> ValParam =
     openparen a1:(w Params)? w closeparen
     { if (a1 == null) yyValue = Collections.<Param>emptyList();
       else            yyValue = a1;
     }
   / a1:BindId
     { yyValue = Useful.list(NodeFactory.makeParam(a1)); };

/* Params ::=
     (Param w , w)* (Varargs w , w)? Keyword (w , w Keyword)*
   | (Param w , w)*  Varargs
   |  Param (w , w Param)*
 */
transient List<Param> Params =
     <ErrorProduction1>
     (Param w comma w)+ (Keyword w comma w)+ Varargs
     { log(createSpan(yyStart,yyCount),
           "Varargs parameters should come before keyword parameters.");
       yyValue = Collections.<Param>emptyList();
     }
   / <ErrorProduction2>
     Varargs w comma w (Keyword w comma w)+ Param (w comma w Param)*
     { log(createSpan(yyStart,yyCount),
           "Normal parameters should come before varargs parameters and keyword parameters.");
       yyValue = Collections.<Param>emptyList();
     }
   / <ErrorProduction3>
     Varargs (w comma w Param)+ (w comma w Keyword)*
     { log(createSpan(yyStart,yyCount),
           "Normal parameters should come before varargs parameters.");
       yyValue = Collections.<Param>emptyList();
     }
   / a1s:(Param w comma w)* a2:(Varargs w comma w)? a3:Keyword
       a4s:(w comma w Keyword)*
     { yyValue = Useful.list(a1s.list());
       if (a2 != null) yyValue.add(a2);
       yyValue.add(a3);
       yyValue.addAll(a4s.list());
     }
   / a1s:(Param w comma w)* a2:Varargs
     { yyValue = Useful.list(a1s.list(), a2); }
   / a1:Param a2s:(w comma w Param)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/* Param ::= BindId (w IsType)? */
transient Param Param =
     a1:BindId a2:(s void:colon s NoNewlineType)?
     { if (a2 != null) yyValue = NodeFactory.makeParam(a1, a2);
       else            yyValue = NodeFactory.makeParam(a1);
     };

/* Varargs ::= BindId s : s NoNewlineType s ... */
transient Param Varargs = a1:BindId s colon s a2:NoNewlineType s ellipses
     { yyValue = NodeFactory.makeVarargsParam(a1, a2); };

/* Keyword ::= Param s = w NoNewlineExpr */
transient Param Keyword = a1:Param s equals w a2:NoNewlineExpr
     { yyValue = NodeFactory.makeParam(a1, a2); };

/* LocalVarDecl ::=
     (var w)? LocalVarMayTypes s = w NoNewlineExpr
   | (var w)? NoNewlineLocalVarWTypes s := w NoNewlineExpr
   | (var w)? NoNewlineLocalVarWTypes
   |       LocalVarWoTypes s = w NoNewlineExpr
   | (var w)? LocalVarWoTypes s : s Type s ... (s InitVal)?
   | (var w)? LocalVarWoTypes s : s NoNewlineTupleType (s InitVal)?
   NoNewlineLocalVarWTypes ::=
     NoNewlineLocalVarWType
   | ( w NoNewlineLocalVarWType (w , w NoNewlineLocalVarWType)+ w )
   NoNewlineLocalVarWType ::= BindId s : s NoNewlineType
   LocalVarMayTypes ::=
     LocalVarMayType
   | ( w LocalVarMayType (w , w LocalVarMayType)+ w )
   LocalVarMayType ::= BindId (s : s NoNewlineType)?
   LocalVarWoTypes ::=
     LocalVarWoType
   | ( w LocalVarWoType (w , w LocalVarWoType)+ w )
   LocalVarWoType ::=
     BindId
   | Unpasting
 */
LocalVarDecl LocalVarDecl =
     a1:Mods? a2:VarMayTypes s equals w a3:NoNewlineExpr
     { a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1), false);
       yyValue = ExprFactory.makeLocalVarDecl(createSpan(yyStart,yyCount), a2, a3);
     }
   / a1:Mods? a2:NoNewlineVarWTypes s colonequals w a3:NoNewlineExpr
     { a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1), true);
       yyValue = ExprFactory.makeLocalVarDecl(createSpan(yyStart,yyCount), a2, a3);
     }
   / a1:Mods? a2:NoNewlineVarWTypes
     { a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1), false);
       yyValue = ExprFactory.makeLocalVarDecl(createSpan(yyStart,yyCount), a2);
     }
   / a1:VarWoTypes s equals w a2:NoNewlineExpr
     { yyValue = ExprFactory.makeLocalVarDecl(createSpan(yyStart,yyCount),a1,a2); }
   / a1:Mods? a2:VarWoTypes s colon s a3:NoNewlineType s ellipses a4:(s InitVal)?
     { Option<Expr> init;
       if ( a4 != null ) {
           init = Option.<Expr>some(a4.getA());
           a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1),
                                    Option.<Type>some(a3), a4.getB());
       } else {
           init = Option.<Expr>none();
           a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1),
                                    Option.<Type>some(a3), false);
       }
       yyValue = ExprFactory.makeLocalVarDecl(createSpan(yyStart,yyCount), a2,
                                             init);
     }
   / a1:Mods? a2:VarWoTypes s colon s a3:NoNewlineTupleType a4:(s InitVal)?
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       if (a2.size() != tys.size())
           log(span, "Mismatched numbers of variables and types.");
       Option<Expr> init;
       if ( a4 != null ) {
           init = Option.<Expr>some(a4.getA());
           a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1), tys, a4.getB());
       } else {
           init = Option.<Expr>none();
           a2 = NodeFactory.makeLvs(writer, a2, Option.<Modifiers>wrap(a1), tys, false);
       }
       yyValue = ExprFactory.makeLocalVarDecl(span, a2, init);
     };

/* VarMayTypes ::=
     VarMayType
   | ( w VarMayType (w , w VarMayType)+ w )
 */
List<LValue> VarMayTypes =
     a1:VarMayType
     { yyValue = Useful.list(a1); }
   / openparen w a1:VarMayType a2s:(w comma w VarMayType)+ w closeparen
     { yyValue = Useful.cons(a1, a2s.list()); };

/* VarMayType ::= BindId (s : s NoNewlineType)? */
LValue VarMayType = a1:BindId a2:(s void:colon s NoNewlineType)?
     { if (a2 == null)
           yyValue = NodeFactory.makeLValue(createSpan(yyStart,yyCount),a1);
       else
           yyValue = NodeFactory.makeLValue(createSpan(yyStart,yyCount),a1,a2);
     };

/* VarWoTypes ::=
     VarWoType
   | ( w VarWoType (w , w VarWoType)+ w )
 */
List<LValue> VarWoTypes =
     a1:VarWoType
     { yyValue = Useful.list(a1); }
   / openparen w a1:VarWoType a2s:(w comma w VarWoType)+ w closeparen
     { yyValue = Useful.cons(a1, a2s.list()); };

LValue VarWoType =
     a1:BindId
     { yyValue = NodeFactory.makeLValue(createSpan(yyStart,yyCount), a1); }
   / Unpasting
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeLValue(span, NodeFactory.makeId(span, "_"));
     };

/* Unpasting ::= [ w UnpastingElems w ] */
private void Unpasting =
     void:opensquare w UnpastingElems w void:closesquare ;

/* UnpastingElems ::=
     UnpastingElem RectSeparator UnpastingElems
   | UnpastingElem
 */
private void UnpastingElems =
     UnpastingElem RectSeparator UnpastingElems
   / UnpastingElem ;

/* UnpastingElem ::=
     BindId (w [ w UnpastingDim w ])?
   | Unpasting
 */
private void UnpastingElem =
     BindId (void:opensquare w UnpastingDim w void:closesquare)?
   / Unpasting ;

// NoNewlineExtentRange instead of ExtnetRange
// due to the Rats! module system
/* UnpastingDim ::= NoNewlineExtentRange (w BY w NoNewlineExtentRange)+  */
private void UnpastingDim =
     NoNewlineExtentRange (w cross w NoNewlineExtentRange)+ ;

/* CaseClause ::= NoNewlineExpr w => w BlockElems */
CaseClause CaseClause = a1:NoNewlineExpr w match w a2:BlockElems
     { yyValue = NodeFactory.makeCaseClause(createSpan(yyStart,yyCount), a1, a2,
                                            Option.<FunctionalRef>none());
     };
