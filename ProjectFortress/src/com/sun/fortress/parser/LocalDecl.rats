/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress local declarations.
 */
module com.sun.fortress.parser.LocalDecl(Variable, Function, Param, Header,
                                         NoNewlineType, NoNewlineExpr,
                                         DelimitedExpr, Identifier, Keyword,
                                         Symbol, Spacing);
modify Variable;
import Function;
import Param;
import Header;
import NoNewlineType;
import NoNewlineExpr;
import DelimitedExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* BlockElems ::=
     BlockElem br BlockElems
   | BlockElem (w ;)?
 */
Block BlockElems =
     a1:BlockElemCollection
     { yyValue = FortressUtil.doBlock(a1); };

private List<Expr> BlockElemCollection =
     a1:BlockElem br a2:BlockElemCollection
     { yyValue = FortressUtil.mkList(a1, a2); }
   / a1:BlockElem w semicolon
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen)
     { yyValue = FortressUtil.mkList(a1); }
   / a1:BlockElem
     &(w elif / w also / w end / w catch / w forbid / w finally / w closeparen)
     { yyValue = FortressUtil.mkList(a1); }
   / a1:BlockElem &(w Else / br CaseClause / br TypecaseTypes / br CaseElse)
     { yyValue = FortressUtil.mkList(a1); }
   / a1:BlockElem w semicolon  &(w Else)
     { yyValue = FortressUtil.mkList(a1); };

/* BlockElem ::=
     LocalVarFnDecl
   | NoNewlineExpr (s , w NoNewlineGeneratorClauseList)?
 */
private Expr BlockElem =
     LocalVarFnDecl
   / a1:NoNewlineExpr a2:(s comma w NoNewlineGeneratorClauseList)?
     { if (a2 == null) yyValue = a1;
       else yyValue = new For(createSpan(yyStart,yyCount), false,
                              a2, ExprFactory.makeBlock(a1));
     };

/* LocalVarFnDecl ::=
     LocalFnDecl (br LocalFnDecl)*
   | LocalVarDecl
 */
private LetExpr LocalVarFnDecl =
     a1:LocalFnDecl a2s:(br LocalFnDecl)*
     { List<FnDecl> fns = FortressUtil.mkList(a1, a2s.list());
       yyValue = new LetFn(createSpan(yyStart,yyCount), false,
                           FortressUtil.emptyExprs(), fns);
     }
   / LocalVarDecl ;

/* LocalFnDecl ::= Mods? NamedFnHeaderFront FnHeaderClause w = w NoNewlineExpr */
private FnDecl LocalFnDecl =
     a1:Mods? a2:NamedFnHeaderFront a3:FnHeaderClause w equals w a4:NoNewlineExpr
     { if (a1 == null) a1 = FortressUtil.emptyModifiers();
       yyValue = FortressUtil.mkFnDecl(createSpan(yyStart,yyCount),a1,a2,a3,a4);
     };

/* LocalVarDecl ::=
     (var w)? LocalVarMayTypes s = w NoNewlineExpr
   | (var w)? NoNewlineLocalVarWTypes s := w NoNewlineExpr
   | (var w)? NoNewlineLocalVarWTypes
   |          LocalVarWoTypes s = w NoNewlineExpr
   | (var w)? LocalVarWoTypes s : s Type s ... (s InitVal)?
   | (var w)? LocalVarWoTypes s : s NoNewlineTupleType (s InitVal)?
   NoNewlineLocalVarWTypes ::=
     NoNewlineLocalVarWType
   | ( w NoNewlineLocalVarWType (w , w NoNewlineLocalVarWType)+ w )
   NoNewlineLocalVarWType ::= BindId s : s NoNewlineType
   LocalVarMayTypes ::=
     LocalVarMayType
   | ( w LocalVarMayType (w , w LocalVarMayType)+ w )
   LocalVarMayType ::= BindId (s : s NoNewlineType)?
   LocalVarWoTypes ::=
     LocalVarWoType
   | ( w LocalVarWoType (w , w LocalVarWoType)+ w )
   LocalVarWoType ::=
     BindId
   | Unpasting
 */
LocalVarDecl LocalVarDecl =
     a1:(var w)? a2:VarMayTypes s equals w a3:NoNewlineExpr
     { if (a1 != null) {
           FortressUtil.allHaveTypes(a2);
           a2 = FortressUtil.setMutable(a2, createSpan(yyStart,3));
       }
       yyValue = FortressUtil.mkLocalVarDecl(createSpan(yyStart,yyCount), a2, a3);
     }
   / a1:(var w)? a2:NoNewlineVarWTypes s colonequals w a3:NoNewlineExpr
     { a2 = FortressUtil.setMutable(a2, createSpan(yyStart,3));
       yyValue = FortressUtil.mkLocalVarDecl(createSpan(yyStart,yyCount), a2, a3);
     }
   / a1:(var w)? a2:NoNewlineVarWTypes
     { if (a1 != null) a2 = FortressUtil.setMutable(a2, createSpan(yyStart,3));
       yyValue = FortressUtil.mkLocalVarDecl(createSpan(yyStart,yyCount), a2);
     }
   / a1:VarWoTypes s equals w a2:NoNewlineExpr
     { yyValue = FortressUtil.mkLocalVarDecl(createSpan(yyStart,yyCount),a1,a2); }
   / a1:(var w)? a2:VarWoTypes s colon s a3:NoNewlineType s ellipses a4:(s InitVal)?
     { Option<Expr> init;
       if (a1 != null) {
           a2 = FortressUtil.setMutableAndType(a2, createSpan(yyStart,3), a3);
           if (a4 == null) init = Option.none();
           else            init = Option.some(a4.getA());
       } else {
           if (a4 == null) {
               init = Option.none();
               a2 = FortressUtil.setType(a2, a3);
           } else {
               init = Option.some(a4.getA());
               if (a4.getB()) a2 = FortressUtil.setMutableAndType(a2, a3);
               else a2 = FortressUtil.setType(a2, a3);
           }
       }
       yyValue = FortressUtil.mkLocalVarDecl(createSpan(yyStart,yyCount), a2,
                                             init);
     }
   / a1:(var w)? a2:VarWoTypes s colon s a3:NoNewlineTupleType a4:(s InitVal)?
     { Span span = createSpan(yyStart,yyCount);
       List<Type> tys = a3.getElements();
       Option<Expr> init;
       if (a2.size() != tys.size())
           syntaxError(span, "Mismatched numbers of variables and types.");
       if (a1 != null) {
           a2 = FortressUtil.setMutableAndType(a2, createSpan(yyStart,3), tys);
           if (a4 == null) init = Option.none();
           else            init = Option.some(a4.getA());
       } else {
           if (a4 == null) {
               init = Option.none();
               a2 = FortressUtil.setType(a2, tys);
           } else {
               init = Option.some(a4.getA());
               if (a4.getB()) a2 = FortressUtil.setMutableAndType(a2, tys);
               else a2 = FortressUtil.setType(a2, tys);
           }
       }
       yyValue = FortressUtil.mkLocalVarDecl(span, a2, init);
     }
   / <ErrorProduction> var w VarWoTypes s equals w NoNewlineExpr
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Mutable variables should be declared with their types.");
     };

LValue VarMayType := a1:BindId a2:(s void:colon s NoNewlineType)?
     { if (a2 == null)
           yyValue = FortressUtil.mkLValue(createSpan(yyStart,yyCount),a1);
       else
           yyValue = FortressUtil.mkLValue(createSpan(yyStart,yyCount),a1,a2);
     };

/* VarWoTypes ::=
     VarWoType
   | ( w VarWoType (w , w VarWoType)+ w )
 */
List<LValue> VarWoTypes =
     a1:VarWoType
     { yyValue = FortressUtil.mkList(a1); }
   / openparen w a1:VarWoType a2s:(w comma w VarWoType)+ w closeparen
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

LValue VarWoType =
     a1:BindId
     { yyValue = FortressUtil.mkLValue(createSpan(yyStart,yyCount), a1); }
   / Unpasting
     { Span span = createSpan(yyStart,yyCount);
       yyValue = FortressUtil.mkLValue(span, new Id(span, "_"));
     };

/* Unpasting ::= [ w UnpastingElems w ] */
private void Unpasting =
     void:opensquare w UnpastingElems w void:closesquare ;

/* UnpastingElems ::=
     UnpastingElem RectSeparator UnpastingElems
   | UnpastingElem
 */
private void UnpastingElems =
     UnpastingElem RectSeparator UnpastingElems
   / UnpastingElem ;

/* UnpastingElem ::=
     BindId (w [ w UnpastingDim w ])?
   | Unpasting
 */
private void UnpastingElem =
     BindId (void:opensquare w UnpastingDim w void:closesquare)?
   / Unpasting ;

// NoNewlineExtentRange instead of ExtnetRange
// due to the Rats! module system
/* UnpastingDim ::= NoNewlineExtentRange (w BY w NoNewlineExtentRange)+  */
private void UnpastingDim =
     NoNewlineExtentRange (w cross w NoNewlineExtentRange)+ ;

/* CaseClause ::= NoNewlineExpr w => w BlockElems */
CaseClause CaseClause = a1:NoNewlineExpr w match w a2:BlockElems
     { yyValue = new CaseClause(createSpan(yyStart,yyCount), a1, a2); };
