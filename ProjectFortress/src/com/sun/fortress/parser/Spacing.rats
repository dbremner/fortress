/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress spacing including comments.
 *
 * Whitespace Convention in grammar productions:
 * Every production which can be empty "owns" its leading whitespace.
 * Exception: Modifiers own their trailing whitespace.
 */
module com.sun.fortress.parser.Spacing(Symbol);

import Symbol;

transient void EndOfFile  = !_ ;
transient private void Whitespace =
     Space
   / InvalidSpace
   / Newline ;
transient private void Space      =
     void: " "
   / void: "\f"
   / InvalidSpace
   / NoNewlineComment ;
transient private void InvalidSpace =
     <ErrorProduction1> ("\t" / "\u000b")
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Tab characters are not allowed in Fortress programs except in comments.");
     }
   / <ErrorProduction2> ("\u001c" / "\u001d" / "\u001e" / "\u001f")
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "An invalid whitespace character is used.");
     };
transient private void Newline    = void:"\r\n" / void:"\r" / void:"\n" / NewlineComment ;
private void Comment    =
     a1:"(*" CommentContents a3:"*)"
   / <ErrorProduction> "(*" CommentContents w EndOfFile
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Unbalanced comment: '*)' is expected.");
     };

private void NoNewlineComment    =
     a1:"(*" NNCommentContents a3:"*)"
   / <ErrorProduction> "(*" CommentContents w EndOfFile
     { yyValue = syntaxError(createSpan(yyStart,yyCount),
                             "Unbalanced comment: '*)' is expected.");
     };

transient private void CommentContents =
     CommentContent*;

transient private void NNCommentContents =
     NNCommentContent*;

transient private void CommentContent =
     Comment
   / c:'*' !')'
   / c:_ &{c != '*'}
   ;

transient private void NNCommentContent =
     NoNewlineComment
   / c:'*' !')'
   / c:_ &{c != '*' && c != '\n' && c != '\r'}
   ;

transient private void NewlineComment = Comment;

transient void w  = Whitespace*; // whitespace optional
transient void wr = Whitespace+; // whitespace required

transient void s  = Space*;      // space optional
transient void sr = Space+;      // space required

transient void nl = s Newline w ; // required newline in whitespace
transient void br = nl / s semicolon w;      // line break

/* RectSeparator ::= (w ;)+ w / nl / sr */
transient Integer RectSeparator =
     a1s:(w semicolon)+ w { yyValue = a1s.size() + 1; }
   / nl                   { yyValue = 2; }
   / sr                   { yyValue = 1; };
