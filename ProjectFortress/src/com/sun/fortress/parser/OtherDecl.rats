 /*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress dimension, unit, type alias, test, property, and
 * external syntax declarations.
 */
module com.sun.fortress.parser.OtherDecl(Param, Header, Type, NoNewlineExpr,
                                         Identifier, Keyword, Symbol, Spacing);

import Param;
import Header;
import Type;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* DimUnitDecl ::=
     dim w Id (w = w DimExpr)? s (unit | SI_unit) w Id (wr Id)* (w = w NoNewlineExpr)?
   | dim w Id (w = w DimExpr)? (w default w Id)?
   | (unit | SI_unit) w Id (wr Id)* (w : w DimExpr)? (w = w NoNewlineExpr)?
 */
DimUnitDecl DimUnitDecl =
     dim w a1:Id a2:(w void:equals w DimExpr)? s a3:(unit / SI_unit) w a4:Id
     a5s:(wr Id)* a6:(w void:equals w NoNewlineExpr)?
     { Option<DimExpr> derived = Option.wrap(a2);
       List<Id> ids = new ArrayList<Id>();
       ids.add(a4);
       for (Id a5Elt : a5s.list()) { ids.add(a5Elt); }
       Option<Expr> def = Option.wrap(a6);
       yyValue = NodeFactory.makeDimUnitDecl(createSpan(yyStart,yyCount), a1,
                                             derived, a3, ids, def);
     }
   / dim w a1:Id a2:(w void:equals w DimExpr)? a3:(w default w Id)?
     { Option<DimExpr> derived = Option.wrap(a2);
       Option<Id> defaultId = (a3 == null) ?
           Option.<Id>none() : Option.some(a3);
       yyValue = NodeFactory.makeDimUnitDecl(createSpan(yyStart,yyCount), a1,
                                             derived, defaultId);
     }
   / a1:(unit / SI_unit) w a2:Id a3s:(wr Id)* a4:(w void:colon w DimExpr)?
     a5:(w void:equals w NoNewlineExpr)?
     { Option<DimExpr> derived = Option.wrap(a4);
       List<Id> ids = new ArrayList<Id>();
       ids.add(a2);
       for (Id a3Elt : a3s.list()) { ids.add(a3Elt); }
       Option<Expr> def = Option.wrap(a5);
       yyValue = NodeFactory.makeDimUnitDecl(createSpan(yyStart,yyCount),
                                             derived, a1, ids, def);
     };

/* TypeAlias ::= type w Id (w StaticParams)? w = w Type */
TypeAlias TypeAlias = type w a1:Id a2:(w StaticParams)? w equals w a3:Type
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new TypeAlias(createSpan(yyStart,yyCount), a1, a2, a3);
     };

/* TestDecl ::= test w Id w [ w GeneratorClauseList w ] w = w NoNewlineExpr */
TestDecl TestDecl =
     test w a1:Id w opensquare w a2:GeneratorClauseList w closesquare w equals w
     a3:NoNewlineExpr
     { yyValue = new TestDecl(createSpan(yyStart,yyCount), a1, a2, a3); };

/* PropertyDecl ::=
     property (w Id w =)? (w FORALL w ValParam)? w NoNewlineExpr
 */
PropertyDecl PropertyDecl =
     property a1:(w Id w void:equals)? a2:(w FORALL w ValParam)? w
     a3:NoNewlineExpr
     { Option<Id> id = (a1 == null) ? Option.<Id>none() : Option.some(a1);
       if (a2 == null) a2 = FortressUtil.emptyParams();
       yyValue = new PropertyDecl(createSpan(yyStart,yyCount), id, a2, a3);
     };

/* ExternalSyntax ::=
     syntax w OpenExpander w Id w CloseExpander w = w NoNewlineExpr
 */
ExternalSyntax ExternalSyntax =
     syntax w a1:OpenExpander w a2:Id w a3:CloseExpander w equals w
     a4:NoNewlineExpr
     { yyValue = new ExternalSyntax(createSpan(yyStart,yyCount),a1,a2,a3,a4); };

/* OpenExpander ::= Id | LeftEncloser | Encloser */
SimpleName OpenExpander = Id / LeftEncloser / Encloser ;

/* CloseExpander ::= Id | RightEncloser | Encloser | end */
SimpleName CloseExpander =
     Id
   / RightEncloser
   / Encloser
   / end
     { Span span = createSpan(yyStart,yyCount);
       yyValue = new Id(span, "end");
     };

/* AbsExternalSyntax ::= syntax w OpenExpander w Id w CloseExpander */
AbsExternalSyntax AbsExternalSyntax =
     syntax w a1:OpenExpander w a2:Id w a3:CloseExpander
     { yyValue = new AbsExternalSyntax(createSpan(yyStart,yyCount),a1,a2,a3); };
