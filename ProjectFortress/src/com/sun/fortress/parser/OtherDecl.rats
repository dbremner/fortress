/*******************************************************************************
    Copyright 2009 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress dimension, unit, type alias, test, and property
 * declarations.
 */
module com.sun.fortress.parser.OtherDecl(Param, Header, NoNewlineType,
                                         NoNewlineExpr, Identifier, Keyword,
                                         Symbol, Spacing);

import Param;
import Header;
import NoNewlineType;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* DimUnitDecl ::=
     dim w Id (w = w NoNewlineType)? s (unit | SI_unit) w Id (wr Id)*
         (w = w NoNewlineExpr)?
   | dim w Id (w = w NoNewlineType)? (w default w Id)?
   | (unit | SI_unit) w Id (wr Id)* (w : w NoNewlineType)? (w = w NoNewlineExpr)?
 */
List<DimUnitDecl> DimUnitDecl =
     dim w a1:IdOrOpName a2:(w void:equals w NoNewlineType)? s a3:(unit / SI_unit) w
     a4:IdOrOpName a5s:(wr Id)* a6:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       DimDecl dim;
       Type ty;
       boolean si_unit;
       if (a3.equals("SI_unit")) si_unit = true;
       else                      si_unit = false;
       List<Id> ids = new ArrayList<Id>();
       for (Id a5Elt : a5s.list()) { ids.add(a5Elt); }
       if ( a1 instanceof Id ) {
           dim = NodeFactory.makeDimDecl(span, (Id)a1, Option.<Type>wrap(a2));
           ty = NodeFactory.makeVarType(NodeUtil.getSpan(a1), (Id)a1);
       } else {
           log(span, a1 + " is not a valid dimension name.");
           Id id = NodeFactory.bogusId(span);
           dim = NodeFactory.makeDimDecl(span, id, Option.<Type>wrap(a2));
           ty = NodeFactory.makeVarType(NodeUtil.getSpan(a1), id);
       }
       if ( a4 instanceof Id ) {
           ids.add((Id)a4);
       } else {
           log(span, a4 + " is not a valid unit name.");
           ids.add(NodeFactory.bogusId(span));
       }
       UnitDecl unit = NodeFactory.makeUnitDecl(span, si_unit, ids,
                                                Option.<Type>some(ty),
                                                Option.<Expr>wrap(a6));
       yyValue = Useful.list(dim, unit);
     }
   / dim w a1:IdOrOpName a2:(w void:equals w NoNewlineType)?
     a3:(w default w IdOrOpName)?
     { Span span = createSpan(yyStart,yyCount);
       DimDecl dim;
       Id dimId;
       Id unitId;
       if ( a1 instanceof Id ) {
           dimId = (Id)a1;
       } else {
           log(span, a1 + " is not a valid dimension name.");
           dimId = NodeFactory.bogusId(span);
       }
       if ( a3 instanceof Id ) {
           unitId = (Id)a3;
       } else {
           log(span, a3 + " is not a valid unit name.");
           unitId = NodeFactory.bogusId(span);
       }
       dim = NodeFactory.makeDimDecl(span, dimId, Option.<Type>wrap(a2),
                                     Option.<Id>wrap(unitId));
       yyValue = Useful.list((DimUnitDecl)dim);
     }
   / a1:(unit / SI_unit) w a2:IdOrOpName a3s:(wr Id)*
     a4:(w void:colon w NoNewlineType)? a5:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       boolean si_unit;
       if (a1.equals("SI_unit")) si_unit = true;
       else                      si_unit = false;
       List<Id> ids = new ArrayList<Id>();
       if ( a2 instanceof Id )
           ids.add((Id)a2);
       else {
           log(span, a2 + " is not a valid unit name.");
           ids.add(NodeFactory.bogusId(span));
       }
       for (Id a3Elt : a3s.list()) { ids.add(a3Elt); }
       UnitDecl unit = NodeFactory.makeUnitDecl(span, si_unit, ids,
                                                Option.<Type>wrap(a4),
                                                Option.<Expr>wrap(a5));
       yyValue = Useful.list((DimUnitDecl)unit);
     };

/* TypeAlias ::= type w Id (w StaticParams)? w = w NoNewlineType */
TypeAlias TypeAlias =
     type w a1:IdOrOpName a2:(w StaticParams)? w equals w a3:NoNewlineType
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<StaticParam>emptyList();
       Id id;
       if ( a1 instanceof Id )
           id = (Id)a1;
       else {
           log(span, a1 + " is not a valid type name.");
           id = NodeFactory.bogusId(span);
       }
       yyValue = NodeFactory.makeTypeAlias(span, id, a2, a3);
     };

/* TestDecl ::= test w Id w [ w GeneratorClauseList w ] w = w NoNewlineExpr */
TestDecl TestDecl =
     test w a1:IdOrOpName w opensquare w a2:GeneratorClauseList w closesquare w
     equals w a3:NoNewlineExpr
     { Span span = createSpan(yyStart,yyCount);
       Id id;
       if ( a1 instanceof Id )
           id = (Id)a1;
       else {
           log(span, a1 + " is not a valid test name.");
           id = NodeFactory.bogusId(span);
       }
       yyValue = NodeFactory.makeTestDecl(span, id, a2, a3);
     };

/* PropertyDecl ::=
     property (w Id w =)? (w FORALL w ValParam)? w NoNewlineExpr
 */
PropertyDecl PropertyDecl =
     property a1:(w IdOrOpName w void:equals)? a2:(w FORALL w ValParam)? w
     a3:NoNewlineExpr
     { Span span = createSpan(yyStart,yyCount);
       Option<Id> id;
       if ( a1 == null )
           id = Option.<Id>none();
       else {
           if ( a1 instanceof Id )
               id = Option.<Id>some((Id)a1);
           else {
               log(span, a1 + " is not a valid test name.");
               id = Option.<Id>none();
           }
       }
       if (a2 == null) a2 = Collections.<Param>emptyList();
       yyValue = NodeFactory.makePropertyDecl(createSpan(yyStart,yyCount),
                                              id, a2, a3);
     };
