 /*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress dimension, unit, type alias, test, and property
 * declarations.
 */
module com.sun.fortress.parser.OtherDecl(Param, Header, NoNewlineType,
                                         NoNewlineExpr, Identifier, Keyword,
                                         Symbol, Spacing);

import Param;
import Header;
import NoNewlineType;
import NoNewlineExpr;
import Identifier;
import Keyword;
import Symbol;
import Spacing;

/* DimUnitDecl ::=
     dim w Id (w = w NoNewlineType)? s (unit | SI_unit) w Id (wr Id)*
         (w = w NoNewlineExpr)?
   | dim w Id (w = w NoNewlineType)? (w default w Id)?
   | (unit | SI_unit) w Id (wr Id)* (w : w NoNewlineType)? (w = w NoNewlineExpr)?
 */
List<DimUnitDecl> DimUnitDecl =
     <ErrorProduction1>
     dim w a1:OpName a2:(w void:equals w NoNewlineType)? s a3:(unit / SI_unit) w
     a4:Id a5s:(wr Id)* a6:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       log(span, a1 + " is not a valid dimension name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = FortressUtil.mkList((DimUnitDecl)NodeFactory.makeDimDecl(span, id));
     }
   / <ErrorProduction2>
     dim w a1:Id a2:(w void:equals w NoNewlineType)? s a3:(unit / SI_unit) w
     a4:OpName a5s:(wr Id)* a6:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       log(span, a4 + " is not a valid unit name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = FortressUtil.mkList((DimUnitDecl)NodeFactory.makeDimDecl(span, id));
     }
   / dim w a1:Id a2:(w void:equals w NoNewlineType)? s a3:(unit / SI_unit) w
     a4:Id a5s:(wr Id)* a6:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       DimDecl dim = new DimDecl(span, a1, Option.wrap(a2));
       boolean si_unit;
       if (a3.equals("SI_unit")) si_unit = true;
       else                      si_unit = false;
       List<Id> ids = new ArrayList<Id>();
       ids.add(a4);
       for (Id a5Elt : a5s.list()) { ids.add(a5Elt); }
       Type ty = new VarType(a1.getSpan(), a1);
       UnitDecl unit = new UnitDecl(span, si_unit, ids, Option.some(ty),
                                    Option.wrap(a6));
       yyValue = FortressUtil.mkList(dim, unit);
     }
   / <ErrorProduction3>
     dim w a1:OpName a2:(w void:equals w NoNewlineType)? a3:(w default w Id)?
     { Span span = createSpan(yyStart,yyCount);
       log(span, a1 + " is not a valid dimension name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = FortressUtil.mkList((DimUnitDecl)NodeFactory.makeDimDecl(span, id));
     }
   / <ErrorProduction4>
     dim w a1:Id a2:(w void:equals w NoNewlineType)? w default w a3:OpName
     { Span span = createSpan(yyStart,yyCount);
       log(span, a3 + " is not a valid unit name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = FortressUtil.mkList((DimUnitDecl)NodeFactory.makeDimDecl(span, id));
     }
   / dim w a1:Id a2:(w void:equals w NoNewlineType)? a3:(w default w Id)?
     { DimDecl dim = new DimDecl(createSpan(yyStart,yyCount),
                                 a1, Option.wrap(a2), Option.wrap(a3));
       yyValue = FortressUtil.mkList((DimUnitDecl)dim);
     }
   / <ErrorProduction5>
     a1:(unit / SI_unit) w a2:OpName a3s:(wr Id)* a4:(w void:colon w NoNewlineType)?
     a5:(w void:equals w NoNewlineExpr)?
     { Span span = createSpan(yyStart,yyCount);
       log(span, a2 + " is not a valid unit name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = FortressUtil.mkList((DimUnitDecl)NodeFactory.makeDimDecl(span, id));
     }
   / a1:(unit / SI_unit) w a2:Id a3s:(wr Id)* a4:(w void:colon w NoNewlineType)?
     a5:(w void:equals w NoNewlineExpr)?
     { boolean si_unit;
       if (a1.equals("SI_unit")) si_unit = true;
       else                      si_unit = false;
       List<Id> ids = new ArrayList<Id>();
       ids.add(a2);
       for (Id a3Elt : a3s.list()) { ids.add(a3Elt); }
       UnitDecl unit = new UnitDecl(createSpan(yyStart,yyCount), si_unit,
                                    ids, Option.wrap(a4), Option.wrap(a5));
       yyValue = FortressUtil.mkList((DimUnitDecl)unit);
     };

/* TypeAlias ::= type w Id (w StaticParams)? w = w NoNewlineType */
TypeAlias TypeAlias =
     type w a1:Id a2:(w StaticParams)? w equals w a3:NoNewlineType
     { if (a2 == null) a2 = FortressUtil.emptyStaticParams();
       yyValue = new TypeAlias(createSpan(yyStart,yyCount), a1, a2, a3);
     }
   / <ErrorProduction>
     type w a1:OpName a2:(w StaticParams)? w equals w a3:NoNewlineType
     { Span span = createSpan(yyStart,yyCount);
       log(span, a1 + " is not a valid type name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = new TypeAlias(span, id, a2, a3);
     };

/* TestDecl ::= test w Id w [ w GeneratorClauseList w ] w = w NoNewlineExpr */
TestDecl TestDecl =
     test w a1:Id w opensquare w a2:GeneratorClauseList w closesquare w equals w
     a3:NoNewlineExpr
     { yyValue = new TestDecl(createSpan(yyStart,yyCount), a1, a2, a3); }
   / <ErrorProduction>
     test w a1:OpName w opensquare w a2:GeneratorClauseList w closesquare w equals w
     a3:NoNewlineExpr
     { Span span = createSpan(yyStart,yyCount);
       log(span, a1 + " is not a valid test name.");
       Id id = NodeFactory.bogusId(span);
       yyValue = new TestDecl(span, id, a2, a3);
     };

/* PropertyDecl ::=
     property (w Id w =)? (w FORALL w ValParam)? w NoNewlineExpr
 */
PropertyDecl PropertyDecl =
     property a1:(w Id w void:equals)? a2:(w FORALL w ValParam)? w
     a3:NoNewlineExpr
     { Option<Id> id = (a1 == null) ? Option.<Id>none() : Option.some(a1);
       if (a2 == null) a2 = FortressUtil.emptyParams();
       yyValue = new PropertyDecl(createSpan(yyStart,yyCount), id, a2, a3);
     }
   / <ErrorProduction>
     property w a1:OpName w equals a2:(w FORALL w ValParam)? w
     a3:NoNewlineExpr
     { Span span = createSpan(yyStart,yyCount);
       log(span, a1 + " is not a valid test name.");
       yyValue = new PropertyDecl(span, Option.<Id>none(), a2, a3);
     };
