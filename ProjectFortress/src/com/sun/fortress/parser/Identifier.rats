/*******************************************************************************
    Copyright 2008 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************/

/*
 * Definition of Fortress identifiers.
 */
module com.sun.fortress.parser.Identifier(Keyword, Symbol, Unicode,
                                          Spacing);

import Keyword;
import Symbol;
import Unicode;
import Spacing;

option setOfString(FORTRESS_KEYWORDS);

/* A word is an identifier if it begins with a letter and is not a reserved
   word, an operator, or all or part of a numeral.
 */
/*
        String id      = s1:idstart s2:idrest*
        { String s = s1;
          for (String ss : s2.list()) {
              s += ss;
          }
          if (!FORTRESS_KEYWORDS.contains(s))
              yyValue = difference(yyStart, yyResult.index);
          else {        // Error production
              return yyError.select(s + " is a keyword!", yyError.index + 10);
          }
        };
*/
private transient String PrimeCharacter = [\u2032-\u2037] ;
transient String id      = s:(idstart idrest*) &{ !FORTRESS_KEYWORDS.contains(s) };
transient String idstart = UnicodeIdStart / [_] ;
transient String idrest  = UnicodeIdStart / ['] / PrimeCharacter / UnicodeIdRest ; // '

private String IdText  = a1:id &{ FortressUtil.validId(a1) } ;

Id Id =
     <FIRST> a1:IdText { yyValue = new Id(createSpan(yyStart,yyCount), a1); };

/* BindId ::= Id / _ */
Id BindId =
     Id
   / a1:"_" { yyValue = new Id(createSpan(yyStart,yyCount), a1); };

/* BindIdList ::= BindId (w , w BindId)* */
List<Id> BindIdList = a1:BindId a2s:(w comma w BindId)*
     { yyValue = FortressUtil.mkList(a1, a2s.list()); };

/* BindIdOrBindIdTuple ::=
     BindId
   | "(" w BindId w "," w BindIdList w ")"
 */
List<Id> BindIdOrBindIdTuple =
     <FIRST> a1:BindId
     { yyValue = FortressUtil.mkList(a1); }
   / openparen w a1:BindId w comma w a2s:BindIdList w closeparen
     { yyValue = FortressUtil.mkList(a1, a2s); };

/* SimpleName ::= Id | opr w (Encloser / Op) | opr w EncloserPair */
IdOrOpOrAnonymousName SimpleName =
     Id
   / opr big:(w BIG)? w a1:(Encloser / Op)
     { if (big != null) yyValue = NodeFactory.makeBig(a1);
       else yyValue = a1;
     }
   / opr big:(w BIG)? w a1:EncloserPair
     { if (big != null) yyValue = NodeFactory.makeBig(a1);
       else yyValue = a1;
     };

private String idOrKeyword = s:(idstart idrest*) &{ true };

/* APIName ::= Id(.Id)* */
/* This says that if we find ellipses, the dot doesn't count */
APIName APIName =
     a1:idOrKeyword &(w ellipses)
     { Span span = createSpan(yyStart,yyCount);
       if (FORTRESS_KEYWORDS.contains(a1))
           yyValue = syntaxError(span, a1 + " is a Fortress keyword.\n");
       else if (FortressUtil.validId(a1))
           yyValue = NodeFactory.makeAPIName(span, new Id(span, a1));
       else if (FortressUtil.validOp(a1))
           yyValue = syntaxError(span,
                                 a1 + " is not a valid Fortress identifier.\n" +
                                 "A non-reserved word that is made up of a mixture" +
                                 " of uppercase letters and underscores (but no " +
                                 "digits), does not begin or end with an " +
                                 "underscore, and contains at least two distinct " +
                                 "letters is an operator name.");
       else yyValue = syntaxError(span, a1 + " is not a valid Fortress identifier.\n");
     }
   / a1:idOrKeyword a2s:(dot idOrKeyword)* &(w ellipses)
     { Span span = createSpan(yyStart,yyCount);
       List<Id> ids = CollectUtil.makeList(IterUtil.compose(new Id(span, a1),
                                                       IterUtil.map(a2s.list(),
                                                                    NodeUtil.StringToIdFn)));
       for (Id _id : ids) {
           String id = _id.getText();
           if (FORTRESS_KEYWORDS.contains(id))
               syntaxError(span, id + " is a Fortress keyword.\n");
           else if (FortressUtil.validOp(id))
               syntaxError(span, id + " is not a valid Fortress identifier.\n" +
                           "A non-reserved word that is made up of a mixture" +
                           " of uppercase letters and underscores (but no " +
                           "digits), does not begin or end with an " +
                           "underscore, and contains at least two distinct " +
                           "letters is an operator name.");
           else if (!FortressUtil.validId(id))
               syntaxError(span, id + " is not a valid Fortress identifier.\n");
       }
       yyValue = NodeFactory.makeAPIName(span, ids);
     }
   / a1:idOrKeyword a2s:(dot idOrKeyword)*
     { Span span = createSpan(yyStart,yyCount);
       List<Id> ids = CollectUtil.makeList(IterUtil.compose(new Id(span, a1),
                                                       IterUtil.map(a2s.list(),
                                                                    NodeUtil.StringToIdFn)));
       for (Id _id : ids) {
           String id = _id.getText();
           if (FORTRESS_KEYWORDS.contains(id))
               syntaxError(span, id + " is a Fortress keyword.\n");
           else if (FortressUtil.validOp(id))
               syntaxError(span, id + " is not a valid Fortress identifier.\n" +
                           "A non-reserved word that is made up of a mixture" +
                           " of uppercase letters and underscores (but no " +
                           "digits), does not begin or end with an " +
                           "underscore, and contains at least two distinct " +
                           "letters is an operator name.");
           else if (!FortressUtil.validId(id))
               syntaxError(span, id + " is not a valid Fortress identifier.\n");
       }
       yyValue = NodeFactory.makeAPIName(span, ids);
     };

/* QualifiedName ::= Id(.Id)* */
/* Maybe a qualified name; includes an unqualified name */
/* This says that if we find ellipses, the dot doesn't count */
Id QualifiedName =
     yyValue:Id &(w ellipses)
   / a1:Id a2s:(dot Id)* &(w ellipses)
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount),a1,a2s.list()); }
   / a1:Id a2s:(dot Id)*
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount),a1,a2s.list()); };
