(*******************************************************************************
    Copyright 2011, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

******************************************************************************)
component SummationTest
import CompilerLibrary.{...}
export Executable


object SumReductionZZ32
   getter asString():String = "ReductionZZ32"
   empty(): ZZ32 = 0
   join(a:ZZ32, b:ZZ32) : ZZ32 = a+b
end


SumSeqGenZZ32(lo:ZZ32, hi:ZZ32):ZZ32 =
   if lo = hi then lo 
   else
      mid = (lo + hi) DIV 2
      left = SumSeqGenZZ32(lo, mid)
      right = SumSeqGenZZ32(mid+1, hi)
      SumReductionZZ32.join(left,right)
      end

SumParGenZZ32(lo:ZZ32, hi:ZZ32):ZZ32 =
   if lo = hi then lo 
   else
      mid = (lo + hi) DIV 2
      (left,right) = (SumSeqGenZZ32(lo, mid), SumSeqGenZZ32(mid+1, hi))
      SumReductionZZ32.join(left,right)
   end

run():() = do
   z:ZZ32Vector = makeZZ32Vector(10)
   for i <- 0#10  do
      z.putValue(i,i)
   end

  foo:ZZ32 = 4092
  for i<-seq(1:10) do
     start:RR64 = nanoTime() 
     seq_answer:ZZ32 = SumSeqGenZZ32(0, foo)
     phase1:RR64 = nanoTime()
     par_answer:ZZ32  = SumParGenZZ32(0, foo)
     phase2:RR64 = nanoTime()

     print("Sequential Results ")
     print(seq_answer)
     print("     ")
     println(phase1 - start)

     print("Parallel Results ")
     print(par_answer)
     print("     ")
     println(phase2 - phase1)
   end

   end
end
