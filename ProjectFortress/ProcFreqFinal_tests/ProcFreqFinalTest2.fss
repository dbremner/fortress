(*******************************************************************************
    Copyright 2011, Oracle and/or its affiliates.
    All rights reserved.


    Use is subject to license terms.

    This distribution may include materials developed by third parties.

******************************************************************************)
component ProcFreqFinalTest2
export Executable

(* This is just a stub *)
pchisq(testStatistic:RR64, df:ZZ32):RR64 = 0.9766578

(*  This is what we want test2 to look like
test2():RR64 = 
     z:ZZ32[2,2] = [ 11 8 ; 20 12]
     k = 2
     QB:RR64 = SUM [i<-2:k][j<-1:i](x[i,j] - x[j,1])^2/(x[i,j] + x[j,i])
     1-pchisq(QB, nrow(x)*(nrow(x)-1)/2)
end
*)

(* This is the executable R code
x<- array(1:4, dim=c(2,2)
x[1,1] <- 11
x[1,2] <- 8
x[2,1] <- 20
x[2,2] <- 12
QB <- 0
for (i in 1:nrow(x)) {
   for (j in 1:ncol(x)) {
      if (i < j) {
         QB <- QB + (x[i,j]-x[j,i])^2/(x[i,j]+x[j,i])
      }
   }
}
1-pchisq(QB, nrow(x) * (nrow(x)-1)/2)

*)

(* This is what we have to do for now *)


temp(x_i_j:ZZ32, x_j_i:ZZ32) :RR64= temp(x_i_j.asRR64(), x_j_i.asRR64())
temp(x_i_j:RR64, x_j_i:RR64):RR64 =   (x_i_j - x_j_i)^2 / (x_i_j + x_j_i)

(* Need 0 and 1 based vectors *)
z:ZZ32Vector = makeZZ32Vector(3,3)

object SumReductionRR64
   getter asString():String = "ReductionRR64"
   empty(): RR64 = 0.0
   join(a:RR64, b:RR64) : RR64 = a+b
end

bar(first:ZZ32, lo:ZZ32, hi:ZZ32):RR64 = 
   if lo = hi then temp(z[first, lo], z[lo,first])
   else 
      mid = (lo + hi) DIV 2
      left = bar(first, lo, mid)
      right = bar(first, mid+1, hi)
      SumReductionRR64.join(left, right)
   end


foo( lo:ZZ32, hi:ZZ32):RR64 =
   if lo = hi then bar(lo, 1, lo) 
   else
      mid = (lo + hi) DIV 2
      left = foo(lo, mid)
      right = foo(mid+1, hi)
      SumReductionRR64.join(left,right)
   end

nrow(x:ZZ32Vector) = 2

test2():RR64 = do
    z.putValue(1,1,11)
    z.putValue(1,2,8)
    z.putValue(2,1,20)
    z.putValue(2,2,12)
    k:ZZ32 = 2
    temp1:ZZ32 = nrow(z)
    temp2:ZZ32 = temp1 - 1
    temp3:ZZ32 = temp2 DIV 2
    temp4:ZZ32 = temp1 temp3
    1.0 - pchisq(foo(2,k), temp4)
end

run()  = do
   println(test2())
end
end
