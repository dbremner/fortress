(** COPYRIGHT **)
(*******************************************************************************
    Copyright 2007 Sun Microsystems, Inc.,
    4150 Network Circle, Santa Clara, California 95054, U.S.A.
    All rights reserved.

    U.S. Government Rights - Commercial software.
    Government users are subject to the Sun Microsystems, Inc. standard
    license agreement and applicable provisions of the FAR and its supplements.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.

    Sun, Sun Microsystems, the Sun logo and Java are trademarks or registered
    trademarks of Sun Microsystems, Inc. in the U.S. and other countries.
 ******************************************************************************)
(** END COPYRIGHT **)

component Expr.Case.a

import * from Set
export Executable

trait Planet excludes { Integral, Number, String } end
object Mercury extends Planet end
object Venus extends Planet end
object Earth extends Planet end
object Mars extends Planet end
object Jupiter extends Planet end
object Saturn extends Planet end
object Uranus extends Planet end
object Neptune extends Planet end

opr <(a:Planet, b:Planet):Boolean =
  case (a, b) of
    (Mercury, c) => true
    (Venus  , c) => not(c = Mercury)
    (Earth  , c) => not(c = Mercury OR c = Venus)
    (Mars   , c) => not(c = Mercury OR c = Venus OR c = Earth)
    (Jupiter, c) => c = Saturn OR c = Uranus OR c = Neptune
    (Saturn , c) => c = Urnaus OR c = Neptune
    (Uranus , c) => c = Neptune
    (Neptune, c) => false
  end

f(planet) = do
(** EXAMPLE **)
case planet IN of
  {"Mercury", "Venus", "Earth", "Mars"} => "inner"
  {"Jupiter", "Saturn", "Uranus", "Neptune"} => "outer"
  else => "remote"
end
(** END EXAMPLE **)
end

run(args:String...) = println f("Neptune")

end
